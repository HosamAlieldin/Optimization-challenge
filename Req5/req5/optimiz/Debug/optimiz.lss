
optimiz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000023a  00800100  00005106  0000517a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005106  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000053b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000053e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00005424  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f77  00000000  00000000  000054bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000916  00000000  00000000  00006433  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000185a  00000000  00000000  00006d49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  000085a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000421  00000000  00000000  00008758  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000315  00000000  00000000  00008b79  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00008e8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e0       	ldi	r30, 0x06	; 6
      7c:	f1 e5       	ldi	r31, 0x51	; 81
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 33       	cpi	r26, 0x3A	; 58
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
      8a:	0e 94 10 28 	call	0x5020	; 0x5020 <main>
      8e:	0c 94 81 28 	jmp	0x5102	; 0x5102 <_exit>

00000092 <__bad_interrupt>:
      92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <inv_shift_rows>:
 *  Row1: s1  s5  s9  s13   >>> 1 byte
 *  Row2: s2  s6  s10 s14   >>> 2 bytes
 *  Row3: s3  s7  s11 s15   >>> 3 bytes
 */
static void inv_shift_rows(register uint8_t *state)
{
      96:	1f 93       	push	r17
      98:	cf 93       	push	r28
      9a:	df 93       	push	r29
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
    register uint8_t temp;
    // row1
    temp        = *(state+13);
      a0:	fc 01       	movw	r30, r24
      a2:	15 85       	ldd	r17, Z+13	; 0x0d
    *(state+13) = *(state+9);
      a4:	9c 01       	movw	r18, r24
      a6:	23 5f       	subi	r18, 0xF3	; 243
      a8:	3f 4f       	sbci	r19, 0xFF	; 255
      aa:	fc 01       	movw	r30, r24
      ac:	41 85       	ldd	r20, Z+9	; 0x09
      ae:	f9 01       	movw	r30, r18
      b0:	40 83       	st	Z, r20
    *(state+9)  = *(state+5);
      b2:	9c 01       	movw	r18, r24
      b4:	27 5f       	subi	r18, 0xF7	; 247
      b6:	3f 4f       	sbci	r19, 0xFF	; 255
      b8:	fc 01       	movw	r30, r24
      ba:	45 81       	ldd	r20, Z+5	; 0x05
      bc:	f9 01       	movw	r30, r18
      be:	40 83       	st	Z, r20
    *(state+5)  = *(state+1);
      c0:	9c 01       	movw	r18, r24
      c2:	2b 5f       	subi	r18, 0xFB	; 251
      c4:	3f 4f       	sbci	r19, 0xFF	; 255
      c6:	fc 01       	movw	r30, r24
      c8:	41 81       	ldd	r20, Z+1	; 0x01
      ca:	f9 01       	movw	r30, r18
      cc:	40 83       	st	Z, r20
    *(state+1)  = temp;
      ce:	9c 01       	movw	r18, r24
      d0:	2f 5f       	subi	r18, 0xFF	; 255
      d2:	3f 4f       	sbci	r19, 0xFF	; 255
      d4:	f9 01       	movw	r30, r18
      d6:	10 83       	st	Z, r17
    // row2
    temp        = *(state+14);
      d8:	fc 01       	movw	r30, r24
      da:	16 85       	ldd	r17, Z+14	; 0x0e
    *(state+14) = *(state+6);
      dc:	9c 01       	movw	r18, r24
      de:	22 5f       	subi	r18, 0xF2	; 242
      e0:	3f 4f       	sbci	r19, 0xFF	; 255
      e2:	fc 01       	movw	r30, r24
      e4:	46 81       	ldd	r20, Z+6	; 0x06
      e6:	f9 01       	movw	r30, r18
      e8:	40 83       	st	Z, r20
    *(state+6)  = temp;
      ea:	9c 01       	movw	r18, r24
      ec:	2a 5f       	subi	r18, 0xFA	; 250
      ee:	3f 4f       	sbci	r19, 0xFF	; 255
      f0:	f9 01       	movw	r30, r18
      f2:	10 83       	st	Z, r17
    temp        = *(state+10);
      f4:	fc 01       	movw	r30, r24
      f6:	12 85       	ldd	r17, Z+10	; 0x0a
    *(state+10) = *(state+2);
      f8:	9c 01       	movw	r18, r24
      fa:	26 5f       	subi	r18, 0xF6	; 246
      fc:	3f 4f       	sbci	r19, 0xFF	; 255
      fe:	fc 01       	movw	r30, r24
     100:	42 81       	ldd	r20, Z+2	; 0x02
     102:	f9 01       	movw	r30, r18
     104:	40 83       	st	Z, r20
    *(state+2)  = temp;
     106:	9c 01       	movw	r18, r24
     108:	2e 5f       	subi	r18, 0xFE	; 254
     10a:	3f 4f       	sbci	r19, 0xFF	; 255
     10c:	f9 01       	movw	r30, r18
     10e:	10 83       	st	Z, r17
    // row3
    temp        = *(state+3);
     110:	fc 01       	movw	r30, r24
     112:	13 81       	ldd	r17, Z+3	; 0x03
    *(state+3)  = *(state+7);
     114:	9c 01       	movw	r18, r24
     116:	2d 5f       	subi	r18, 0xFD	; 253
     118:	3f 4f       	sbci	r19, 0xFF	; 255
     11a:	fc 01       	movw	r30, r24
     11c:	47 81       	ldd	r20, Z+7	; 0x07
     11e:	f9 01       	movw	r30, r18
     120:	40 83       	st	Z, r20
    *(state+7)  = *(state+11);
     122:	9c 01       	movw	r18, r24
     124:	29 5f       	subi	r18, 0xF9	; 249
     126:	3f 4f       	sbci	r19, 0xFF	; 255
     128:	fc 01       	movw	r30, r24
     12a:	43 85       	ldd	r20, Z+11	; 0x0b
     12c:	f9 01       	movw	r30, r18
     12e:	40 83       	st	Z, r20
    *(state+11) = *(state+15);
     130:	9c 01       	movw	r18, r24
     132:	25 5f       	subi	r18, 0xF5	; 245
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	fc 01       	movw	r30, r24
     138:	47 85       	ldd	r20, Z+15	; 0x0f
     13a:	f9 01       	movw	r30, r18
     13c:	40 83       	st	Z, r20
    *(state+15) = temp;
     13e:	0f 96       	adiw	r24, 0x0f	; 15
     140:	fc 01       	movw	r30, r24
     142:	10 83       	st	Z, r17
}
     144:	00 00       	nop
     146:	df 91       	pop	r29
     148:	cf 91       	pop	r28
     14a:	1f 91       	pop	r17
     14c:	08 95       	ret

0000014e <aes_decrypt_128>:
void aes_decrypt_128( register uint8_t *roundkeys, register uint8_t *ciphertext, register uint8_t *plaintext)
{
     14e:	af 92       	push	r10
     150:	bf 92       	push	r11
     152:	cf 92       	push	r12
     154:	df 92       	push	r13
     156:	ef 92       	push	r14
     158:	ff 92       	push	r15
     15a:	0f 93       	push	r16
     15c:	1f 93       	push	r17
     15e:	cf 93       	push	r28
     160:	df 93       	push	r29
     162:	cd b7       	in	r28, 0x3d	; 61
     164:	de b7       	in	r29, 0x3e	; 62
     166:	e4 97       	sbiw	r28, 0x34	; 52
     168:	0f b6       	in	r0, 0x3f	; 63
     16a:	f8 94       	cli
     16c:	de bf       	out	0x3e, r29	; 62
     16e:	0f be       	out	0x3f, r0	; 63
     170:	cd bf       	out	0x3d, r28	; 61
     172:	7c 01       	movw	r14, r24
     174:	cb 01       	movw	r24, r22
     176:	8a 01       	movw	r16, r20
    uint8_t tmp[16];
    register uint8_t t, u, v;
    //register uint8_t i;
	register uint8_t j;

    roundkeys += 160;
     178:	20 ea       	ldi	r18, 0xA0	; 160
     17a:	e2 0e       	add	r14, r18
     17c:	f1 1c       	adc	r15, r1
	for ( i = (AES_BLOCK_SIZE-1); i != 0; --i ) {
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
    }
	*(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
	*/
	*(plaintext+0) = *(ciphertext+0) ^ *(roundkeys+0);
     17e:	fc 01       	movw	r30, r24
     180:	30 81       	ld	r19, Z
     182:	f7 01       	movw	r30, r14
     184:	20 81       	ld	r18, Z
     186:	23 27       	eor	r18, r19
     188:	f8 01       	movw	r30, r16
     18a:	20 83       	st	Z, r18
	*(plaintext+1) = *(ciphertext+1) ^ *(roundkeys+1);
     18c:	98 01       	movw	r18, r16
     18e:	2f 5f       	subi	r18, 0xFF	; 255
     190:	3f 4f       	sbci	r19, 0xFF	; 255
     192:	ac 01       	movw	r20, r24
     194:	4f 5f       	subi	r20, 0xFF	; 255
     196:	5f 4f       	sbci	r21, 0xFF	; 255
     198:	fa 01       	movw	r30, r20
     19a:	60 81       	ld	r22, Z
     19c:	a7 01       	movw	r20, r14
     19e:	4f 5f       	subi	r20, 0xFF	; 255
     1a0:	5f 4f       	sbci	r21, 0xFF	; 255
     1a2:	fa 01       	movw	r30, r20
     1a4:	40 81       	ld	r20, Z
     1a6:	46 27       	eor	r20, r22
     1a8:	f9 01       	movw	r30, r18
     1aa:	40 83       	st	Z, r20
	*(plaintext+2) = *(ciphertext+2) ^ *(roundkeys+2);
     1ac:	98 01       	movw	r18, r16
     1ae:	2e 5f       	subi	r18, 0xFE	; 254
     1b0:	3f 4f       	sbci	r19, 0xFF	; 255
     1b2:	ac 01       	movw	r20, r24
     1b4:	4e 5f       	subi	r20, 0xFE	; 254
     1b6:	5f 4f       	sbci	r21, 0xFF	; 255
     1b8:	fa 01       	movw	r30, r20
     1ba:	60 81       	ld	r22, Z
     1bc:	a7 01       	movw	r20, r14
     1be:	4e 5f       	subi	r20, 0xFE	; 254
     1c0:	5f 4f       	sbci	r21, 0xFF	; 255
     1c2:	fa 01       	movw	r30, r20
     1c4:	40 81       	ld	r20, Z
     1c6:	46 27       	eor	r20, r22
     1c8:	f9 01       	movw	r30, r18
     1ca:	40 83       	st	Z, r20
	*(plaintext+3) = *(ciphertext+3) ^ *(roundkeys+3);
     1cc:	98 01       	movw	r18, r16
     1ce:	2d 5f       	subi	r18, 0xFD	; 253
     1d0:	3f 4f       	sbci	r19, 0xFF	; 255
     1d2:	ac 01       	movw	r20, r24
     1d4:	4d 5f       	subi	r20, 0xFD	; 253
     1d6:	5f 4f       	sbci	r21, 0xFF	; 255
     1d8:	fa 01       	movw	r30, r20
     1da:	60 81       	ld	r22, Z
     1dc:	a7 01       	movw	r20, r14
     1de:	4d 5f       	subi	r20, 0xFD	; 253
     1e0:	5f 4f       	sbci	r21, 0xFF	; 255
     1e2:	fa 01       	movw	r30, r20
     1e4:	40 81       	ld	r20, Z
     1e6:	46 27       	eor	r20, r22
     1e8:	f9 01       	movw	r30, r18
     1ea:	40 83       	st	Z, r20
	*(plaintext+4) = *(ciphertext+4) ^ *(roundkeys+4);
     1ec:	98 01       	movw	r18, r16
     1ee:	2c 5f       	subi	r18, 0xFC	; 252
     1f0:	3f 4f       	sbci	r19, 0xFF	; 255
     1f2:	ac 01       	movw	r20, r24
     1f4:	4c 5f       	subi	r20, 0xFC	; 252
     1f6:	5f 4f       	sbci	r21, 0xFF	; 255
     1f8:	fa 01       	movw	r30, r20
     1fa:	60 81       	ld	r22, Z
     1fc:	a7 01       	movw	r20, r14
     1fe:	4c 5f       	subi	r20, 0xFC	; 252
     200:	5f 4f       	sbci	r21, 0xFF	; 255
     202:	fa 01       	movw	r30, r20
     204:	40 81       	ld	r20, Z
     206:	46 27       	eor	r20, r22
     208:	f9 01       	movw	r30, r18
     20a:	40 83       	st	Z, r20
	*(plaintext+5) = *(ciphertext+5) ^ *(roundkeys+5);
     20c:	98 01       	movw	r18, r16
     20e:	2b 5f       	subi	r18, 0xFB	; 251
     210:	3f 4f       	sbci	r19, 0xFF	; 255
     212:	ac 01       	movw	r20, r24
     214:	4b 5f       	subi	r20, 0xFB	; 251
     216:	5f 4f       	sbci	r21, 0xFF	; 255
     218:	fa 01       	movw	r30, r20
     21a:	60 81       	ld	r22, Z
     21c:	a7 01       	movw	r20, r14
     21e:	4b 5f       	subi	r20, 0xFB	; 251
     220:	5f 4f       	sbci	r21, 0xFF	; 255
     222:	fa 01       	movw	r30, r20
     224:	40 81       	ld	r20, Z
     226:	46 27       	eor	r20, r22
     228:	f9 01       	movw	r30, r18
     22a:	40 83       	st	Z, r20
	*(plaintext+6) = *(ciphertext+6) ^ *(roundkeys+6);
     22c:	98 01       	movw	r18, r16
     22e:	2a 5f       	subi	r18, 0xFA	; 250
     230:	3f 4f       	sbci	r19, 0xFF	; 255
     232:	ac 01       	movw	r20, r24
     234:	4a 5f       	subi	r20, 0xFA	; 250
     236:	5f 4f       	sbci	r21, 0xFF	; 255
     238:	fa 01       	movw	r30, r20
     23a:	60 81       	ld	r22, Z
     23c:	a7 01       	movw	r20, r14
     23e:	4a 5f       	subi	r20, 0xFA	; 250
     240:	5f 4f       	sbci	r21, 0xFF	; 255
     242:	fa 01       	movw	r30, r20
     244:	40 81       	ld	r20, Z
     246:	46 27       	eor	r20, r22
     248:	f9 01       	movw	r30, r18
     24a:	40 83       	st	Z, r20
	*(plaintext+7) = *(ciphertext+7) ^ *(roundkeys+7);
     24c:	98 01       	movw	r18, r16
     24e:	29 5f       	subi	r18, 0xF9	; 249
     250:	3f 4f       	sbci	r19, 0xFF	; 255
     252:	ac 01       	movw	r20, r24
     254:	49 5f       	subi	r20, 0xF9	; 249
     256:	5f 4f       	sbci	r21, 0xFF	; 255
     258:	fa 01       	movw	r30, r20
     25a:	60 81       	ld	r22, Z
     25c:	a7 01       	movw	r20, r14
     25e:	49 5f       	subi	r20, 0xF9	; 249
     260:	5f 4f       	sbci	r21, 0xFF	; 255
     262:	fa 01       	movw	r30, r20
     264:	40 81       	ld	r20, Z
     266:	46 27       	eor	r20, r22
     268:	f9 01       	movw	r30, r18
     26a:	40 83       	st	Z, r20
	*(plaintext+8) = *(ciphertext+8) ^ *(roundkeys+8);
     26c:	98 01       	movw	r18, r16
     26e:	28 5f       	subi	r18, 0xF8	; 248
     270:	3f 4f       	sbci	r19, 0xFF	; 255
     272:	ac 01       	movw	r20, r24
     274:	48 5f       	subi	r20, 0xF8	; 248
     276:	5f 4f       	sbci	r21, 0xFF	; 255
     278:	fa 01       	movw	r30, r20
     27a:	60 81       	ld	r22, Z
     27c:	a7 01       	movw	r20, r14
     27e:	48 5f       	subi	r20, 0xF8	; 248
     280:	5f 4f       	sbci	r21, 0xFF	; 255
     282:	fa 01       	movw	r30, r20
     284:	40 81       	ld	r20, Z
     286:	46 27       	eor	r20, r22
     288:	f9 01       	movw	r30, r18
     28a:	40 83       	st	Z, r20
	*(plaintext+9) = *(ciphertext+9) ^ *(roundkeys+9);
     28c:	98 01       	movw	r18, r16
     28e:	27 5f       	subi	r18, 0xF7	; 247
     290:	3f 4f       	sbci	r19, 0xFF	; 255
     292:	ac 01       	movw	r20, r24
     294:	47 5f       	subi	r20, 0xF7	; 247
     296:	5f 4f       	sbci	r21, 0xFF	; 255
     298:	fa 01       	movw	r30, r20
     29a:	60 81       	ld	r22, Z
     29c:	a7 01       	movw	r20, r14
     29e:	47 5f       	subi	r20, 0xF7	; 247
     2a0:	5f 4f       	sbci	r21, 0xFF	; 255
     2a2:	fa 01       	movw	r30, r20
     2a4:	40 81       	ld	r20, Z
     2a6:	46 27       	eor	r20, r22
     2a8:	f9 01       	movw	r30, r18
     2aa:	40 83       	st	Z, r20
	*(plaintext+10) = *(ciphertext+10) ^ *(roundkeys+10);
     2ac:	98 01       	movw	r18, r16
     2ae:	26 5f       	subi	r18, 0xF6	; 246
     2b0:	3f 4f       	sbci	r19, 0xFF	; 255
     2b2:	ac 01       	movw	r20, r24
     2b4:	46 5f       	subi	r20, 0xF6	; 246
     2b6:	5f 4f       	sbci	r21, 0xFF	; 255
     2b8:	fa 01       	movw	r30, r20
     2ba:	60 81       	ld	r22, Z
     2bc:	a7 01       	movw	r20, r14
     2be:	46 5f       	subi	r20, 0xF6	; 246
     2c0:	5f 4f       	sbci	r21, 0xFF	; 255
     2c2:	fa 01       	movw	r30, r20
     2c4:	40 81       	ld	r20, Z
     2c6:	46 27       	eor	r20, r22
     2c8:	f9 01       	movw	r30, r18
     2ca:	40 83       	st	Z, r20
	*(plaintext+11) = *(ciphertext+11) ^ *(roundkeys+11);
     2cc:	98 01       	movw	r18, r16
     2ce:	25 5f       	subi	r18, 0xF5	; 245
     2d0:	3f 4f       	sbci	r19, 0xFF	; 255
     2d2:	ac 01       	movw	r20, r24
     2d4:	45 5f       	subi	r20, 0xF5	; 245
     2d6:	5f 4f       	sbci	r21, 0xFF	; 255
     2d8:	fa 01       	movw	r30, r20
     2da:	60 81       	ld	r22, Z
     2dc:	a7 01       	movw	r20, r14
     2de:	45 5f       	subi	r20, 0xF5	; 245
     2e0:	5f 4f       	sbci	r21, 0xFF	; 255
     2e2:	fa 01       	movw	r30, r20
     2e4:	40 81       	ld	r20, Z
     2e6:	46 27       	eor	r20, r22
     2e8:	f9 01       	movw	r30, r18
     2ea:	40 83       	st	Z, r20
	*(plaintext+12) = *(ciphertext+12) ^ *(roundkeys+12);
     2ec:	98 01       	movw	r18, r16
     2ee:	24 5f       	subi	r18, 0xF4	; 244
     2f0:	3f 4f       	sbci	r19, 0xFF	; 255
     2f2:	ac 01       	movw	r20, r24
     2f4:	44 5f       	subi	r20, 0xF4	; 244
     2f6:	5f 4f       	sbci	r21, 0xFF	; 255
     2f8:	fa 01       	movw	r30, r20
     2fa:	60 81       	ld	r22, Z
     2fc:	a7 01       	movw	r20, r14
     2fe:	44 5f       	subi	r20, 0xF4	; 244
     300:	5f 4f       	sbci	r21, 0xFF	; 255
     302:	fa 01       	movw	r30, r20
     304:	40 81       	ld	r20, Z
     306:	46 27       	eor	r20, r22
     308:	f9 01       	movw	r30, r18
     30a:	40 83       	st	Z, r20
	*(plaintext+13) = *(ciphertext+13) ^ *(roundkeys+13);
     30c:	98 01       	movw	r18, r16
     30e:	23 5f       	subi	r18, 0xF3	; 243
     310:	3f 4f       	sbci	r19, 0xFF	; 255
     312:	ac 01       	movw	r20, r24
     314:	43 5f       	subi	r20, 0xF3	; 243
     316:	5f 4f       	sbci	r21, 0xFF	; 255
     318:	fa 01       	movw	r30, r20
     31a:	60 81       	ld	r22, Z
     31c:	a7 01       	movw	r20, r14
     31e:	43 5f       	subi	r20, 0xF3	; 243
     320:	5f 4f       	sbci	r21, 0xFF	; 255
     322:	fa 01       	movw	r30, r20
     324:	40 81       	ld	r20, Z
     326:	46 27       	eor	r20, r22
     328:	f9 01       	movw	r30, r18
     32a:	40 83       	st	Z, r20
	*(plaintext+14) = *(ciphertext+14) ^ *(roundkeys+14);
     32c:	98 01       	movw	r18, r16
     32e:	22 5f       	subi	r18, 0xF2	; 242
     330:	3f 4f       	sbci	r19, 0xFF	; 255
     332:	ac 01       	movw	r20, r24
     334:	42 5f       	subi	r20, 0xF2	; 242
     336:	5f 4f       	sbci	r21, 0xFF	; 255
     338:	fa 01       	movw	r30, r20
     33a:	60 81       	ld	r22, Z
     33c:	a7 01       	movw	r20, r14
     33e:	42 5f       	subi	r20, 0xF2	; 242
     340:	5f 4f       	sbci	r21, 0xFF	; 255
     342:	fa 01       	movw	r30, r20
     344:	40 81       	ld	r20, Z
     346:	46 27       	eor	r20, r22
     348:	f9 01       	movw	r30, r18
     34a:	40 83       	st	Z, r20
	*(plaintext+15) = *(ciphertext+15) ^ *(roundkeys+15);
     34c:	98 01       	movw	r18, r16
     34e:	21 5f       	subi	r18, 0xF1	; 241
     350:	3f 4f       	sbci	r19, 0xFF	; 255
     352:	0f 96       	adiw	r24, 0x0f	; 15
     354:	fc 01       	movw	r30, r24
     356:	40 81       	ld	r20, Z
     358:	c7 01       	movw	r24, r14
     35a:	0f 96       	adiw	r24, 0x0f	; 15
     35c:	fc 01       	movw	r30, r24
     35e:	80 81       	ld	r24, Z
     360:	84 27       	eor	r24, r20
     362:	f9 01       	movw	r30, r18
     364:	80 83       	st	Z, r24
	
    roundkeys -= 16;
     366:	f0 e1       	ldi	r31, 0x10	; 16
     368:	ef 1a       	sub	r14, r31
     36a:	f1 08       	sbc	r15, r1
    inv_shift_rows(plaintext);
     36c:	c8 01       	movw	r24, r16
     36e:	0e 94 4b 00 	call	0x96	; 0x96 <inv_shift_rows>
	for (i = (AES_BLOCK_SIZE-1); i != 0; --i) {
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
    }
	*(plaintext+i) = INV_SBOX[*(plaintext+i)];
	*/
	*(plaintext+0) = INV_SBOX[*(plaintext+0)];
     372:	f8 01       	movw	r30, r16
     374:	80 81       	ld	r24, Z
     376:	88 2f       	mov	r24, r24
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	80 50       	subi	r24, 0x00	; 0
     37c:	9f 4f       	sbci	r25, 0xFF	; 255
     37e:	fc 01       	movw	r30, r24
     380:	80 81       	ld	r24, Z
     382:	f8 01       	movw	r30, r16
     384:	80 83       	st	Z, r24
	*(plaintext+1) = INV_SBOX[*(plaintext+1)];
     386:	c8 01       	movw	r24, r16
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	98 01       	movw	r18, r16
     38c:	2f 5f       	subi	r18, 0xFF	; 255
     38e:	3f 4f       	sbci	r19, 0xFF	; 255
     390:	f9 01       	movw	r30, r18
     392:	20 81       	ld	r18, Z
     394:	22 2f       	mov	r18, r18
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	20 50       	subi	r18, 0x00	; 0
     39a:	3f 4f       	sbci	r19, 0xFF	; 255
     39c:	f9 01       	movw	r30, r18
     39e:	20 81       	ld	r18, Z
     3a0:	fc 01       	movw	r30, r24
     3a2:	20 83       	st	Z, r18
	*(plaintext+2) = INV_SBOX[*(plaintext+2)];
     3a4:	c8 01       	movw	r24, r16
     3a6:	02 96       	adiw	r24, 0x02	; 2
     3a8:	98 01       	movw	r18, r16
     3aa:	2e 5f       	subi	r18, 0xFE	; 254
     3ac:	3f 4f       	sbci	r19, 0xFF	; 255
     3ae:	f9 01       	movw	r30, r18
     3b0:	20 81       	ld	r18, Z
     3b2:	22 2f       	mov	r18, r18
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	20 50       	subi	r18, 0x00	; 0
     3b8:	3f 4f       	sbci	r19, 0xFF	; 255
     3ba:	f9 01       	movw	r30, r18
     3bc:	20 81       	ld	r18, Z
     3be:	fc 01       	movw	r30, r24
     3c0:	20 83       	st	Z, r18
	*(plaintext+3) = INV_SBOX[*(plaintext+3)];
     3c2:	c8 01       	movw	r24, r16
     3c4:	03 96       	adiw	r24, 0x03	; 3
     3c6:	98 01       	movw	r18, r16
     3c8:	2d 5f       	subi	r18, 0xFD	; 253
     3ca:	3f 4f       	sbci	r19, 0xFF	; 255
     3cc:	f9 01       	movw	r30, r18
     3ce:	20 81       	ld	r18, Z
     3d0:	22 2f       	mov	r18, r18
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	20 50       	subi	r18, 0x00	; 0
     3d6:	3f 4f       	sbci	r19, 0xFF	; 255
     3d8:	f9 01       	movw	r30, r18
     3da:	20 81       	ld	r18, Z
     3dc:	fc 01       	movw	r30, r24
     3de:	20 83       	st	Z, r18
	*(plaintext+4) = INV_SBOX[*(plaintext+4)];
     3e0:	c8 01       	movw	r24, r16
     3e2:	04 96       	adiw	r24, 0x04	; 4
     3e4:	98 01       	movw	r18, r16
     3e6:	2c 5f       	subi	r18, 0xFC	; 252
     3e8:	3f 4f       	sbci	r19, 0xFF	; 255
     3ea:	f9 01       	movw	r30, r18
     3ec:	20 81       	ld	r18, Z
     3ee:	22 2f       	mov	r18, r18
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	20 50       	subi	r18, 0x00	; 0
     3f4:	3f 4f       	sbci	r19, 0xFF	; 255
     3f6:	f9 01       	movw	r30, r18
     3f8:	20 81       	ld	r18, Z
     3fa:	fc 01       	movw	r30, r24
     3fc:	20 83       	st	Z, r18
	*(plaintext+5) = INV_SBOX[*(plaintext+5)];
     3fe:	c8 01       	movw	r24, r16
     400:	05 96       	adiw	r24, 0x05	; 5
     402:	98 01       	movw	r18, r16
     404:	2b 5f       	subi	r18, 0xFB	; 251
     406:	3f 4f       	sbci	r19, 0xFF	; 255
     408:	f9 01       	movw	r30, r18
     40a:	20 81       	ld	r18, Z
     40c:	22 2f       	mov	r18, r18
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	20 50       	subi	r18, 0x00	; 0
     412:	3f 4f       	sbci	r19, 0xFF	; 255
     414:	f9 01       	movw	r30, r18
     416:	20 81       	ld	r18, Z
     418:	fc 01       	movw	r30, r24
     41a:	20 83       	st	Z, r18
	*(plaintext+6) = INV_SBOX[*(plaintext+6)];
     41c:	c8 01       	movw	r24, r16
     41e:	06 96       	adiw	r24, 0x06	; 6
     420:	98 01       	movw	r18, r16
     422:	2a 5f       	subi	r18, 0xFA	; 250
     424:	3f 4f       	sbci	r19, 0xFF	; 255
     426:	f9 01       	movw	r30, r18
     428:	20 81       	ld	r18, Z
     42a:	22 2f       	mov	r18, r18
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	20 50       	subi	r18, 0x00	; 0
     430:	3f 4f       	sbci	r19, 0xFF	; 255
     432:	f9 01       	movw	r30, r18
     434:	20 81       	ld	r18, Z
     436:	fc 01       	movw	r30, r24
     438:	20 83       	st	Z, r18
	*(plaintext+7) = INV_SBOX[*(plaintext+7)];
     43a:	c8 01       	movw	r24, r16
     43c:	07 96       	adiw	r24, 0x07	; 7
     43e:	98 01       	movw	r18, r16
     440:	29 5f       	subi	r18, 0xF9	; 249
     442:	3f 4f       	sbci	r19, 0xFF	; 255
     444:	f9 01       	movw	r30, r18
     446:	20 81       	ld	r18, Z
     448:	22 2f       	mov	r18, r18
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	20 50       	subi	r18, 0x00	; 0
     44e:	3f 4f       	sbci	r19, 0xFF	; 255
     450:	f9 01       	movw	r30, r18
     452:	20 81       	ld	r18, Z
     454:	fc 01       	movw	r30, r24
     456:	20 83       	st	Z, r18
	*(plaintext+8) = INV_SBOX[*(plaintext+8)];
     458:	c8 01       	movw	r24, r16
     45a:	08 96       	adiw	r24, 0x08	; 8
     45c:	98 01       	movw	r18, r16
     45e:	28 5f       	subi	r18, 0xF8	; 248
     460:	3f 4f       	sbci	r19, 0xFF	; 255
     462:	f9 01       	movw	r30, r18
     464:	20 81       	ld	r18, Z
     466:	22 2f       	mov	r18, r18
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	20 50       	subi	r18, 0x00	; 0
     46c:	3f 4f       	sbci	r19, 0xFF	; 255
     46e:	f9 01       	movw	r30, r18
     470:	20 81       	ld	r18, Z
     472:	fc 01       	movw	r30, r24
     474:	20 83       	st	Z, r18
	*(plaintext+9) = INV_SBOX[*(plaintext+9)];
     476:	c8 01       	movw	r24, r16
     478:	09 96       	adiw	r24, 0x09	; 9
     47a:	98 01       	movw	r18, r16
     47c:	27 5f       	subi	r18, 0xF7	; 247
     47e:	3f 4f       	sbci	r19, 0xFF	; 255
     480:	f9 01       	movw	r30, r18
     482:	20 81       	ld	r18, Z
     484:	22 2f       	mov	r18, r18
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	20 50       	subi	r18, 0x00	; 0
     48a:	3f 4f       	sbci	r19, 0xFF	; 255
     48c:	f9 01       	movw	r30, r18
     48e:	20 81       	ld	r18, Z
     490:	fc 01       	movw	r30, r24
     492:	20 83       	st	Z, r18
	*(plaintext+10) = INV_SBOX[*(plaintext+10)];
     494:	c8 01       	movw	r24, r16
     496:	0a 96       	adiw	r24, 0x0a	; 10
     498:	98 01       	movw	r18, r16
     49a:	26 5f       	subi	r18, 0xF6	; 246
     49c:	3f 4f       	sbci	r19, 0xFF	; 255
     49e:	f9 01       	movw	r30, r18
     4a0:	20 81       	ld	r18, Z
     4a2:	22 2f       	mov	r18, r18
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	20 50       	subi	r18, 0x00	; 0
     4a8:	3f 4f       	sbci	r19, 0xFF	; 255
     4aa:	f9 01       	movw	r30, r18
     4ac:	20 81       	ld	r18, Z
     4ae:	fc 01       	movw	r30, r24
     4b0:	20 83       	st	Z, r18
	*(plaintext+11) = INV_SBOX[*(plaintext+11)];
     4b2:	c8 01       	movw	r24, r16
     4b4:	0b 96       	adiw	r24, 0x0b	; 11
     4b6:	98 01       	movw	r18, r16
     4b8:	25 5f       	subi	r18, 0xF5	; 245
     4ba:	3f 4f       	sbci	r19, 0xFF	; 255
     4bc:	f9 01       	movw	r30, r18
     4be:	20 81       	ld	r18, Z
     4c0:	22 2f       	mov	r18, r18
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	20 50       	subi	r18, 0x00	; 0
     4c6:	3f 4f       	sbci	r19, 0xFF	; 255
     4c8:	f9 01       	movw	r30, r18
     4ca:	20 81       	ld	r18, Z
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 83       	st	Z, r18
	*(plaintext+12) = INV_SBOX[*(plaintext+12)];
     4d0:	c8 01       	movw	r24, r16
     4d2:	0c 96       	adiw	r24, 0x0c	; 12
     4d4:	98 01       	movw	r18, r16
     4d6:	24 5f       	subi	r18, 0xF4	; 244
     4d8:	3f 4f       	sbci	r19, 0xFF	; 255
     4da:	f9 01       	movw	r30, r18
     4dc:	20 81       	ld	r18, Z
     4de:	22 2f       	mov	r18, r18
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	20 50       	subi	r18, 0x00	; 0
     4e4:	3f 4f       	sbci	r19, 0xFF	; 255
     4e6:	f9 01       	movw	r30, r18
     4e8:	20 81       	ld	r18, Z
     4ea:	fc 01       	movw	r30, r24
     4ec:	20 83       	st	Z, r18
	*(plaintext+13) = INV_SBOX[*(plaintext+13)];
     4ee:	c8 01       	movw	r24, r16
     4f0:	0d 96       	adiw	r24, 0x0d	; 13
     4f2:	98 01       	movw	r18, r16
     4f4:	23 5f       	subi	r18, 0xF3	; 243
     4f6:	3f 4f       	sbci	r19, 0xFF	; 255
     4f8:	f9 01       	movw	r30, r18
     4fa:	20 81       	ld	r18, Z
     4fc:	22 2f       	mov	r18, r18
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	20 50       	subi	r18, 0x00	; 0
     502:	3f 4f       	sbci	r19, 0xFF	; 255
     504:	f9 01       	movw	r30, r18
     506:	20 81       	ld	r18, Z
     508:	fc 01       	movw	r30, r24
     50a:	20 83       	st	Z, r18
	*(plaintext+14) = INV_SBOX[*(plaintext+14)];
     50c:	c8 01       	movw	r24, r16
     50e:	0e 96       	adiw	r24, 0x0e	; 14
     510:	98 01       	movw	r18, r16
     512:	22 5f       	subi	r18, 0xF2	; 242
     514:	3f 4f       	sbci	r19, 0xFF	; 255
     516:	f9 01       	movw	r30, r18
     518:	20 81       	ld	r18, Z
     51a:	22 2f       	mov	r18, r18
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	20 50       	subi	r18, 0x00	; 0
     520:	3f 4f       	sbci	r19, 0xFF	; 255
     522:	f9 01       	movw	r30, r18
     524:	20 81       	ld	r18, Z
     526:	fc 01       	movw	r30, r24
     528:	20 83       	st	Z, r18
	*(plaintext+15) = INV_SBOX[*(plaintext+15)];
     52a:	c8 01       	movw	r24, r16
     52c:	0f 96       	adiw	r24, 0x0f	; 15
     52e:	98 01       	movw	r18, r16
     530:	21 5f       	subi	r18, 0xF1	; 241
     532:	3f 4f       	sbci	r19, 0xFF	; 255
     534:	f9 01       	movw	r30, r18
     536:	20 81       	ld	r18, Z
     538:	22 2f       	mov	r18, r18
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	20 50       	subi	r18, 0x00	; 0
     53e:	3f 4f       	sbci	r19, 0xFF	; 255
     540:	f9 01       	movw	r30, r18
     542:	20 81       	ld	r18, Z
     544:	fc 01       	movw	r30, r24
     546:	20 83       	st	Z, r18

    for (j = (AES_ROUNDS-1); j != 0; --j) {
     548:	0f 2e       	mov	r0, r31
     54a:	f9 e0       	ldi	r31, 0x09	; 9
     54c:	af 2e       	mov	r10, r31
     54e:	f0 2d       	mov	r31, r0
     550:	5f c5       	rjmp	.+2750   	; 0x1010 <__stack+0x711>
		for ( i = AES_BLOCK_SIZE-1 ; i != 0; --i ) {
            *(tmp+i) = *(plaintext+i) ^ *(roundkeys+i);
        }
		*(tmp+i) = *(plaintext+i) ^ *(roundkeys+i);
		*/
		*(tmp+0) = *(plaintext+0) ^ *(roundkeys+0);
     552:	f8 01       	movw	r30, r16
     554:	90 81       	ld	r25, Z
     556:	f7 01       	movw	r30, r14
     558:	80 81       	ld	r24, Z
     55a:	89 27       	eor	r24, r25
     55c:	8d a3       	std	Y+37, r24	; 0x25
		*(tmp+1) = *(plaintext+1) ^ *(roundkeys+1);
     55e:	c8 01       	movw	r24, r16
     560:	01 96       	adiw	r24, 0x01	; 1
     562:	fc 01       	movw	r30, r24
     564:	20 81       	ld	r18, Z
     566:	c7 01       	movw	r24, r14
     568:	01 96       	adiw	r24, 0x01	; 1
     56a:	fc 01       	movw	r30, r24
     56c:	80 81       	ld	r24, Z
     56e:	82 27       	eor	r24, r18
     570:	8e a3       	std	Y+38, r24	; 0x26
		*(tmp+2) = *(plaintext+2) ^ *(roundkeys+2);
     572:	c8 01       	movw	r24, r16
     574:	02 96       	adiw	r24, 0x02	; 2
     576:	fc 01       	movw	r30, r24
     578:	20 81       	ld	r18, Z
     57a:	c7 01       	movw	r24, r14
     57c:	02 96       	adiw	r24, 0x02	; 2
     57e:	fc 01       	movw	r30, r24
     580:	80 81       	ld	r24, Z
     582:	82 27       	eor	r24, r18
     584:	8f a3       	std	Y+39, r24	; 0x27
		*(tmp+3) = *(plaintext+3) ^ *(roundkeys+3);
     586:	c8 01       	movw	r24, r16
     588:	03 96       	adiw	r24, 0x03	; 3
     58a:	fc 01       	movw	r30, r24
     58c:	20 81       	ld	r18, Z
     58e:	c7 01       	movw	r24, r14
     590:	03 96       	adiw	r24, 0x03	; 3
     592:	fc 01       	movw	r30, r24
     594:	80 81       	ld	r24, Z
     596:	82 27       	eor	r24, r18
     598:	88 a7       	std	Y+40, r24	; 0x28
		*(tmp+4) = *(plaintext+4) ^ *(roundkeys+4);
     59a:	c8 01       	movw	r24, r16
     59c:	04 96       	adiw	r24, 0x04	; 4
     59e:	fc 01       	movw	r30, r24
     5a0:	20 81       	ld	r18, Z
     5a2:	c7 01       	movw	r24, r14
     5a4:	04 96       	adiw	r24, 0x04	; 4
     5a6:	fc 01       	movw	r30, r24
     5a8:	80 81       	ld	r24, Z
     5aa:	82 27       	eor	r24, r18
     5ac:	89 a7       	std	Y+41, r24	; 0x29
		*(tmp+5) = *(plaintext+5) ^ *(roundkeys+5);
     5ae:	c8 01       	movw	r24, r16
     5b0:	05 96       	adiw	r24, 0x05	; 5
     5b2:	fc 01       	movw	r30, r24
     5b4:	20 81       	ld	r18, Z
     5b6:	c7 01       	movw	r24, r14
     5b8:	05 96       	adiw	r24, 0x05	; 5
     5ba:	fc 01       	movw	r30, r24
     5bc:	80 81       	ld	r24, Z
     5be:	82 27       	eor	r24, r18
     5c0:	8a a7       	std	Y+42, r24	; 0x2a
		*(tmp+6) = *(plaintext+6) ^ *(roundkeys+6);
     5c2:	c8 01       	movw	r24, r16
     5c4:	06 96       	adiw	r24, 0x06	; 6
     5c6:	fc 01       	movw	r30, r24
     5c8:	20 81       	ld	r18, Z
     5ca:	c7 01       	movw	r24, r14
     5cc:	06 96       	adiw	r24, 0x06	; 6
     5ce:	fc 01       	movw	r30, r24
     5d0:	80 81       	ld	r24, Z
     5d2:	82 27       	eor	r24, r18
     5d4:	8b a7       	std	Y+43, r24	; 0x2b
		*(tmp+7) = *(plaintext+7) ^ *(roundkeys+7);
     5d6:	c8 01       	movw	r24, r16
     5d8:	07 96       	adiw	r24, 0x07	; 7
     5da:	fc 01       	movw	r30, r24
     5dc:	20 81       	ld	r18, Z
     5de:	c7 01       	movw	r24, r14
     5e0:	07 96       	adiw	r24, 0x07	; 7
     5e2:	fc 01       	movw	r30, r24
     5e4:	80 81       	ld	r24, Z
     5e6:	82 27       	eor	r24, r18
     5e8:	8c a7       	std	Y+44, r24	; 0x2c
		*(tmp+8) = *(plaintext+8) ^ *(roundkeys+8);
     5ea:	c8 01       	movw	r24, r16
     5ec:	08 96       	adiw	r24, 0x08	; 8
     5ee:	fc 01       	movw	r30, r24
     5f0:	20 81       	ld	r18, Z
     5f2:	c7 01       	movw	r24, r14
     5f4:	08 96       	adiw	r24, 0x08	; 8
     5f6:	fc 01       	movw	r30, r24
     5f8:	80 81       	ld	r24, Z
     5fa:	82 27       	eor	r24, r18
     5fc:	8d a7       	std	Y+45, r24	; 0x2d
		*(tmp+9) = *(plaintext+9) ^ *(roundkeys+9);
     5fe:	c8 01       	movw	r24, r16
     600:	09 96       	adiw	r24, 0x09	; 9
     602:	fc 01       	movw	r30, r24
     604:	20 81       	ld	r18, Z
     606:	c7 01       	movw	r24, r14
     608:	09 96       	adiw	r24, 0x09	; 9
     60a:	fc 01       	movw	r30, r24
     60c:	80 81       	ld	r24, Z
     60e:	82 27       	eor	r24, r18
     610:	8e a7       	std	Y+46, r24	; 0x2e
		*(tmp+10) = *(plaintext+10) ^ *(roundkeys+10);
     612:	c8 01       	movw	r24, r16
     614:	0a 96       	adiw	r24, 0x0a	; 10
     616:	fc 01       	movw	r30, r24
     618:	20 81       	ld	r18, Z
     61a:	c7 01       	movw	r24, r14
     61c:	0a 96       	adiw	r24, 0x0a	; 10
     61e:	fc 01       	movw	r30, r24
     620:	80 81       	ld	r24, Z
     622:	82 27       	eor	r24, r18
     624:	8f a7       	std	Y+47, r24	; 0x2f
		*(tmp+11) = *(plaintext+11) ^ *(roundkeys+11);
     626:	c8 01       	movw	r24, r16
     628:	0b 96       	adiw	r24, 0x0b	; 11
     62a:	fc 01       	movw	r30, r24
     62c:	20 81       	ld	r18, Z
     62e:	c7 01       	movw	r24, r14
     630:	0b 96       	adiw	r24, 0x0b	; 11
     632:	fc 01       	movw	r30, r24
     634:	80 81       	ld	r24, Z
     636:	82 27       	eor	r24, r18
     638:	88 ab       	std	Y+48, r24	; 0x30
		*(tmp+12) = *(plaintext+12) ^ *(roundkeys+12);
     63a:	c8 01       	movw	r24, r16
     63c:	0c 96       	adiw	r24, 0x0c	; 12
     63e:	fc 01       	movw	r30, r24
     640:	20 81       	ld	r18, Z
     642:	c7 01       	movw	r24, r14
     644:	0c 96       	adiw	r24, 0x0c	; 12
     646:	fc 01       	movw	r30, r24
     648:	80 81       	ld	r24, Z
     64a:	82 27       	eor	r24, r18
     64c:	89 ab       	std	Y+49, r24	; 0x31
		*(tmp+13) = *(plaintext+13) ^ *(roundkeys+13);
     64e:	c8 01       	movw	r24, r16
     650:	0d 96       	adiw	r24, 0x0d	; 13
     652:	fc 01       	movw	r30, r24
     654:	20 81       	ld	r18, Z
     656:	c7 01       	movw	r24, r14
     658:	0d 96       	adiw	r24, 0x0d	; 13
     65a:	fc 01       	movw	r30, r24
     65c:	80 81       	ld	r24, Z
     65e:	82 27       	eor	r24, r18
     660:	8a ab       	std	Y+50, r24	; 0x32
		*(tmp+14) = *(plaintext+14) ^ *(roundkeys+14);
     662:	c8 01       	movw	r24, r16
     664:	0e 96       	adiw	r24, 0x0e	; 14
     666:	fc 01       	movw	r30, r24
     668:	20 81       	ld	r18, Z
     66a:	c7 01       	movw	r24, r14
     66c:	0e 96       	adiw	r24, 0x0e	; 14
     66e:	fc 01       	movw	r30, r24
     670:	80 81       	ld	r24, Z
     672:	82 27       	eor	r24, r18
     674:	8b ab       	std	Y+51, r24	; 0x33
		*(tmp+15) = *(plaintext+15) ^ *(roundkeys+15);
     676:	c8 01       	movw	r24, r16
     678:	0f 96       	adiw	r24, 0x0f	; 15
     67a:	fc 01       	movw	r30, r24
     67c:	20 81       	ld	r18, Z
     67e:	c7 01       	movw	r24, r14
     680:	0f 96       	adiw	r24, 0x0f	; 15
     682:	fc 01       	movw	r30, r24
     684:	80 81       	ld	r24, Z
     686:	82 27       	eor	r24, r18
     688:	8c ab       	std	Y+52, r24	; 0x34
            plaintext[i+2] ^= t ^ u;
            plaintext[i+3] ^= t ^ v;
        }
		*/
		//i=0;
		t = tmp[0] ^ tmp[1] ^ tmp[2] ^ tmp[3];
     68a:	9d a1       	ldd	r25, Y+37	; 0x25
     68c:	8e a1       	ldd	r24, Y+38	; 0x26
     68e:	98 27       	eor	r25, r24
     690:	8f a1       	ldd	r24, Y+39	; 0x27
     692:	98 27       	eor	r25, r24
     694:	88 a5       	ldd	r24, Y+40	; 0x28
     696:	d9 2e       	mov	r13, r25
     698:	d8 26       	eor	r13, r24
		plaintext[0]   = t ^ tmp[0]   ^ mul2(tmp[0]   ^ tmp[1]);
     69a:	8d a1       	ldd	r24, Y+37	; 0x25
     69c:	28 2f       	mov	r18, r24
     69e:	2d 25       	eor	r18, r13
     6a0:	9d a1       	ldd	r25, Y+37	; 0x25
     6a2:	8e a1       	ldd	r24, Y+38	; 0x26
     6a4:	89 27       	eor	r24, r25
     6a6:	89 83       	std	Y+1, r24	; 0x01
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	88 23       	and	r24, r24
     6ac:	4c f4       	brge	.+18     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	88 2f       	mov	r24, r24
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	88 0f       	add	r24, r24
     6b6:	99 1f       	adc	r25, r25
     6b8:	98 2f       	mov	r25, r24
     6ba:	8b e1       	ldi	r24, 0x1B	; 27
     6bc:	89 27       	eor	r24, r25
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	88 0f       	add	r24, r24
            plaintext[i+3] ^= t ^ v;
        }
		*/
		//i=0;
		t = tmp[0] ^ tmp[1] ^ tmp[2] ^ tmp[3];
		plaintext[0]   = t ^ tmp[0]   ^ mul2(tmp[0]   ^ tmp[1]);
     6c4:	82 27       	eor	r24, r18
     6c6:	f8 01       	movw	r30, r16
     6c8:	80 83       	st	Z, r24
		plaintext[1] = t ^ tmp[1] ^ mul2(tmp[1] ^ tmp[2]);
     6ca:	c8 01       	movw	r24, r16
     6cc:	01 96       	adiw	r24, 0x01	; 1
     6ce:	2e a1       	ldd	r18, Y+38	; 0x26
     6d0:	42 2f       	mov	r20, r18
     6d2:	4d 25       	eor	r20, r13
     6d4:	3e a1       	ldd	r19, Y+38	; 0x26
     6d6:	2f a1       	ldd	r18, Y+39	; 0x27
     6d8:	23 27       	eor	r18, r19
     6da:	2a 83       	std	Y+2, r18	; 0x02
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     6dc:	2a 81       	ldd	r18, Y+2	; 0x02
     6de:	22 23       	and	r18, r18
     6e0:	4c f4       	brge	.+18     	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
     6e2:	2a 81       	ldd	r18, Y+2	; 0x02
     6e4:	22 2f       	mov	r18, r18
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	22 0f       	add	r18, r18
     6ea:	33 1f       	adc	r19, r19
     6ec:	32 2f       	mov	r19, r18
     6ee:	2b e1       	ldi	r18, 0x1B	; 27
     6f0:	23 27       	eor	r18, r19
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     6f4:	2a 81       	ldd	r18, Y+2	; 0x02
     6f6:	22 0f       	add	r18, r18
        }
		*/
		//i=0;
		t = tmp[0] ^ tmp[1] ^ tmp[2] ^ tmp[3];
		plaintext[0]   = t ^ tmp[0]   ^ mul2(tmp[0]   ^ tmp[1]);
		plaintext[1] = t ^ tmp[1] ^ mul2(tmp[1] ^ tmp[2]);
     6f8:	24 27       	eor	r18, r20
     6fa:	fc 01       	movw	r30, r24
     6fc:	20 83       	st	Z, r18
		plaintext[2] = t ^ tmp[2] ^ mul2(tmp[2] ^ tmp[3]);
     6fe:	c8 01       	movw	r24, r16
     700:	02 96       	adiw	r24, 0x02	; 2
     702:	2f a1       	ldd	r18, Y+39	; 0x27
     704:	42 2f       	mov	r20, r18
     706:	4d 25       	eor	r20, r13
     708:	3f a1       	ldd	r19, Y+39	; 0x27
     70a:	28 a5       	ldd	r18, Y+40	; 0x28
     70c:	23 27       	eor	r18, r19
     70e:	2b 83       	std	Y+3, r18	; 0x03
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     710:	2b 81       	ldd	r18, Y+3	; 0x03
     712:	22 23       	and	r18, r18
     714:	4c f4       	brge	.+18     	; 0x728 <__LOCK_REGION_LENGTH__+0x328>
     716:	2b 81       	ldd	r18, Y+3	; 0x03
     718:	22 2f       	mov	r18, r18
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	22 0f       	add	r18, r18
     71e:	33 1f       	adc	r19, r19
     720:	32 2f       	mov	r19, r18
     722:	2b e1       	ldi	r18, 0x1B	; 27
     724:	23 27       	eor	r18, r19
     726:	02 c0       	rjmp	.+4      	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
     728:	2b 81       	ldd	r18, Y+3	; 0x03
     72a:	22 0f       	add	r18, r18
		*/
		//i=0;
		t = tmp[0] ^ tmp[1] ^ tmp[2] ^ tmp[3];
		plaintext[0]   = t ^ tmp[0]   ^ mul2(tmp[0]   ^ tmp[1]);
		plaintext[1] = t ^ tmp[1] ^ mul2(tmp[1] ^ tmp[2]);
		plaintext[2] = t ^ tmp[2] ^ mul2(tmp[2] ^ tmp[3]);
     72c:	24 27       	eor	r18, r20
     72e:	fc 01       	movw	r30, r24
     730:	20 83       	st	Z, r18
		plaintext[3] = t ^ tmp[3] ^ mul2(tmp[3] ^ tmp[0]);
     732:	c8 01       	movw	r24, r16
     734:	03 96       	adiw	r24, 0x03	; 3
     736:	28 a5       	ldd	r18, Y+40	; 0x28
     738:	42 2f       	mov	r20, r18
     73a:	4d 25       	eor	r20, r13
     73c:	38 a5       	ldd	r19, Y+40	; 0x28
     73e:	2d a1       	ldd	r18, Y+37	; 0x25
     740:	23 27       	eor	r18, r19
     742:	2c 83       	std	Y+4, r18	; 0x04
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     744:	2c 81       	ldd	r18, Y+4	; 0x04
     746:	22 23       	and	r18, r18
     748:	4c f4       	brge	.+18     	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
     74a:	2c 81       	ldd	r18, Y+4	; 0x04
     74c:	22 2f       	mov	r18, r18
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	22 0f       	add	r18, r18
     752:	33 1f       	adc	r19, r19
     754:	32 2f       	mov	r19, r18
     756:	2b e1       	ldi	r18, 0x1B	; 27
     758:	23 27       	eor	r18, r19
     75a:	02 c0       	rjmp	.+4      	; 0x760 <__LOCK_REGION_LENGTH__+0x360>
     75c:	2c 81       	ldd	r18, Y+4	; 0x04
     75e:	22 0f       	add	r18, r18
		//i=0;
		t = tmp[0] ^ tmp[1] ^ tmp[2] ^ tmp[3];
		plaintext[0]   = t ^ tmp[0]   ^ mul2(tmp[0]   ^ tmp[1]);
		plaintext[1] = t ^ tmp[1] ^ mul2(tmp[1] ^ tmp[2]);
		plaintext[2] = t ^ tmp[2] ^ mul2(tmp[2] ^ tmp[3]);
		plaintext[3] = t ^ tmp[3] ^ mul2(tmp[3] ^ tmp[0]);
     760:	24 27       	eor	r18, r20
     762:	fc 01       	movw	r30, r24
     764:	20 83       	st	Z, r18
		u = mul2(mul2(tmp[0]   ^ tmp[2]));
     766:	9d a1       	ldd	r25, Y+37	; 0x25
     768:	8f a1       	ldd	r24, Y+39	; 0x27
     76a:	89 27       	eor	r24, r25
     76c:	8d 83       	std	Y+5, r24	; 0x05
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     76e:	8d 81       	ldd	r24, Y+5	; 0x05
     770:	88 23       	and	r24, r24
     772:	4c f4       	brge	.+18     	; 0x786 <__LOCK_REGION_LENGTH__+0x386>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	88 2f       	mov	r24, r24
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	88 0f       	add	r24, r24
     77c:	99 1f       	adc	r25, r25
     77e:	98 2f       	mov	r25, r24
     780:	8b e1       	ldi	r24, 0x1B	; 27
     782:	89 27       	eor	r24, r25
     784:	02 c0       	rjmp	.+4      	; 0x78a <__LOCK_REGION_LENGTH__+0x38a>
     786:	8d 81       	ldd	r24, Y+5	; 0x05
     788:	88 0f       	add	r24, r24
     78a:	8e 83       	std	Y+6, r24	; 0x06
     78c:	8e 81       	ldd	r24, Y+6	; 0x06
     78e:	88 23       	and	r24, r24
     790:	4c f4       	brge	.+18     	; 0x7a4 <__LOCK_REGION_LENGTH__+0x3a4>
     792:	8e 81       	ldd	r24, Y+6	; 0x06
     794:	88 2f       	mov	r24, r24
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	88 0f       	add	r24, r24
     79a:	99 1f       	adc	r25, r25
     79c:	98 2f       	mov	r25, r24
     79e:	8b e1       	ldi	r24, 0x1B	; 27
     7a0:	89 27       	eor	r24, r25
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <__LOCK_REGION_LENGTH__+0x3a8>
     7a4:	8e 81       	ldd	r24, Y+6	; 0x06
     7a6:	88 0f       	add	r24, r24
		t = tmp[0] ^ tmp[1] ^ tmp[2] ^ tmp[3];
		plaintext[0]   = t ^ tmp[0]   ^ mul2(tmp[0]   ^ tmp[1]);
		plaintext[1] = t ^ tmp[1] ^ mul2(tmp[1] ^ tmp[2]);
		plaintext[2] = t ^ tmp[2] ^ mul2(tmp[2] ^ tmp[3]);
		plaintext[3] = t ^ tmp[3] ^ mul2(tmp[3] ^ tmp[0]);
		u = mul2(mul2(tmp[0]   ^ tmp[2]));
     7a8:	b8 2e       	mov	r11, r24
		v = mul2(mul2(tmp[1] ^ tmp[3]));
     7aa:	9e a1       	ldd	r25, Y+38	; 0x26
     7ac:	88 a5       	ldd	r24, Y+40	; 0x28
     7ae:	89 27       	eor	r24, r25
     7b0:	8f 83       	std	Y+7, r24	; 0x07
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     7b2:	8f 81       	ldd	r24, Y+7	; 0x07
     7b4:	88 23       	and	r24, r24
     7b6:	4c f4       	brge	.+18     	; 0x7ca <__LOCK_REGION_LENGTH__+0x3ca>
     7b8:	8f 81       	ldd	r24, Y+7	; 0x07
     7ba:	88 2f       	mov	r24, r24
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	88 0f       	add	r24, r24
     7c0:	99 1f       	adc	r25, r25
     7c2:	98 2f       	mov	r25, r24
     7c4:	8b e1       	ldi	r24, 0x1B	; 27
     7c6:	89 27       	eor	r24, r25
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <__LOCK_REGION_LENGTH__+0x3ce>
     7ca:	8f 81       	ldd	r24, Y+7	; 0x07
     7cc:	88 0f       	add	r24, r24
     7ce:	88 87       	std	Y+8, r24	; 0x08
     7d0:	88 85       	ldd	r24, Y+8	; 0x08
     7d2:	88 23       	and	r24, r24
     7d4:	4c f4       	brge	.+18     	; 0x7e8 <__LOCK_REGION_LENGTH__+0x3e8>
     7d6:	88 85       	ldd	r24, Y+8	; 0x08
     7d8:	88 2f       	mov	r24, r24
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	88 0f       	add	r24, r24
     7de:	99 1f       	adc	r25, r25
     7e0:	98 2f       	mov	r25, r24
     7e2:	8b e1       	ldi	r24, 0x1B	; 27
     7e4:	89 27       	eor	r24, r25
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <__LOCK_REGION_LENGTH__+0x3ec>
     7e8:	88 85       	ldd	r24, Y+8	; 0x08
     7ea:	88 0f       	add	r24, r24
		plaintext[0]   = t ^ tmp[0]   ^ mul2(tmp[0]   ^ tmp[1]);
		plaintext[1] = t ^ tmp[1] ^ mul2(tmp[1] ^ tmp[2]);
		plaintext[2] = t ^ tmp[2] ^ mul2(tmp[2] ^ tmp[3]);
		plaintext[3] = t ^ tmp[3] ^ mul2(tmp[3] ^ tmp[0]);
		u = mul2(mul2(tmp[0]   ^ tmp[2]));
		v = mul2(mul2(tmp[1] ^ tmp[3]));
     7ec:	c8 2e       	mov	r12, r24
		t = mul2(u ^ v);
     7ee:	8b 2d       	mov	r24, r11
     7f0:	8c 25       	eor	r24, r12
     7f2:	89 87       	std	Y+9, r24	; 0x09
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     7f4:	89 85       	ldd	r24, Y+9	; 0x09
     7f6:	88 23       	and	r24, r24
     7f8:	4c f4       	brge	.+18     	; 0x80c <__LOCK_REGION_LENGTH__+0x40c>
     7fa:	89 85       	ldd	r24, Y+9	; 0x09
     7fc:	88 2f       	mov	r24, r24
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	88 0f       	add	r24, r24
     802:	99 1f       	adc	r25, r25
     804:	98 2f       	mov	r25, r24
     806:	8b e1       	ldi	r24, 0x1B	; 27
     808:	89 27       	eor	r24, r25
     80a:	02 c0       	rjmp	.+4      	; 0x810 <__LOCK_REGION_LENGTH__+0x410>
     80c:	89 85       	ldd	r24, Y+9	; 0x09
     80e:	88 0f       	add	r24, r24
		plaintext[1] = t ^ tmp[1] ^ mul2(tmp[1] ^ tmp[2]);
		plaintext[2] = t ^ tmp[2] ^ mul2(tmp[2] ^ tmp[3]);
		plaintext[3] = t ^ tmp[3] ^ mul2(tmp[3] ^ tmp[0]);
		u = mul2(mul2(tmp[0]   ^ tmp[2]));
		v = mul2(mul2(tmp[1] ^ tmp[3]));
		t = mul2(u ^ v);
     810:	d8 2e       	mov	r13, r24
		plaintext[0]   ^= t ^ u;
     812:	f8 01       	movw	r30, r16
     814:	90 81       	ld	r25, Z
     816:	8d 2d       	mov	r24, r13
     818:	8b 25       	eor	r24, r11
     81a:	89 27       	eor	r24, r25
     81c:	f8 01       	movw	r30, r16
     81e:	80 83       	st	Z, r24
		plaintext[1] ^= t ^ v;
     820:	c8 01       	movw	r24, r16
     822:	01 96       	adiw	r24, 0x01	; 1
     824:	98 01       	movw	r18, r16
     826:	2f 5f       	subi	r18, 0xFF	; 255
     828:	3f 4f       	sbci	r19, 0xFF	; 255
     82a:	f9 01       	movw	r30, r18
     82c:	30 81       	ld	r19, Z
     82e:	2d 2d       	mov	r18, r13
     830:	2c 25       	eor	r18, r12
     832:	23 27       	eor	r18, r19
     834:	fc 01       	movw	r30, r24
     836:	20 83       	st	Z, r18
		plaintext[2] ^= t ^ u;
     838:	c8 01       	movw	r24, r16
     83a:	02 96       	adiw	r24, 0x02	; 2
     83c:	98 01       	movw	r18, r16
     83e:	2e 5f       	subi	r18, 0xFE	; 254
     840:	3f 4f       	sbci	r19, 0xFF	; 255
     842:	f9 01       	movw	r30, r18
     844:	30 81       	ld	r19, Z
     846:	2d 2d       	mov	r18, r13
     848:	2b 25       	eor	r18, r11
     84a:	23 27       	eor	r18, r19
     84c:	fc 01       	movw	r30, r24
     84e:	20 83       	st	Z, r18
		plaintext[3] ^= t ^ v;
     850:	c8 01       	movw	r24, r16
     852:	03 96       	adiw	r24, 0x03	; 3
     854:	98 01       	movw	r18, r16
     856:	2d 5f       	subi	r18, 0xFD	; 253
     858:	3f 4f       	sbci	r19, 0xFF	; 255
     85a:	f9 01       	movw	r30, r18
     85c:	30 81       	ld	r19, Z
     85e:	2d 2d       	mov	r18, r13
     860:	2c 25       	eor	r18, r12
     862:	23 27       	eor	r18, r19
     864:	fc 01       	movw	r30, r24
     866:	20 83       	st	Z, r18
		
		//i+=4;
		t = tmp[4] ^ tmp[5] ^ tmp[6] ^ tmp[7];
     868:	99 a5       	ldd	r25, Y+41	; 0x29
     86a:	8a a5       	ldd	r24, Y+42	; 0x2a
     86c:	98 27       	eor	r25, r24
     86e:	8b a5       	ldd	r24, Y+43	; 0x2b
     870:	98 27       	eor	r25, r24
     872:	8c a5       	ldd	r24, Y+44	; 0x2c
     874:	d9 2e       	mov	r13, r25
     876:	d8 26       	eor	r13, r24
		plaintext[4]   = t ^ tmp[4]   ^ mul2(tmp[4]   ^ tmp[5]);
     878:	c8 01       	movw	r24, r16
     87a:	04 96       	adiw	r24, 0x04	; 4
     87c:	29 a5       	ldd	r18, Y+41	; 0x29
     87e:	42 2f       	mov	r20, r18
     880:	4d 25       	eor	r20, r13
     882:	39 a5       	ldd	r19, Y+41	; 0x29
     884:	2a a5       	ldd	r18, Y+42	; 0x2a
     886:	23 27       	eor	r18, r19
     888:	2a 87       	std	Y+10, r18	; 0x0a
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     88a:	2a 85       	ldd	r18, Y+10	; 0x0a
     88c:	22 23       	and	r18, r18
     88e:	4c f4       	brge	.+18     	; 0x8a2 <__LOCK_REGION_LENGTH__+0x4a2>
     890:	2a 85       	ldd	r18, Y+10	; 0x0a
     892:	22 2f       	mov	r18, r18
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	22 0f       	add	r18, r18
     898:	33 1f       	adc	r19, r19
     89a:	32 2f       	mov	r19, r18
     89c:	2b e1       	ldi	r18, 0x1B	; 27
     89e:	23 27       	eor	r18, r19
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <__LOCK_REGION_LENGTH__+0x4a6>
     8a2:	2a 85       	ldd	r18, Y+10	; 0x0a
     8a4:	22 0f       	add	r18, r18
		plaintext[2] ^= t ^ u;
		plaintext[3] ^= t ^ v;
		
		//i+=4;
		t = tmp[4] ^ tmp[5] ^ tmp[6] ^ tmp[7];
		plaintext[4]   = t ^ tmp[4]   ^ mul2(tmp[4]   ^ tmp[5]);
     8a6:	24 27       	eor	r18, r20
     8a8:	fc 01       	movw	r30, r24
     8aa:	20 83       	st	Z, r18
		plaintext[5] = t ^ tmp[5] ^ mul2(tmp[5] ^ tmp[6]);
     8ac:	c8 01       	movw	r24, r16
     8ae:	05 96       	adiw	r24, 0x05	; 5
     8b0:	2a a5       	ldd	r18, Y+42	; 0x2a
     8b2:	42 2f       	mov	r20, r18
     8b4:	4d 25       	eor	r20, r13
     8b6:	3a a5       	ldd	r19, Y+42	; 0x2a
     8b8:	2b a5       	ldd	r18, Y+43	; 0x2b
     8ba:	23 27       	eor	r18, r19
     8bc:	2b 87       	std	Y+11, r18	; 0x0b
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     8be:	2b 85       	ldd	r18, Y+11	; 0x0b
     8c0:	22 23       	and	r18, r18
     8c2:	4c f4       	brge	.+18     	; 0x8d6 <__LOCK_REGION_LENGTH__+0x4d6>
     8c4:	2b 85       	ldd	r18, Y+11	; 0x0b
     8c6:	22 2f       	mov	r18, r18
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	22 0f       	add	r18, r18
     8cc:	33 1f       	adc	r19, r19
     8ce:	32 2f       	mov	r19, r18
     8d0:	2b e1       	ldi	r18, 0x1B	; 27
     8d2:	23 27       	eor	r18, r19
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <__LOCK_REGION_LENGTH__+0x4da>
     8d6:	2b 85       	ldd	r18, Y+11	; 0x0b
     8d8:	22 0f       	add	r18, r18
		plaintext[3] ^= t ^ v;
		
		//i+=4;
		t = tmp[4] ^ tmp[5] ^ tmp[6] ^ tmp[7];
		plaintext[4]   = t ^ tmp[4]   ^ mul2(tmp[4]   ^ tmp[5]);
		plaintext[5] = t ^ tmp[5] ^ mul2(tmp[5] ^ tmp[6]);
     8da:	24 27       	eor	r18, r20
     8dc:	fc 01       	movw	r30, r24
     8de:	20 83       	st	Z, r18
		plaintext[6] = t ^ tmp[6] ^ mul2(tmp[6] ^ tmp[7]);
     8e0:	c8 01       	movw	r24, r16
     8e2:	06 96       	adiw	r24, 0x06	; 6
     8e4:	2b a5       	ldd	r18, Y+43	; 0x2b
     8e6:	42 2f       	mov	r20, r18
     8e8:	4d 25       	eor	r20, r13
     8ea:	3b a5       	ldd	r19, Y+43	; 0x2b
     8ec:	2c a5       	ldd	r18, Y+44	; 0x2c
     8ee:	23 27       	eor	r18, r19
     8f0:	2c 87       	std	Y+12, r18	; 0x0c
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     8f2:	2c 85       	ldd	r18, Y+12	; 0x0c
     8f4:	22 23       	and	r18, r18
     8f6:	4c f4       	brge	.+18     	; 0x90a <__stack+0xb>
     8f8:	2c 85       	ldd	r18, Y+12	; 0x0c
     8fa:	22 2f       	mov	r18, r18
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	22 0f       	add	r18, r18
     900:	33 1f       	adc	r19, r19
     902:	32 2f       	mov	r19, r18
     904:	2b e1       	ldi	r18, 0x1B	; 27
     906:	23 27       	eor	r18, r19
     908:	02 c0       	rjmp	.+4      	; 0x90e <__stack+0xf>
     90a:	2c 85       	ldd	r18, Y+12	; 0x0c
     90c:	22 0f       	add	r18, r18
		
		//i+=4;
		t = tmp[4] ^ tmp[5] ^ tmp[6] ^ tmp[7];
		plaintext[4]   = t ^ tmp[4]   ^ mul2(tmp[4]   ^ tmp[5]);
		plaintext[5] = t ^ tmp[5] ^ mul2(tmp[5] ^ tmp[6]);
		plaintext[6] = t ^ tmp[6] ^ mul2(tmp[6] ^ tmp[7]);
     90e:	24 27       	eor	r18, r20
     910:	fc 01       	movw	r30, r24
     912:	20 83       	st	Z, r18
		plaintext[7] = t ^ tmp[7] ^ mul2(tmp[7] ^ tmp[4]);
     914:	c8 01       	movw	r24, r16
     916:	07 96       	adiw	r24, 0x07	; 7
     918:	2c a5       	ldd	r18, Y+44	; 0x2c
     91a:	42 2f       	mov	r20, r18
     91c:	4d 25       	eor	r20, r13
     91e:	3c a5       	ldd	r19, Y+44	; 0x2c
     920:	29 a5       	ldd	r18, Y+41	; 0x29
     922:	23 27       	eor	r18, r19
     924:	2d 87       	std	Y+13, r18	; 0x0d
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     926:	2d 85       	ldd	r18, Y+13	; 0x0d
     928:	22 23       	and	r18, r18
     92a:	4c f4       	brge	.+18     	; 0x93e <__stack+0x3f>
     92c:	2d 85       	ldd	r18, Y+13	; 0x0d
     92e:	22 2f       	mov	r18, r18
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	22 0f       	add	r18, r18
     934:	33 1f       	adc	r19, r19
     936:	32 2f       	mov	r19, r18
     938:	2b e1       	ldi	r18, 0x1B	; 27
     93a:	23 27       	eor	r18, r19
     93c:	02 c0       	rjmp	.+4      	; 0x942 <__stack+0x43>
     93e:	2d 85       	ldd	r18, Y+13	; 0x0d
     940:	22 0f       	add	r18, r18
		//i+=4;
		t = tmp[4] ^ tmp[5] ^ tmp[6] ^ tmp[7];
		plaintext[4]   = t ^ tmp[4]   ^ mul2(tmp[4]   ^ tmp[5]);
		plaintext[5] = t ^ tmp[5] ^ mul2(tmp[5] ^ tmp[6]);
		plaintext[6] = t ^ tmp[6] ^ mul2(tmp[6] ^ tmp[7]);
		plaintext[7] = t ^ tmp[7] ^ mul2(tmp[7] ^ tmp[4]);
     942:	24 27       	eor	r18, r20
     944:	fc 01       	movw	r30, r24
     946:	20 83       	st	Z, r18
		u = mul2(mul2(tmp[4]   ^ tmp[6]));
     948:	99 a5       	ldd	r25, Y+41	; 0x29
     94a:	8b a5       	ldd	r24, Y+43	; 0x2b
     94c:	89 27       	eor	r24, r25
     94e:	8e 87       	std	Y+14, r24	; 0x0e
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     950:	8e 85       	ldd	r24, Y+14	; 0x0e
     952:	88 23       	and	r24, r24
     954:	4c f4       	brge	.+18     	; 0x968 <__stack+0x69>
     956:	8e 85       	ldd	r24, Y+14	; 0x0e
     958:	88 2f       	mov	r24, r24
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	88 0f       	add	r24, r24
     95e:	99 1f       	adc	r25, r25
     960:	98 2f       	mov	r25, r24
     962:	8b e1       	ldi	r24, 0x1B	; 27
     964:	89 27       	eor	r24, r25
     966:	02 c0       	rjmp	.+4      	; 0x96c <__stack+0x6d>
     968:	8e 85       	ldd	r24, Y+14	; 0x0e
     96a:	88 0f       	add	r24, r24
     96c:	8f 87       	std	Y+15, r24	; 0x0f
     96e:	8f 85       	ldd	r24, Y+15	; 0x0f
     970:	88 23       	and	r24, r24
     972:	4c f4       	brge	.+18     	; 0x986 <__stack+0x87>
     974:	8f 85       	ldd	r24, Y+15	; 0x0f
     976:	88 2f       	mov	r24, r24
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	88 0f       	add	r24, r24
     97c:	99 1f       	adc	r25, r25
     97e:	98 2f       	mov	r25, r24
     980:	8b e1       	ldi	r24, 0x1B	; 27
     982:	89 27       	eor	r24, r25
     984:	02 c0       	rjmp	.+4      	; 0x98a <__stack+0x8b>
     986:	8f 85       	ldd	r24, Y+15	; 0x0f
     988:	88 0f       	add	r24, r24
		t = tmp[4] ^ tmp[5] ^ tmp[6] ^ tmp[7];
		plaintext[4]   = t ^ tmp[4]   ^ mul2(tmp[4]   ^ tmp[5]);
		plaintext[5] = t ^ tmp[5] ^ mul2(tmp[5] ^ tmp[6]);
		plaintext[6] = t ^ tmp[6] ^ mul2(tmp[6] ^ tmp[7]);
		plaintext[7] = t ^ tmp[7] ^ mul2(tmp[7] ^ tmp[4]);
		u = mul2(mul2(tmp[4]   ^ tmp[6]));
     98a:	b8 2e       	mov	r11, r24
		v = mul2(mul2(tmp[5] ^ tmp[7]));
     98c:	9a a5       	ldd	r25, Y+42	; 0x2a
     98e:	8c a5       	ldd	r24, Y+44	; 0x2c
     990:	89 27       	eor	r24, r25
     992:	88 8b       	std	Y+16, r24	; 0x10
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     994:	88 89       	ldd	r24, Y+16	; 0x10
     996:	88 23       	and	r24, r24
     998:	4c f4       	brge	.+18     	; 0x9ac <__stack+0xad>
     99a:	88 89       	ldd	r24, Y+16	; 0x10
     99c:	88 2f       	mov	r24, r24
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	88 0f       	add	r24, r24
     9a2:	99 1f       	adc	r25, r25
     9a4:	98 2f       	mov	r25, r24
     9a6:	8b e1       	ldi	r24, 0x1B	; 27
     9a8:	89 27       	eor	r24, r25
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <__stack+0xb1>
     9ac:	88 89       	ldd	r24, Y+16	; 0x10
     9ae:	88 0f       	add	r24, r24
     9b0:	89 8b       	std	Y+17, r24	; 0x11
     9b2:	89 89       	ldd	r24, Y+17	; 0x11
     9b4:	88 23       	and	r24, r24
     9b6:	4c f4       	brge	.+18     	; 0x9ca <__stack+0xcb>
     9b8:	89 89       	ldd	r24, Y+17	; 0x11
     9ba:	88 2f       	mov	r24, r24
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	88 0f       	add	r24, r24
     9c0:	99 1f       	adc	r25, r25
     9c2:	98 2f       	mov	r25, r24
     9c4:	8b e1       	ldi	r24, 0x1B	; 27
     9c6:	89 27       	eor	r24, r25
     9c8:	02 c0       	rjmp	.+4      	; 0x9ce <__stack+0xcf>
     9ca:	89 89       	ldd	r24, Y+17	; 0x11
     9cc:	88 0f       	add	r24, r24
		plaintext[4]   = t ^ tmp[4]   ^ mul2(tmp[4]   ^ tmp[5]);
		plaintext[5] = t ^ tmp[5] ^ mul2(tmp[5] ^ tmp[6]);
		plaintext[6] = t ^ tmp[6] ^ mul2(tmp[6] ^ tmp[7]);
		plaintext[7] = t ^ tmp[7] ^ mul2(tmp[7] ^ tmp[4]);
		u = mul2(mul2(tmp[4]   ^ tmp[6]));
		v = mul2(mul2(tmp[5] ^ tmp[7]));
     9ce:	c8 2e       	mov	r12, r24
		t = mul2(u ^ v);
     9d0:	8b 2d       	mov	r24, r11
     9d2:	8c 25       	eor	r24, r12
     9d4:	8a 8b       	std	Y+18, r24	; 0x12
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     9d6:	8a 89       	ldd	r24, Y+18	; 0x12
     9d8:	88 23       	and	r24, r24
     9da:	4c f4       	brge	.+18     	; 0x9ee <__stack+0xef>
     9dc:	8a 89       	ldd	r24, Y+18	; 0x12
     9de:	88 2f       	mov	r24, r24
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	88 0f       	add	r24, r24
     9e4:	99 1f       	adc	r25, r25
     9e6:	98 2f       	mov	r25, r24
     9e8:	8b e1       	ldi	r24, 0x1B	; 27
     9ea:	89 27       	eor	r24, r25
     9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <__stack+0xf3>
     9ee:	8a 89       	ldd	r24, Y+18	; 0x12
     9f0:	88 0f       	add	r24, r24
		plaintext[5] = t ^ tmp[5] ^ mul2(tmp[5] ^ tmp[6]);
		plaintext[6] = t ^ tmp[6] ^ mul2(tmp[6] ^ tmp[7]);
		plaintext[7] = t ^ tmp[7] ^ mul2(tmp[7] ^ tmp[4]);
		u = mul2(mul2(tmp[4]   ^ tmp[6]));
		v = mul2(mul2(tmp[5] ^ tmp[7]));
		t = mul2(u ^ v);
     9f2:	d8 2e       	mov	r13, r24
		plaintext[4]   ^= t ^ u;
     9f4:	c8 01       	movw	r24, r16
     9f6:	04 96       	adiw	r24, 0x04	; 4
     9f8:	98 01       	movw	r18, r16
     9fa:	2c 5f       	subi	r18, 0xFC	; 252
     9fc:	3f 4f       	sbci	r19, 0xFF	; 255
     9fe:	f9 01       	movw	r30, r18
     a00:	30 81       	ld	r19, Z
     a02:	2d 2d       	mov	r18, r13
     a04:	2b 25       	eor	r18, r11
     a06:	23 27       	eor	r18, r19
     a08:	fc 01       	movw	r30, r24
     a0a:	20 83       	st	Z, r18
		plaintext[5] ^= t ^ v;
     a0c:	c8 01       	movw	r24, r16
     a0e:	05 96       	adiw	r24, 0x05	; 5
     a10:	98 01       	movw	r18, r16
     a12:	2b 5f       	subi	r18, 0xFB	; 251
     a14:	3f 4f       	sbci	r19, 0xFF	; 255
     a16:	f9 01       	movw	r30, r18
     a18:	30 81       	ld	r19, Z
     a1a:	2d 2d       	mov	r18, r13
     a1c:	2c 25       	eor	r18, r12
     a1e:	23 27       	eor	r18, r19
     a20:	fc 01       	movw	r30, r24
     a22:	20 83       	st	Z, r18
		plaintext[6] ^= t ^ u;
     a24:	c8 01       	movw	r24, r16
     a26:	06 96       	adiw	r24, 0x06	; 6
     a28:	98 01       	movw	r18, r16
     a2a:	2a 5f       	subi	r18, 0xFA	; 250
     a2c:	3f 4f       	sbci	r19, 0xFF	; 255
     a2e:	f9 01       	movw	r30, r18
     a30:	30 81       	ld	r19, Z
     a32:	2d 2d       	mov	r18, r13
     a34:	2b 25       	eor	r18, r11
     a36:	23 27       	eor	r18, r19
     a38:	fc 01       	movw	r30, r24
     a3a:	20 83       	st	Z, r18
		plaintext[7] ^= t ^ v;
     a3c:	c8 01       	movw	r24, r16
     a3e:	07 96       	adiw	r24, 0x07	; 7
     a40:	98 01       	movw	r18, r16
     a42:	29 5f       	subi	r18, 0xF9	; 249
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	f9 01       	movw	r30, r18
     a48:	30 81       	ld	r19, Z
     a4a:	2d 2d       	mov	r18, r13
     a4c:	2c 25       	eor	r18, r12
     a4e:	23 27       	eor	r18, r19
     a50:	fc 01       	movw	r30, r24
     a52:	20 83       	st	Z, r18
		
		//i+=4;
		t = tmp[8] ^ tmp[9] ^ tmp[10] ^ tmp[11];
     a54:	9d a5       	ldd	r25, Y+45	; 0x2d
     a56:	8e a5       	ldd	r24, Y+46	; 0x2e
     a58:	98 27       	eor	r25, r24
     a5a:	8f a5       	ldd	r24, Y+47	; 0x2f
     a5c:	98 27       	eor	r25, r24
     a5e:	88 a9       	ldd	r24, Y+48	; 0x30
     a60:	d9 2e       	mov	r13, r25
     a62:	d8 26       	eor	r13, r24
		plaintext[8]   = t ^ tmp[8]   ^ mul2(tmp[8]   ^ tmp[9]);
     a64:	c8 01       	movw	r24, r16
     a66:	08 96       	adiw	r24, 0x08	; 8
     a68:	2d a5       	ldd	r18, Y+45	; 0x2d
     a6a:	42 2f       	mov	r20, r18
     a6c:	4d 25       	eor	r20, r13
     a6e:	3d a5       	ldd	r19, Y+45	; 0x2d
     a70:	2e a5       	ldd	r18, Y+46	; 0x2e
     a72:	23 27       	eor	r18, r19
     a74:	2b 8b       	std	Y+19, r18	; 0x13
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     a76:	2b 89       	ldd	r18, Y+19	; 0x13
     a78:	22 23       	and	r18, r18
     a7a:	4c f4       	brge	.+18     	; 0xa8e <__stack+0x18f>
     a7c:	2b 89       	ldd	r18, Y+19	; 0x13
     a7e:	22 2f       	mov	r18, r18
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	22 0f       	add	r18, r18
     a84:	33 1f       	adc	r19, r19
     a86:	32 2f       	mov	r19, r18
     a88:	2b e1       	ldi	r18, 0x1B	; 27
     a8a:	23 27       	eor	r18, r19
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <__stack+0x193>
     a8e:	2b 89       	ldd	r18, Y+19	; 0x13
     a90:	22 0f       	add	r18, r18
		plaintext[6] ^= t ^ u;
		plaintext[7] ^= t ^ v;
		
		//i+=4;
		t = tmp[8] ^ tmp[9] ^ tmp[10] ^ tmp[11];
		plaintext[8]   = t ^ tmp[8]   ^ mul2(tmp[8]   ^ tmp[9]);
     a92:	24 27       	eor	r18, r20
     a94:	fc 01       	movw	r30, r24
     a96:	20 83       	st	Z, r18
		plaintext[9] = t ^ tmp[9] ^ mul2(tmp[9] ^ tmp[10]);
     a98:	c8 01       	movw	r24, r16
     a9a:	09 96       	adiw	r24, 0x09	; 9
     a9c:	2e a5       	ldd	r18, Y+46	; 0x2e
     a9e:	42 2f       	mov	r20, r18
     aa0:	4d 25       	eor	r20, r13
     aa2:	3e a5       	ldd	r19, Y+46	; 0x2e
     aa4:	2f a5       	ldd	r18, Y+47	; 0x2f
     aa6:	23 27       	eor	r18, r19
     aa8:	2c 8b       	std	Y+20, r18	; 0x14
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     aaa:	2c 89       	ldd	r18, Y+20	; 0x14
     aac:	22 23       	and	r18, r18
     aae:	4c f4       	brge	.+18     	; 0xac2 <__stack+0x1c3>
     ab0:	2c 89       	ldd	r18, Y+20	; 0x14
     ab2:	22 2f       	mov	r18, r18
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	22 0f       	add	r18, r18
     ab8:	33 1f       	adc	r19, r19
     aba:	32 2f       	mov	r19, r18
     abc:	2b e1       	ldi	r18, 0x1B	; 27
     abe:	23 27       	eor	r18, r19
     ac0:	02 c0       	rjmp	.+4      	; 0xac6 <__stack+0x1c7>
     ac2:	2c 89       	ldd	r18, Y+20	; 0x14
     ac4:	22 0f       	add	r18, r18
		plaintext[7] ^= t ^ v;
		
		//i+=4;
		t = tmp[8] ^ tmp[9] ^ tmp[10] ^ tmp[11];
		plaintext[8]   = t ^ tmp[8]   ^ mul2(tmp[8]   ^ tmp[9]);
		plaintext[9] = t ^ tmp[9] ^ mul2(tmp[9] ^ tmp[10]);
     ac6:	24 27       	eor	r18, r20
     ac8:	fc 01       	movw	r30, r24
     aca:	20 83       	st	Z, r18
		plaintext[10] = t ^ tmp[10] ^ mul2(tmp[10] ^ tmp[11]);
     acc:	c8 01       	movw	r24, r16
     ace:	0a 96       	adiw	r24, 0x0a	; 10
     ad0:	2f a5       	ldd	r18, Y+47	; 0x2f
     ad2:	42 2f       	mov	r20, r18
     ad4:	4d 25       	eor	r20, r13
     ad6:	3f a5       	ldd	r19, Y+47	; 0x2f
     ad8:	28 a9       	ldd	r18, Y+48	; 0x30
     ada:	23 27       	eor	r18, r19
     adc:	2d 8b       	std	Y+21, r18	; 0x15
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     ade:	2d 89       	ldd	r18, Y+21	; 0x15
     ae0:	22 23       	and	r18, r18
     ae2:	4c f4       	brge	.+18     	; 0xaf6 <__stack+0x1f7>
     ae4:	2d 89       	ldd	r18, Y+21	; 0x15
     ae6:	22 2f       	mov	r18, r18
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	22 0f       	add	r18, r18
     aec:	33 1f       	adc	r19, r19
     aee:	32 2f       	mov	r19, r18
     af0:	2b e1       	ldi	r18, 0x1B	; 27
     af2:	23 27       	eor	r18, r19
     af4:	02 c0       	rjmp	.+4      	; 0xafa <__stack+0x1fb>
     af6:	2d 89       	ldd	r18, Y+21	; 0x15
     af8:	22 0f       	add	r18, r18
		
		//i+=4;
		t = tmp[8] ^ tmp[9] ^ tmp[10] ^ tmp[11];
		plaintext[8]   = t ^ tmp[8]   ^ mul2(tmp[8]   ^ tmp[9]);
		plaintext[9] = t ^ tmp[9] ^ mul2(tmp[9] ^ tmp[10]);
		plaintext[10] = t ^ tmp[10] ^ mul2(tmp[10] ^ tmp[11]);
     afa:	24 27       	eor	r18, r20
     afc:	fc 01       	movw	r30, r24
     afe:	20 83       	st	Z, r18
		plaintext[11] = t ^ tmp[11] ^ mul2(tmp[11] ^ tmp[8]);
     b00:	c8 01       	movw	r24, r16
     b02:	0b 96       	adiw	r24, 0x0b	; 11
     b04:	28 a9       	ldd	r18, Y+48	; 0x30
     b06:	42 2f       	mov	r20, r18
     b08:	4d 25       	eor	r20, r13
     b0a:	38 a9       	ldd	r19, Y+48	; 0x30
     b0c:	2d a5       	ldd	r18, Y+45	; 0x2d
     b0e:	23 27       	eor	r18, r19
     b10:	2e 8b       	std	Y+22, r18	; 0x16
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     b12:	2e 89       	ldd	r18, Y+22	; 0x16
     b14:	22 23       	and	r18, r18
     b16:	4c f4       	brge	.+18     	; 0xb2a <__stack+0x22b>
     b18:	2e 89       	ldd	r18, Y+22	; 0x16
     b1a:	22 2f       	mov	r18, r18
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	22 0f       	add	r18, r18
     b20:	33 1f       	adc	r19, r19
     b22:	32 2f       	mov	r19, r18
     b24:	2b e1       	ldi	r18, 0x1B	; 27
     b26:	23 27       	eor	r18, r19
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <__stack+0x22f>
     b2a:	2e 89       	ldd	r18, Y+22	; 0x16
     b2c:	22 0f       	add	r18, r18
		//i+=4;
		t = tmp[8] ^ tmp[9] ^ tmp[10] ^ tmp[11];
		plaintext[8]   = t ^ tmp[8]   ^ mul2(tmp[8]   ^ tmp[9]);
		plaintext[9] = t ^ tmp[9] ^ mul2(tmp[9] ^ tmp[10]);
		plaintext[10] = t ^ tmp[10] ^ mul2(tmp[10] ^ tmp[11]);
		plaintext[11] = t ^ tmp[11] ^ mul2(tmp[11] ^ tmp[8]);
     b2e:	24 27       	eor	r18, r20
     b30:	fc 01       	movw	r30, r24
     b32:	20 83       	st	Z, r18
		u = mul2(mul2(tmp[8]   ^ tmp[10]));
     b34:	9d a5       	ldd	r25, Y+45	; 0x2d
     b36:	8f a5       	ldd	r24, Y+47	; 0x2f
     b38:	89 27       	eor	r24, r25
     b3a:	8f 8b       	std	Y+23, r24	; 0x17
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     b3c:	8f 89       	ldd	r24, Y+23	; 0x17
     b3e:	88 23       	and	r24, r24
     b40:	4c f4       	brge	.+18     	; 0xb54 <__stack+0x255>
     b42:	8f 89       	ldd	r24, Y+23	; 0x17
     b44:	88 2f       	mov	r24, r24
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	98 2f       	mov	r25, r24
     b4e:	8b e1       	ldi	r24, 0x1B	; 27
     b50:	89 27       	eor	r24, r25
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <__stack+0x259>
     b54:	8f 89       	ldd	r24, Y+23	; 0x17
     b56:	88 0f       	add	r24, r24
     b58:	88 8f       	std	Y+24, r24	; 0x18
     b5a:	88 8d       	ldd	r24, Y+24	; 0x18
     b5c:	88 23       	and	r24, r24
     b5e:	4c f4       	brge	.+18     	; 0xb72 <__stack+0x273>
     b60:	88 8d       	ldd	r24, Y+24	; 0x18
     b62:	88 2f       	mov	r24, r24
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	98 2f       	mov	r25, r24
     b6c:	8b e1       	ldi	r24, 0x1B	; 27
     b6e:	89 27       	eor	r24, r25
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <__stack+0x277>
     b72:	88 8d       	ldd	r24, Y+24	; 0x18
     b74:	88 0f       	add	r24, r24
		t = tmp[8] ^ tmp[9] ^ tmp[10] ^ tmp[11];
		plaintext[8]   = t ^ tmp[8]   ^ mul2(tmp[8]   ^ tmp[9]);
		plaintext[9] = t ^ tmp[9] ^ mul2(tmp[9] ^ tmp[10]);
		plaintext[10] = t ^ tmp[10] ^ mul2(tmp[10] ^ tmp[11]);
		plaintext[11] = t ^ tmp[11] ^ mul2(tmp[11] ^ tmp[8]);
		u = mul2(mul2(tmp[8]   ^ tmp[10]));
     b76:	b8 2e       	mov	r11, r24
		v = mul2(mul2(tmp[9] ^ tmp[11]));
     b78:	9e a5       	ldd	r25, Y+46	; 0x2e
     b7a:	88 a9       	ldd	r24, Y+48	; 0x30
     b7c:	89 27       	eor	r24, r25
     b7e:	89 8f       	std	Y+25, r24	; 0x19
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     b80:	89 8d       	ldd	r24, Y+25	; 0x19
     b82:	88 23       	and	r24, r24
     b84:	4c f4       	brge	.+18     	; 0xb98 <__stack+0x299>
     b86:	89 8d       	ldd	r24, Y+25	; 0x19
     b88:	88 2f       	mov	r24, r24
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	88 0f       	add	r24, r24
     b8e:	99 1f       	adc	r25, r25
     b90:	98 2f       	mov	r25, r24
     b92:	8b e1       	ldi	r24, 0x1B	; 27
     b94:	89 27       	eor	r24, r25
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <__stack+0x29d>
     b98:	89 8d       	ldd	r24, Y+25	; 0x19
     b9a:	88 0f       	add	r24, r24
     b9c:	8a 8f       	std	Y+26, r24	; 0x1a
     b9e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ba0:	88 23       	and	r24, r24
     ba2:	4c f4       	brge	.+18     	; 0xbb6 <__stack+0x2b7>
     ba4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ba6:	88 2f       	mov	r24, r24
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
     bae:	98 2f       	mov	r25, r24
     bb0:	8b e1       	ldi	r24, 0x1B	; 27
     bb2:	89 27       	eor	r24, r25
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <__stack+0x2bb>
     bb6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bb8:	88 0f       	add	r24, r24
		plaintext[8]   = t ^ tmp[8]   ^ mul2(tmp[8]   ^ tmp[9]);
		plaintext[9] = t ^ tmp[9] ^ mul2(tmp[9] ^ tmp[10]);
		plaintext[10] = t ^ tmp[10] ^ mul2(tmp[10] ^ tmp[11]);
		plaintext[11] = t ^ tmp[11] ^ mul2(tmp[11] ^ tmp[8]);
		u = mul2(mul2(tmp[8]   ^ tmp[10]));
		v = mul2(mul2(tmp[9] ^ tmp[11]));
     bba:	c8 2e       	mov	r12, r24
		t = mul2(u ^ v);
     bbc:	8b 2d       	mov	r24, r11
     bbe:	8c 25       	eor	r24, r12
     bc0:	8b 8f       	std	Y+27, r24	; 0x1b
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     bc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bc4:	88 23       	and	r24, r24
     bc6:	4c f4       	brge	.+18     	; 0xbda <__stack+0x2db>
     bc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bca:	88 2f       	mov	r24, r24
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	98 2f       	mov	r25, r24
     bd4:	8b e1       	ldi	r24, 0x1B	; 27
     bd6:	89 27       	eor	r24, r25
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <__stack+0x2df>
     bda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bdc:	88 0f       	add	r24, r24
		plaintext[9] = t ^ tmp[9] ^ mul2(tmp[9] ^ tmp[10]);
		plaintext[10] = t ^ tmp[10] ^ mul2(tmp[10] ^ tmp[11]);
		plaintext[11] = t ^ tmp[11] ^ mul2(tmp[11] ^ tmp[8]);
		u = mul2(mul2(tmp[8]   ^ tmp[10]));
		v = mul2(mul2(tmp[9] ^ tmp[11]));
		t = mul2(u ^ v);
     bde:	d8 2e       	mov	r13, r24
		plaintext[8]   ^= t ^ u;
     be0:	c8 01       	movw	r24, r16
     be2:	08 96       	adiw	r24, 0x08	; 8
     be4:	98 01       	movw	r18, r16
     be6:	28 5f       	subi	r18, 0xF8	; 248
     be8:	3f 4f       	sbci	r19, 0xFF	; 255
     bea:	f9 01       	movw	r30, r18
     bec:	30 81       	ld	r19, Z
     bee:	2d 2d       	mov	r18, r13
     bf0:	2b 25       	eor	r18, r11
     bf2:	23 27       	eor	r18, r19
     bf4:	fc 01       	movw	r30, r24
     bf6:	20 83       	st	Z, r18
		plaintext[9] ^= t ^ v;
     bf8:	c8 01       	movw	r24, r16
     bfa:	09 96       	adiw	r24, 0x09	; 9
     bfc:	98 01       	movw	r18, r16
     bfe:	27 5f       	subi	r18, 0xF7	; 247
     c00:	3f 4f       	sbci	r19, 0xFF	; 255
     c02:	f9 01       	movw	r30, r18
     c04:	30 81       	ld	r19, Z
     c06:	2d 2d       	mov	r18, r13
     c08:	2c 25       	eor	r18, r12
     c0a:	23 27       	eor	r18, r19
     c0c:	fc 01       	movw	r30, r24
     c0e:	20 83       	st	Z, r18
		plaintext[10] ^= t ^ u;
     c10:	c8 01       	movw	r24, r16
     c12:	0a 96       	adiw	r24, 0x0a	; 10
     c14:	98 01       	movw	r18, r16
     c16:	26 5f       	subi	r18, 0xF6	; 246
     c18:	3f 4f       	sbci	r19, 0xFF	; 255
     c1a:	f9 01       	movw	r30, r18
     c1c:	30 81       	ld	r19, Z
     c1e:	2d 2d       	mov	r18, r13
     c20:	2b 25       	eor	r18, r11
     c22:	23 27       	eor	r18, r19
     c24:	fc 01       	movw	r30, r24
     c26:	20 83       	st	Z, r18
		plaintext[11] ^= t ^ v;
     c28:	c8 01       	movw	r24, r16
     c2a:	0b 96       	adiw	r24, 0x0b	; 11
     c2c:	98 01       	movw	r18, r16
     c2e:	25 5f       	subi	r18, 0xF5	; 245
     c30:	3f 4f       	sbci	r19, 0xFF	; 255
     c32:	f9 01       	movw	r30, r18
     c34:	30 81       	ld	r19, Z
     c36:	2d 2d       	mov	r18, r13
     c38:	2c 25       	eor	r18, r12
     c3a:	23 27       	eor	r18, r19
     c3c:	fc 01       	movw	r30, r24
     c3e:	20 83       	st	Z, r18
		
		//i+=4;
		t = tmp[12] ^ tmp[13] ^ tmp[14] ^ tmp[15];
     c40:	99 a9       	ldd	r25, Y+49	; 0x31
     c42:	8a a9       	ldd	r24, Y+50	; 0x32
     c44:	98 27       	eor	r25, r24
     c46:	8b a9       	ldd	r24, Y+51	; 0x33
     c48:	98 27       	eor	r25, r24
     c4a:	8c a9       	ldd	r24, Y+52	; 0x34
     c4c:	d9 2e       	mov	r13, r25
     c4e:	d8 26       	eor	r13, r24
		plaintext[12]   = t ^ tmp[12]   ^ mul2(tmp[12]   ^ tmp[13]);
     c50:	c8 01       	movw	r24, r16
     c52:	0c 96       	adiw	r24, 0x0c	; 12
     c54:	29 a9       	ldd	r18, Y+49	; 0x31
     c56:	42 2f       	mov	r20, r18
     c58:	4d 25       	eor	r20, r13
     c5a:	39 a9       	ldd	r19, Y+49	; 0x31
     c5c:	2a a9       	ldd	r18, Y+50	; 0x32
     c5e:	23 27       	eor	r18, r19
     c60:	2c 8f       	std	Y+28, r18	; 0x1c
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     c62:	2c 8d       	ldd	r18, Y+28	; 0x1c
     c64:	22 23       	and	r18, r18
     c66:	4c f4       	brge	.+18     	; 0xc7a <__stack+0x37b>
     c68:	2c 8d       	ldd	r18, Y+28	; 0x1c
     c6a:	22 2f       	mov	r18, r18
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	22 0f       	add	r18, r18
     c70:	33 1f       	adc	r19, r19
     c72:	32 2f       	mov	r19, r18
     c74:	2b e1       	ldi	r18, 0x1B	; 27
     c76:	23 27       	eor	r18, r19
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <__stack+0x37f>
     c7a:	2c 8d       	ldd	r18, Y+28	; 0x1c
     c7c:	22 0f       	add	r18, r18
		plaintext[10] ^= t ^ u;
		plaintext[11] ^= t ^ v;
		
		//i+=4;
		t = tmp[12] ^ tmp[13] ^ tmp[14] ^ tmp[15];
		plaintext[12]   = t ^ tmp[12]   ^ mul2(tmp[12]   ^ tmp[13]);
     c7e:	24 27       	eor	r18, r20
     c80:	fc 01       	movw	r30, r24
     c82:	20 83       	st	Z, r18
		plaintext[13] = t ^ tmp[13] ^ mul2(tmp[13] ^ tmp[14]);
     c84:	c8 01       	movw	r24, r16
     c86:	0d 96       	adiw	r24, 0x0d	; 13
     c88:	2a a9       	ldd	r18, Y+50	; 0x32
     c8a:	42 2f       	mov	r20, r18
     c8c:	4d 25       	eor	r20, r13
     c8e:	3a a9       	ldd	r19, Y+50	; 0x32
     c90:	2b a9       	ldd	r18, Y+51	; 0x33
     c92:	23 27       	eor	r18, r19
     c94:	2d 8f       	std	Y+29, r18	; 0x1d
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     c96:	2d 8d       	ldd	r18, Y+29	; 0x1d
     c98:	22 23       	and	r18, r18
     c9a:	4c f4       	brge	.+18     	; 0xcae <__stack+0x3af>
     c9c:	2d 8d       	ldd	r18, Y+29	; 0x1d
     c9e:	22 2f       	mov	r18, r18
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	22 0f       	add	r18, r18
     ca4:	33 1f       	adc	r19, r19
     ca6:	32 2f       	mov	r19, r18
     ca8:	2b e1       	ldi	r18, 0x1B	; 27
     caa:	23 27       	eor	r18, r19
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <__stack+0x3b3>
     cae:	2d 8d       	ldd	r18, Y+29	; 0x1d
     cb0:	22 0f       	add	r18, r18
		plaintext[11] ^= t ^ v;
		
		//i+=4;
		t = tmp[12] ^ tmp[13] ^ tmp[14] ^ tmp[15];
		plaintext[12]   = t ^ tmp[12]   ^ mul2(tmp[12]   ^ tmp[13]);
		plaintext[13] = t ^ tmp[13] ^ mul2(tmp[13] ^ tmp[14]);
     cb2:	24 27       	eor	r18, r20
     cb4:	fc 01       	movw	r30, r24
     cb6:	20 83       	st	Z, r18
		plaintext[14] = t ^ tmp[14] ^ mul2(tmp[14] ^ tmp[15]);
     cb8:	c8 01       	movw	r24, r16
     cba:	0e 96       	adiw	r24, 0x0e	; 14
     cbc:	2b a9       	ldd	r18, Y+51	; 0x33
     cbe:	42 2f       	mov	r20, r18
     cc0:	4d 25       	eor	r20, r13
     cc2:	3b a9       	ldd	r19, Y+51	; 0x33
     cc4:	2c a9       	ldd	r18, Y+52	; 0x34
     cc6:	23 27       	eor	r18, r19
     cc8:	2e 8f       	std	Y+30, r18	; 0x1e
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     cca:	2e 8d       	ldd	r18, Y+30	; 0x1e
     ccc:	22 23       	and	r18, r18
     cce:	4c f4       	brge	.+18     	; 0xce2 <__stack+0x3e3>
     cd0:	2e 8d       	ldd	r18, Y+30	; 0x1e
     cd2:	22 2f       	mov	r18, r18
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	22 0f       	add	r18, r18
     cd8:	33 1f       	adc	r19, r19
     cda:	32 2f       	mov	r19, r18
     cdc:	2b e1       	ldi	r18, 0x1B	; 27
     cde:	23 27       	eor	r18, r19
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <__stack+0x3e7>
     ce2:	2e 8d       	ldd	r18, Y+30	; 0x1e
     ce4:	22 0f       	add	r18, r18
		
		//i+=4;
		t = tmp[12] ^ tmp[13] ^ tmp[14] ^ tmp[15];
		plaintext[12]   = t ^ tmp[12]   ^ mul2(tmp[12]   ^ tmp[13]);
		plaintext[13] = t ^ tmp[13] ^ mul2(tmp[13] ^ tmp[14]);
		plaintext[14] = t ^ tmp[14] ^ mul2(tmp[14] ^ tmp[15]);
     ce6:	24 27       	eor	r18, r20
     ce8:	fc 01       	movw	r30, r24
     cea:	20 83       	st	Z, r18
		plaintext[15] = t ^ tmp[15] ^ mul2(tmp[15] ^ tmp[12]);
     cec:	c8 01       	movw	r24, r16
     cee:	0f 96       	adiw	r24, 0x0f	; 15
     cf0:	2c a9       	ldd	r18, Y+52	; 0x34
     cf2:	42 2f       	mov	r20, r18
     cf4:	4d 25       	eor	r20, r13
     cf6:	3c a9       	ldd	r19, Y+52	; 0x34
     cf8:	29 a9       	ldd	r18, Y+49	; 0x31
     cfa:	23 27       	eor	r18, r19
     cfc:	2f 8f       	std	Y+31, r18	; 0x1f
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     cfe:	2f 8d       	ldd	r18, Y+31	; 0x1f
     d00:	22 23       	and	r18, r18
     d02:	4c f4       	brge	.+18     	; 0xd16 <__stack+0x417>
     d04:	2f 8d       	ldd	r18, Y+31	; 0x1f
     d06:	22 2f       	mov	r18, r18
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	22 0f       	add	r18, r18
     d0c:	33 1f       	adc	r19, r19
     d0e:	32 2f       	mov	r19, r18
     d10:	2b e1       	ldi	r18, 0x1B	; 27
     d12:	23 27       	eor	r18, r19
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <__stack+0x41b>
     d16:	2f 8d       	ldd	r18, Y+31	; 0x1f
     d18:	22 0f       	add	r18, r18
		//i+=4;
		t = tmp[12] ^ tmp[13] ^ tmp[14] ^ tmp[15];
		plaintext[12]   = t ^ tmp[12]   ^ mul2(tmp[12]   ^ tmp[13]);
		plaintext[13] = t ^ tmp[13] ^ mul2(tmp[13] ^ tmp[14]);
		plaintext[14] = t ^ tmp[14] ^ mul2(tmp[14] ^ tmp[15]);
		plaintext[15] = t ^ tmp[15] ^ mul2(tmp[15] ^ tmp[12]);
     d1a:	24 27       	eor	r18, r20
     d1c:	fc 01       	movw	r30, r24
     d1e:	20 83       	st	Z, r18
		u = mul2(mul2(tmp[12]   ^ tmp[14]));
     d20:	99 a9       	ldd	r25, Y+49	; 0x31
     d22:	8b a9       	ldd	r24, Y+51	; 0x33
     d24:	89 27       	eor	r24, r25
     d26:	88 a3       	std	Y+32, r24	; 0x20
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     d28:	88 a1       	ldd	r24, Y+32	; 0x20
     d2a:	88 23       	and	r24, r24
     d2c:	4c f4       	brge	.+18     	; 0xd40 <__stack+0x441>
     d2e:	88 a1       	ldd	r24, Y+32	; 0x20
     d30:	88 2f       	mov	r24, r24
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	98 2f       	mov	r25, r24
     d3a:	8b e1       	ldi	r24, 0x1B	; 27
     d3c:	89 27       	eor	r24, r25
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <__stack+0x445>
     d40:	88 a1       	ldd	r24, Y+32	; 0x20
     d42:	88 0f       	add	r24, r24
     d44:	89 a3       	std	Y+33, r24	; 0x21
     d46:	89 a1       	ldd	r24, Y+33	; 0x21
     d48:	88 23       	and	r24, r24
     d4a:	4c f4       	brge	.+18     	; 0xd5e <__stack+0x45f>
     d4c:	89 a1       	ldd	r24, Y+33	; 0x21
     d4e:	88 2f       	mov	r24, r24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	98 2f       	mov	r25, r24
     d58:	8b e1       	ldi	r24, 0x1B	; 27
     d5a:	89 27       	eor	r24, r25
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <__stack+0x463>
     d5e:	89 a1       	ldd	r24, Y+33	; 0x21
     d60:	88 0f       	add	r24, r24
		t = tmp[12] ^ tmp[13] ^ tmp[14] ^ tmp[15];
		plaintext[12]   = t ^ tmp[12]   ^ mul2(tmp[12]   ^ tmp[13]);
		plaintext[13] = t ^ tmp[13] ^ mul2(tmp[13] ^ tmp[14]);
		plaintext[14] = t ^ tmp[14] ^ mul2(tmp[14] ^ tmp[15]);
		plaintext[15] = t ^ tmp[15] ^ mul2(tmp[15] ^ tmp[12]);
		u = mul2(mul2(tmp[12]   ^ tmp[14]));
     d62:	b8 2e       	mov	r11, r24
		v = mul2(mul2(tmp[13] ^ tmp[15]));
     d64:	9a a9       	ldd	r25, Y+50	; 0x32
     d66:	8c a9       	ldd	r24, Y+52	; 0x34
     d68:	89 27       	eor	r24, r25
     d6a:	8a a3       	std	Y+34, r24	; 0x22
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     d6c:	8a a1       	ldd	r24, Y+34	; 0x22
     d6e:	88 23       	and	r24, r24
     d70:	4c f4       	brge	.+18     	; 0xd84 <__stack+0x485>
     d72:	8a a1       	ldd	r24, Y+34	; 0x22
     d74:	88 2f       	mov	r24, r24
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	98 2f       	mov	r25, r24
     d7e:	8b e1       	ldi	r24, 0x1B	; 27
     d80:	89 27       	eor	r24, r25
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <__stack+0x489>
     d84:	8a a1       	ldd	r24, Y+34	; 0x22
     d86:	88 0f       	add	r24, r24
     d88:	8b a3       	std	Y+35, r24	; 0x23
     d8a:	8b a1       	ldd	r24, Y+35	; 0x23
     d8c:	88 23       	and	r24, r24
     d8e:	4c f4       	brge	.+18     	; 0xda2 <__stack+0x4a3>
     d90:	8b a1       	ldd	r24, Y+35	; 0x23
     d92:	88 2f       	mov	r24, r24
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	98 2f       	mov	r25, r24
     d9c:	8b e1       	ldi	r24, 0x1B	; 27
     d9e:	89 27       	eor	r24, r25
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <__stack+0x4a7>
     da2:	8b a1       	ldd	r24, Y+35	; 0x23
     da4:	88 0f       	add	r24, r24
		plaintext[12]   = t ^ tmp[12]   ^ mul2(tmp[12]   ^ tmp[13]);
		plaintext[13] = t ^ tmp[13] ^ mul2(tmp[13] ^ tmp[14]);
		plaintext[14] = t ^ tmp[14] ^ mul2(tmp[14] ^ tmp[15]);
		plaintext[15] = t ^ tmp[15] ^ mul2(tmp[15] ^ tmp[12]);
		u = mul2(mul2(tmp[12]   ^ tmp[14]));
		v = mul2(mul2(tmp[13] ^ tmp[15]));
     da6:	c8 2e       	mov	r12, r24
		t = mul2(u ^ v);
     da8:	8b 2d       	mov	r24, r11
     daa:	8c 25       	eor	r24, r12
     dac:	8c a3       	std	Y+36, r24	; 0x24
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
__attribute__((always_inline)) static inline uint8_t mul2(register uint8_t a)
{
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     dae:	8c a1       	ldd	r24, Y+36	; 0x24
     db0:	88 23       	and	r24, r24
     db2:	4c f4       	brge	.+18     	; 0xdc6 <__stack+0x4c7>
     db4:	8c a1       	ldd	r24, Y+36	; 0x24
     db6:	88 2f       	mov	r24, r24
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	98 2f       	mov	r25, r24
     dc0:	8b e1       	ldi	r24, 0x1B	; 27
     dc2:	89 27       	eor	r24, r25
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <__stack+0x4cb>
     dc6:	8c a1       	ldd	r24, Y+36	; 0x24
     dc8:	88 0f       	add	r24, r24
		plaintext[13] = t ^ tmp[13] ^ mul2(tmp[13] ^ tmp[14]);
		plaintext[14] = t ^ tmp[14] ^ mul2(tmp[14] ^ tmp[15]);
		plaintext[15] = t ^ tmp[15] ^ mul2(tmp[15] ^ tmp[12]);
		u = mul2(mul2(tmp[12]   ^ tmp[14]));
		v = mul2(mul2(tmp[13] ^ tmp[15]));
		t = mul2(u ^ v);
     dca:	d8 2e       	mov	r13, r24
		plaintext[12]   ^= t ^ u;
     dcc:	c8 01       	movw	r24, r16
     dce:	0c 96       	adiw	r24, 0x0c	; 12
     dd0:	98 01       	movw	r18, r16
     dd2:	24 5f       	subi	r18, 0xF4	; 244
     dd4:	3f 4f       	sbci	r19, 0xFF	; 255
     dd6:	f9 01       	movw	r30, r18
     dd8:	30 81       	ld	r19, Z
     dda:	2d 2d       	mov	r18, r13
     ddc:	2b 25       	eor	r18, r11
     dde:	23 27       	eor	r18, r19
     de0:	fc 01       	movw	r30, r24
     de2:	20 83       	st	Z, r18
		plaintext[13] ^= t ^ v;
     de4:	c8 01       	movw	r24, r16
     de6:	0d 96       	adiw	r24, 0x0d	; 13
     de8:	98 01       	movw	r18, r16
     dea:	23 5f       	subi	r18, 0xF3	; 243
     dec:	3f 4f       	sbci	r19, 0xFF	; 255
     dee:	f9 01       	movw	r30, r18
     df0:	30 81       	ld	r19, Z
     df2:	2d 2d       	mov	r18, r13
     df4:	2c 25       	eor	r18, r12
     df6:	23 27       	eor	r18, r19
     df8:	fc 01       	movw	r30, r24
     dfa:	20 83       	st	Z, r18
		plaintext[14] ^= t ^ u;
     dfc:	c8 01       	movw	r24, r16
     dfe:	0e 96       	adiw	r24, 0x0e	; 14
     e00:	98 01       	movw	r18, r16
     e02:	22 5f       	subi	r18, 0xF2	; 242
     e04:	3f 4f       	sbci	r19, 0xFF	; 255
     e06:	f9 01       	movw	r30, r18
     e08:	30 81       	ld	r19, Z
     e0a:	2d 2d       	mov	r18, r13
     e0c:	2b 25       	eor	r18, r11
     e0e:	23 27       	eor	r18, r19
     e10:	fc 01       	movw	r30, r24
     e12:	20 83       	st	Z, r18
		plaintext[15] ^= t ^ v;
     e14:	c8 01       	movw	r24, r16
     e16:	0f 96       	adiw	r24, 0x0f	; 15
     e18:	98 01       	movw	r18, r16
     e1a:	21 5f       	subi	r18, 0xF1	; 241
     e1c:	3f 4f       	sbci	r19, 0xFF	; 255
     e1e:	f9 01       	movw	r30, r18
     e20:	30 81       	ld	r19, Z
     e22:	2d 2d       	mov	r18, r13
     e24:	2c 25       	eor	r18, r12
     e26:	23 27       	eor	r18, r19
     e28:	fc 01       	movw	r30, r24
     e2a:	20 83       	st	Z, r18
		
        
        // Inverse ShiftRows
        inv_shift_rows(plaintext);
     e2c:	c8 01       	movw	r24, r16
     e2e:	0e 94 4b 00 	call	0x96	; 0x96 <inv_shift_rows>
		/*for (i = (AES_BLOCK_SIZE-1); i != 0; --i) {
            *(plaintext+i) = INV_SBOX[*(plaintext+i)];
        }
		*(plaintext+i) = INV_SBOX[*(plaintext+i)];
		*/
		*(plaintext+0) = INV_SBOX[*(plaintext+0)];
     e32:	f8 01       	movw	r30, r16
     e34:	80 81       	ld	r24, Z
     e36:	88 2f       	mov	r24, r24
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	80 50       	subi	r24, 0x00	; 0
     e3c:	9f 4f       	sbci	r25, 0xFF	; 255
     e3e:	fc 01       	movw	r30, r24
     e40:	80 81       	ld	r24, Z
     e42:	f8 01       	movw	r30, r16
     e44:	80 83       	st	Z, r24
		*(plaintext+1) = INV_SBOX[*(plaintext+1)];
     e46:	c8 01       	movw	r24, r16
     e48:	01 96       	adiw	r24, 0x01	; 1
     e4a:	98 01       	movw	r18, r16
     e4c:	2f 5f       	subi	r18, 0xFF	; 255
     e4e:	3f 4f       	sbci	r19, 0xFF	; 255
     e50:	f9 01       	movw	r30, r18
     e52:	20 81       	ld	r18, Z
     e54:	22 2f       	mov	r18, r18
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	20 50       	subi	r18, 0x00	; 0
     e5a:	3f 4f       	sbci	r19, 0xFF	; 255
     e5c:	f9 01       	movw	r30, r18
     e5e:	20 81       	ld	r18, Z
     e60:	fc 01       	movw	r30, r24
     e62:	20 83       	st	Z, r18
		*(plaintext+2) = INV_SBOX[*(plaintext+2)];
     e64:	c8 01       	movw	r24, r16
     e66:	02 96       	adiw	r24, 0x02	; 2
     e68:	98 01       	movw	r18, r16
     e6a:	2e 5f       	subi	r18, 0xFE	; 254
     e6c:	3f 4f       	sbci	r19, 0xFF	; 255
     e6e:	f9 01       	movw	r30, r18
     e70:	20 81       	ld	r18, Z
     e72:	22 2f       	mov	r18, r18
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	20 50       	subi	r18, 0x00	; 0
     e78:	3f 4f       	sbci	r19, 0xFF	; 255
     e7a:	f9 01       	movw	r30, r18
     e7c:	20 81       	ld	r18, Z
     e7e:	fc 01       	movw	r30, r24
     e80:	20 83       	st	Z, r18
		*(plaintext+3) = INV_SBOX[*(plaintext+3)];
     e82:	c8 01       	movw	r24, r16
     e84:	03 96       	adiw	r24, 0x03	; 3
     e86:	98 01       	movw	r18, r16
     e88:	2d 5f       	subi	r18, 0xFD	; 253
     e8a:	3f 4f       	sbci	r19, 0xFF	; 255
     e8c:	f9 01       	movw	r30, r18
     e8e:	20 81       	ld	r18, Z
     e90:	22 2f       	mov	r18, r18
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	20 50       	subi	r18, 0x00	; 0
     e96:	3f 4f       	sbci	r19, 0xFF	; 255
     e98:	f9 01       	movw	r30, r18
     e9a:	20 81       	ld	r18, Z
     e9c:	fc 01       	movw	r30, r24
     e9e:	20 83       	st	Z, r18
		*(plaintext+4) = INV_SBOX[*(plaintext+4)];
     ea0:	c8 01       	movw	r24, r16
     ea2:	04 96       	adiw	r24, 0x04	; 4
     ea4:	98 01       	movw	r18, r16
     ea6:	2c 5f       	subi	r18, 0xFC	; 252
     ea8:	3f 4f       	sbci	r19, 0xFF	; 255
     eaa:	f9 01       	movw	r30, r18
     eac:	20 81       	ld	r18, Z
     eae:	22 2f       	mov	r18, r18
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	20 50       	subi	r18, 0x00	; 0
     eb4:	3f 4f       	sbci	r19, 0xFF	; 255
     eb6:	f9 01       	movw	r30, r18
     eb8:	20 81       	ld	r18, Z
     eba:	fc 01       	movw	r30, r24
     ebc:	20 83       	st	Z, r18
		*(plaintext+5) = INV_SBOX[*(plaintext+5)];
     ebe:	c8 01       	movw	r24, r16
     ec0:	05 96       	adiw	r24, 0x05	; 5
     ec2:	98 01       	movw	r18, r16
     ec4:	2b 5f       	subi	r18, 0xFB	; 251
     ec6:	3f 4f       	sbci	r19, 0xFF	; 255
     ec8:	f9 01       	movw	r30, r18
     eca:	20 81       	ld	r18, Z
     ecc:	22 2f       	mov	r18, r18
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	20 50       	subi	r18, 0x00	; 0
     ed2:	3f 4f       	sbci	r19, 0xFF	; 255
     ed4:	f9 01       	movw	r30, r18
     ed6:	20 81       	ld	r18, Z
     ed8:	fc 01       	movw	r30, r24
     eda:	20 83       	st	Z, r18
		*(plaintext+6) = INV_SBOX[*(plaintext+6)];
     edc:	c8 01       	movw	r24, r16
     ede:	06 96       	adiw	r24, 0x06	; 6
     ee0:	98 01       	movw	r18, r16
     ee2:	2a 5f       	subi	r18, 0xFA	; 250
     ee4:	3f 4f       	sbci	r19, 0xFF	; 255
     ee6:	f9 01       	movw	r30, r18
     ee8:	20 81       	ld	r18, Z
     eea:	22 2f       	mov	r18, r18
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	20 50       	subi	r18, 0x00	; 0
     ef0:	3f 4f       	sbci	r19, 0xFF	; 255
     ef2:	f9 01       	movw	r30, r18
     ef4:	20 81       	ld	r18, Z
     ef6:	fc 01       	movw	r30, r24
     ef8:	20 83       	st	Z, r18
		*(plaintext+7) = INV_SBOX[*(plaintext+7)];
     efa:	c8 01       	movw	r24, r16
     efc:	07 96       	adiw	r24, 0x07	; 7
     efe:	98 01       	movw	r18, r16
     f00:	29 5f       	subi	r18, 0xF9	; 249
     f02:	3f 4f       	sbci	r19, 0xFF	; 255
     f04:	f9 01       	movw	r30, r18
     f06:	20 81       	ld	r18, Z
     f08:	22 2f       	mov	r18, r18
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	20 50       	subi	r18, 0x00	; 0
     f0e:	3f 4f       	sbci	r19, 0xFF	; 255
     f10:	f9 01       	movw	r30, r18
     f12:	20 81       	ld	r18, Z
     f14:	fc 01       	movw	r30, r24
     f16:	20 83       	st	Z, r18
		*(plaintext+8) = INV_SBOX[*(plaintext+8)];
     f18:	c8 01       	movw	r24, r16
     f1a:	08 96       	adiw	r24, 0x08	; 8
     f1c:	98 01       	movw	r18, r16
     f1e:	28 5f       	subi	r18, 0xF8	; 248
     f20:	3f 4f       	sbci	r19, 0xFF	; 255
     f22:	f9 01       	movw	r30, r18
     f24:	20 81       	ld	r18, Z
     f26:	22 2f       	mov	r18, r18
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	20 50       	subi	r18, 0x00	; 0
     f2c:	3f 4f       	sbci	r19, 0xFF	; 255
     f2e:	f9 01       	movw	r30, r18
     f30:	20 81       	ld	r18, Z
     f32:	fc 01       	movw	r30, r24
     f34:	20 83       	st	Z, r18
		*(plaintext+9) = INV_SBOX[*(plaintext+9)];
     f36:	c8 01       	movw	r24, r16
     f38:	09 96       	adiw	r24, 0x09	; 9
     f3a:	98 01       	movw	r18, r16
     f3c:	27 5f       	subi	r18, 0xF7	; 247
     f3e:	3f 4f       	sbci	r19, 0xFF	; 255
     f40:	f9 01       	movw	r30, r18
     f42:	20 81       	ld	r18, Z
     f44:	22 2f       	mov	r18, r18
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	20 50       	subi	r18, 0x00	; 0
     f4a:	3f 4f       	sbci	r19, 0xFF	; 255
     f4c:	f9 01       	movw	r30, r18
     f4e:	20 81       	ld	r18, Z
     f50:	fc 01       	movw	r30, r24
     f52:	20 83       	st	Z, r18
		*(plaintext+10) = INV_SBOX[*(plaintext+10)];
     f54:	c8 01       	movw	r24, r16
     f56:	0a 96       	adiw	r24, 0x0a	; 10
     f58:	98 01       	movw	r18, r16
     f5a:	26 5f       	subi	r18, 0xF6	; 246
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	f9 01       	movw	r30, r18
     f60:	20 81       	ld	r18, Z
     f62:	22 2f       	mov	r18, r18
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	20 50       	subi	r18, 0x00	; 0
     f68:	3f 4f       	sbci	r19, 0xFF	; 255
     f6a:	f9 01       	movw	r30, r18
     f6c:	20 81       	ld	r18, Z
     f6e:	fc 01       	movw	r30, r24
     f70:	20 83       	st	Z, r18
		*(plaintext+11) = INV_SBOX[*(plaintext+11)];
     f72:	c8 01       	movw	r24, r16
     f74:	0b 96       	adiw	r24, 0x0b	; 11
     f76:	98 01       	movw	r18, r16
     f78:	25 5f       	subi	r18, 0xF5	; 245
     f7a:	3f 4f       	sbci	r19, 0xFF	; 255
     f7c:	f9 01       	movw	r30, r18
     f7e:	20 81       	ld	r18, Z
     f80:	22 2f       	mov	r18, r18
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	20 50       	subi	r18, 0x00	; 0
     f86:	3f 4f       	sbci	r19, 0xFF	; 255
     f88:	f9 01       	movw	r30, r18
     f8a:	20 81       	ld	r18, Z
     f8c:	fc 01       	movw	r30, r24
     f8e:	20 83       	st	Z, r18
		*(plaintext+12) = INV_SBOX[*(plaintext+12)];
     f90:	c8 01       	movw	r24, r16
     f92:	0c 96       	adiw	r24, 0x0c	; 12
     f94:	98 01       	movw	r18, r16
     f96:	24 5f       	subi	r18, 0xF4	; 244
     f98:	3f 4f       	sbci	r19, 0xFF	; 255
     f9a:	f9 01       	movw	r30, r18
     f9c:	20 81       	ld	r18, Z
     f9e:	22 2f       	mov	r18, r18
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	20 50       	subi	r18, 0x00	; 0
     fa4:	3f 4f       	sbci	r19, 0xFF	; 255
     fa6:	f9 01       	movw	r30, r18
     fa8:	20 81       	ld	r18, Z
     faa:	fc 01       	movw	r30, r24
     fac:	20 83       	st	Z, r18
		*(plaintext+13) = INV_SBOX[*(plaintext+13)];
     fae:	c8 01       	movw	r24, r16
     fb0:	0d 96       	adiw	r24, 0x0d	; 13
     fb2:	98 01       	movw	r18, r16
     fb4:	23 5f       	subi	r18, 0xF3	; 243
     fb6:	3f 4f       	sbci	r19, 0xFF	; 255
     fb8:	f9 01       	movw	r30, r18
     fba:	20 81       	ld	r18, Z
     fbc:	22 2f       	mov	r18, r18
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	20 50       	subi	r18, 0x00	; 0
     fc2:	3f 4f       	sbci	r19, 0xFF	; 255
     fc4:	f9 01       	movw	r30, r18
     fc6:	20 81       	ld	r18, Z
     fc8:	fc 01       	movw	r30, r24
     fca:	20 83       	st	Z, r18
		*(plaintext+14) = INV_SBOX[*(plaintext+14)];
     fcc:	c8 01       	movw	r24, r16
     fce:	0e 96       	adiw	r24, 0x0e	; 14
     fd0:	98 01       	movw	r18, r16
     fd2:	22 5f       	subi	r18, 0xF2	; 242
     fd4:	3f 4f       	sbci	r19, 0xFF	; 255
     fd6:	f9 01       	movw	r30, r18
     fd8:	20 81       	ld	r18, Z
     fda:	22 2f       	mov	r18, r18
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	20 50       	subi	r18, 0x00	; 0
     fe0:	3f 4f       	sbci	r19, 0xFF	; 255
     fe2:	f9 01       	movw	r30, r18
     fe4:	20 81       	ld	r18, Z
     fe6:	fc 01       	movw	r30, r24
     fe8:	20 83       	st	Z, r18
		*(plaintext+15) = INV_SBOX[*(plaintext+15)];
     fea:	c8 01       	movw	r24, r16
     fec:	0f 96       	adiw	r24, 0x0f	; 15
     fee:	98 01       	movw	r18, r16
     ff0:	21 5f       	subi	r18, 0xF1	; 241
     ff2:	3f 4f       	sbci	r19, 0xFF	; 255
     ff4:	f9 01       	movw	r30, r18
     ff6:	20 81       	ld	r18, Z
     ff8:	22 2f       	mov	r18, r18
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	20 50       	subi	r18, 0x00	; 0
     ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    1000:	f9 01       	movw	r30, r18
    1002:	20 81       	ld	r18, Z
    1004:	fc 01       	movw	r30, r24
    1006:	20 83       	st	Z, r18

        roundkeys -= 16;
    1008:	f0 e1       	ldi	r31, 0x10	; 16
    100a:	ef 1a       	sub	r14, r31
    100c:	f1 08       	sbc	r15, r1
	*(plaintext+12) = INV_SBOX[*(plaintext+12)];
	*(plaintext+13) = INV_SBOX[*(plaintext+13)];
	*(plaintext+14) = INV_SBOX[*(plaintext+14)];
	*(plaintext+15) = INV_SBOX[*(plaintext+15)];

    for (j = (AES_ROUNDS-1); j != 0; --j) {
    100e:	aa 94       	dec	r10
    1010:	aa 20       	and	r10, r10
    1012:	09 f0       	breq	.+2      	; 0x1016 <__stack+0x717>
    1014:	9e ca       	rjmp	.-2756   	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
    /*
	for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
        *(plaintext+i) ^= *(roundkeys+i);
    }
	*/
	*(plaintext+0) ^= *(roundkeys+0);
    1016:	f8 01       	movw	r30, r16
    1018:	90 81       	ld	r25, Z
    101a:	f7 01       	movw	r30, r14
    101c:	80 81       	ld	r24, Z
    101e:	89 27       	eor	r24, r25
    1020:	f8 01       	movw	r30, r16
    1022:	80 83       	st	Z, r24
	*(plaintext+1) ^= *(roundkeys+1);
    1024:	c8 01       	movw	r24, r16
    1026:	01 96       	adiw	r24, 0x01	; 1
    1028:	98 01       	movw	r18, r16
    102a:	2f 5f       	subi	r18, 0xFF	; 255
    102c:	3f 4f       	sbci	r19, 0xFF	; 255
    102e:	f9 01       	movw	r30, r18
    1030:	40 81       	ld	r20, Z
    1032:	97 01       	movw	r18, r14
    1034:	2f 5f       	subi	r18, 0xFF	; 255
    1036:	3f 4f       	sbci	r19, 0xFF	; 255
    1038:	f9 01       	movw	r30, r18
    103a:	20 81       	ld	r18, Z
    103c:	24 27       	eor	r18, r20
    103e:	fc 01       	movw	r30, r24
    1040:	20 83       	st	Z, r18
	*(plaintext+2) ^= *(roundkeys+2);
    1042:	c8 01       	movw	r24, r16
    1044:	02 96       	adiw	r24, 0x02	; 2
    1046:	98 01       	movw	r18, r16
    1048:	2e 5f       	subi	r18, 0xFE	; 254
    104a:	3f 4f       	sbci	r19, 0xFF	; 255
    104c:	f9 01       	movw	r30, r18
    104e:	40 81       	ld	r20, Z
    1050:	97 01       	movw	r18, r14
    1052:	2e 5f       	subi	r18, 0xFE	; 254
    1054:	3f 4f       	sbci	r19, 0xFF	; 255
    1056:	f9 01       	movw	r30, r18
    1058:	20 81       	ld	r18, Z
    105a:	24 27       	eor	r18, r20
    105c:	fc 01       	movw	r30, r24
    105e:	20 83       	st	Z, r18
	*(plaintext+3) ^= *(roundkeys+3);
    1060:	c8 01       	movw	r24, r16
    1062:	03 96       	adiw	r24, 0x03	; 3
    1064:	98 01       	movw	r18, r16
    1066:	2d 5f       	subi	r18, 0xFD	; 253
    1068:	3f 4f       	sbci	r19, 0xFF	; 255
    106a:	f9 01       	movw	r30, r18
    106c:	40 81       	ld	r20, Z
    106e:	97 01       	movw	r18, r14
    1070:	2d 5f       	subi	r18, 0xFD	; 253
    1072:	3f 4f       	sbci	r19, 0xFF	; 255
    1074:	f9 01       	movw	r30, r18
    1076:	20 81       	ld	r18, Z
    1078:	24 27       	eor	r18, r20
    107a:	fc 01       	movw	r30, r24
    107c:	20 83       	st	Z, r18
	*(plaintext+4) ^= *(roundkeys+4);
    107e:	c8 01       	movw	r24, r16
    1080:	04 96       	adiw	r24, 0x04	; 4
    1082:	98 01       	movw	r18, r16
    1084:	2c 5f       	subi	r18, 0xFC	; 252
    1086:	3f 4f       	sbci	r19, 0xFF	; 255
    1088:	f9 01       	movw	r30, r18
    108a:	40 81       	ld	r20, Z
    108c:	97 01       	movw	r18, r14
    108e:	2c 5f       	subi	r18, 0xFC	; 252
    1090:	3f 4f       	sbci	r19, 0xFF	; 255
    1092:	f9 01       	movw	r30, r18
    1094:	20 81       	ld	r18, Z
    1096:	24 27       	eor	r18, r20
    1098:	fc 01       	movw	r30, r24
    109a:	20 83       	st	Z, r18
	*(plaintext+5) ^= *(roundkeys+5);
    109c:	c8 01       	movw	r24, r16
    109e:	05 96       	adiw	r24, 0x05	; 5
    10a0:	98 01       	movw	r18, r16
    10a2:	2b 5f       	subi	r18, 0xFB	; 251
    10a4:	3f 4f       	sbci	r19, 0xFF	; 255
    10a6:	f9 01       	movw	r30, r18
    10a8:	40 81       	ld	r20, Z
    10aa:	97 01       	movw	r18, r14
    10ac:	2b 5f       	subi	r18, 0xFB	; 251
    10ae:	3f 4f       	sbci	r19, 0xFF	; 255
    10b0:	f9 01       	movw	r30, r18
    10b2:	20 81       	ld	r18, Z
    10b4:	24 27       	eor	r18, r20
    10b6:	fc 01       	movw	r30, r24
    10b8:	20 83       	st	Z, r18
	*(plaintext+6) ^= *(roundkeys+6);
    10ba:	c8 01       	movw	r24, r16
    10bc:	06 96       	adiw	r24, 0x06	; 6
    10be:	98 01       	movw	r18, r16
    10c0:	2a 5f       	subi	r18, 0xFA	; 250
    10c2:	3f 4f       	sbci	r19, 0xFF	; 255
    10c4:	f9 01       	movw	r30, r18
    10c6:	40 81       	ld	r20, Z
    10c8:	97 01       	movw	r18, r14
    10ca:	2a 5f       	subi	r18, 0xFA	; 250
    10cc:	3f 4f       	sbci	r19, 0xFF	; 255
    10ce:	f9 01       	movw	r30, r18
    10d0:	20 81       	ld	r18, Z
    10d2:	24 27       	eor	r18, r20
    10d4:	fc 01       	movw	r30, r24
    10d6:	20 83       	st	Z, r18
	*(plaintext+7) ^= *(roundkeys+7);
    10d8:	c8 01       	movw	r24, r16
    10da:	07 96       	adiw	r24, 0x07	; 7
    10dc:	98 01       	movw	r18, r16
    10de:	29 5f       	subi	r18, 0xF9	; 249
    10e0:	3f 4f       	sbci	r19, 0xFF	; 255
    10e2:	f9 01       	movw	r30, r18
    10e4:	40 81       	ld	r20, Z
    10e6:	97 01       	movw	r18, r14
    10e8:	29 5f       	subi	r18, 0xF9	; 249
    10ea:	3f 4f       	sbci	r19, 0xFF	; 255
    10ec:	f9 01       	movw	r30, r18
    10ee:	20 81       	ld	r18, Z
    10f0:	24 27       	eor	r18, r20
    10f2:	fc 01       	movw	r30, r24
    10f4:	20 83       	st	Z, r18
	*(plaintext+8) ^= *(roundkeys+8);
    10f6:	c8 01       	movw	r24, r16
    10f8:	08 96       	adiw	r24, 0x08	; 8
    10fa:	98 01       	movw	r18, r16
    10fc:	28 5f       	subi	r18, 0xF8	; 248
    10fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1100:	f9 01       	movw	r30, r18
    1102:	40 81       	ld	r20, Z
    1104:	97 01       	movw	r18, r14
    1106:	28 5f       	subi	r18, 0xF8	; 248
    1108:	3f 4f       	sbci	r19, 0xFF	; 255
    110a:	f9 01       	movw	r30, r18
    110c:	20 81       	ld	r18, Z
    110e:	24 27       	eor	r18, r20
    1110:	fc 01       	movw	r30, r24
    1112:	20 83       	st	Z, r18
	*(plaintext+9) ^= *(roundkeys+9);
    1114:	c8 01       	movw	r24, r16
    1116:	09 96       	adiw	r24, 0x09	; 9
    1118:	98 01       	movw	r18, r16
    111a:	27 5f       	subi	r18, 0xF7	; 247
    111c:	3f 4f       	sbci	r19, 0xFF	; 255
    111e:	f9 01       	movw	r30, r18
    1120:	40 81       	ld	r20, Z
    1122:	97 01       	movw	r18, r14
    1124:	27 5f       	subi	r18, 0xF7	; 247
    1126:	3f 4f       	sbci	r19, 0xFF	; 255
    1128:	f9 01       	movw	r30, r18
    112a:	20 81       	ld	r18, Z
    112c:	24 27       	eor	r18, r20
    112e:	fc 01       	movw	r30, r24
    1130:	20 83       	st	Z, r18
	*(plaintext+10) ^= *(roundkeys+10);
    1132:	c8 01       	movw	r24, r16
    1134:	0a 96       	adiw	r24, 0x0a	; 10
    1136:	98 01       	movw	r18, r16
    1138:	26 5f       	subi	r18, 0xF6	; 246
    113a:	3f 4f       	sbci	r19, 0xFF	; 255
    113c:	f9 01       	movw	r30, r18
    113e:	40 81       	ld	r20, Z
    1140:	97 01       	movw	r18, r14
    1142:	26 5f       	subi	r18, 0xF6	; 246
    1144:	3f 4f       	sbci	r19, 0xFF	; 255
    1146:	f9 01       	movw	r30, r18
    1148:	20 81       	ld	r18, Z
    114a:	24 27       	eor	r18, r20
    114c:	fc 01       	movw	r30, r24
    114e:	20 83       	st	Z, r18
	*(plaintext+11) ^= *(roundkeys+11);
    1150:	c8 01       	movw	r24, r16
    1152:	0b 96       	adiw	r24, 0x0b	; 11
    1154:	98 01       	movw	r18, r16
    1156:	25 5f       	subi	r18, 0xF5	; 245
    1158:	3f 4f       	sbci	r19, 0xFF	; 255
    115a:	f9 01       	movw	r30, r18
    115c:	40 81       	ld	r20, Z
    115e:	97 01       	movw	r18, r14
    1160:	25 5f       	subi	r18, 0xF5	; 245
    1162:	3f 4f       	sbci	r19, 0xFF	; 255
    1164:	f9 01       	movw	r30, r18
    1166:	20 81       	ld	r18, Z
    1168:	24 27       	eor	r18, r20
    116a:	fc 01       	movw	r30, r24
    116c:	20 83       	st	Z, r18
	*(plaintext+12) ^= *(roundkeys+12);
    116e:	c8 01       	movw	r24, r16
    1170:	0c 96       	adiw	r24, 0x0c	; 12
    1172:	98 01       	movw	r18, r16
    1174:	24 5f       	subi	r18, 0xF4	; 244
    1176:	3f 4f       	sbci	r19, 0xFF	; 255
    1178:	f9 01       	movw	r30, r18
    117a:	40 81       	ld	r20, Z
    117c:	97 01       	movw	r18, r14
    117e:	24 5f       	subi	r18, 0xF4	; 244
    1180:	3f 4f       	sbci	r19, 0xFF	; 255
    1182:	f9 01       	movw	r30, r18
    1184:	20 81       	ld	r18, Z
    1186:	24 27       	eor	r18, r20
    1188:	fc 01       	movw	r30, r24
    118a:	20 83       	st	Z, r18
	*(plaintext+13) ^= *(roundkeys+13);
    118c:	c8 01       	movw	r24, r16
    118e:	0d 96       	adiw	r24, 0x0d	; 13
    1190:	98 01       	movw	r18, r16
    1192:	23 5f       	subi	r18, 0xF3	; 243
    1194:	3f 4f       	sbci	r19, 0xFF	; 255
    1196:	f9 01       	movw	r30, r18
    1198:	40 81       	ld	r20, Z
    119a:	97 01       	movw	r18, r14
    119c:	23 5f       	subi	r18, 0xF3	; 243
    119e:	3f 4f       	sbci	r19, 0xFF	; 255
    11a0:	f9 01       	movw	r30, r18
    11a2:	20 81       	ld	r18, Z
    11a4:	24 27       	eor	r18, r20
    11a6:	fc 01       	movw	r30, r24
    11a8:	20 83       	st	Z, r18
	*(plaintext+14) ^= *(roundkeys+14);
    11aa:	c8 01       	movw	r24, r16
    11ac:	0e 96       	adiw	r24, 0x0e	; 14
    11ae:	98 01       	movw	r18, r16
    11b0:	22 5f       	subi	r18, 0xF2	; 242
    11b2:	3f 4f       	sbci	r19, 0xFF	; 255
    11b4:	f9 01       	movw	r30, r18
    11b6:	40 81       	ld	r20, Z
    11b8:	97 01       	movw	r18, r14
    11ba:	22 5f       	subi	r18, 0xF2	; 242
    11bc:	3f 4f       	sbci	r19, 0xFF	; 255
    11be:	f9 01       	movw	r30, r18
    11c0:	20 81       	ld	r18, Z
    11c2:	24 27       	eor	r18, r20
    11c4:	fc 01       	movw	r30, r24
    11c6:	20 83       	st	Z, r18
	*(plaintext+15) ^= *(roundkeys+15);
    11c8:	c8 01       	movw	r24, r16
    11ca:	0f 96       	adiw	r24, 0x0f	; 15
    11cc:	98 01       	movw	r18, r16
    11ce:	21 5f       	subi	r18, 0xF1	; 241
    11d0:	3f 4f       	sbci	r19, 0xFF	; 255
    11d2:	f9 01       	movw	r30, r18
    11d4:	40 81       	ld	r20, Z
    11d6:	97 01       	movw	r18, r14
    11d8:	21 5f       	subi	r18, 0xF1	; 241
    11da:	3f 4f       	sbci	r19, 0xFF	; 255
    11dc:	f9 01       	movw	r30, r18
    11de:	20 81       	ld	r18, Z
    11e0:	24 27       	eor	r18, r20
    11e2:	fc 01       	movw	r30, r24
    11e4:	20 83       	st	Z, r18

}
    11e6:	00 00       	nop
    11e8:	e4 96       	adiw	r28, 0x34	; 52
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	ff 90       	pop	r15
    11fe:	ef 90       	pop	r14
    1200:	df 90       	pop	r13
    1202:	cf 90       	pop	r12
    1204:	bf 90       	pop	r11
    1206:	af 90       	pop	r10
    1208:	08 95       	ret

0000120a <mul2>:
 * by the polynomial x^8 + x^4 + x^3 + x + 1 = 0
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
static inline uint8_t mul2(register uint8_t a)
{
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
    1212:	98 2f       	mov	r25, r24
    1214:	99 23       	and	r25, r25
    1216:	44 f4       	brge	.+16     	; 0x1228 <mul2+0x1e>
    1218:	88 2f       	mov	r24, r24
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	98 2f       	mov	r25, r24
    1222:	8b e1       	ldi	r24, 0x1B	; 27
    1224:	89 27       	eor	r24, r25
    1226:	01 c0       	rjmp	.+2      	; 0x122a <mul2+0x20>
    1228:	88 0f       	add	r24, r24
}
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	08 95       	ret

00001230 <shift_rows>:
 *  Row1: s1  s5  s9  s13   <<< 1 byte
 *  Row2: s2  s6  s10 s14   <<< 2 bytes
 *  Row3: s3  s7  s11 s15   <<< 3 bytes
 */
static void shift_rows(register uint8_t *state)
{
    1230:	1f 93       	push	r17
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    register uint8_t temp;
    // row1
    temp        = *(state+1);
    123a:	fc 01       	movw	r30, r24
    123c:	11 81       	ldd	r17, Z+1	; 0x01
    *(state+1)  = *(state+5);
    123e:	9c 01       	movw	r18, r24
    1240:	2f 5f       	subi	r18, 0xFF	; 255
    1242:	3f 4f       	sbci	r19, 0xFF	; 255
    1244:	fc 01       	movw	r30, r24
    1246:	45 81       	ldd	r20, Z+5	; 0x05
    1248:	f9 01       	movw	r30, r18
    124a:	40 83       	st	Z, r20
    *(state+5)  = *(state+9);
    124c:	9c 01       	movw	r18, r24
    124e:	2b 5f       	subi	r18, 0xFB	; 251
    1250:	3f 4f       	sbci	r19, 0xFF	; 255
    1252:	fc 01       	movw	r30, r24
    1254:	41 85       	ldd	r20, Z+9	; 0x09
    1256:	f9 01       	movw	r30, r18
    1258:	40 83       	st	Z, r20
    *(state+9)  = *(state+13);
    125a:	9c 01       	movw	r18, r24
    125c:	27 5f       	subi	r18, 0xF7	; 247
    125e:	3f 4f       	sbci	r19, 0xFF	; 255
    1260:	fc 01       	movw	r30, r24
    1262:	45 85       	ldd	r20, Z+13	; 0x0d
    1264:	f9 01       	movw	r30, r18
    1266:	40 83       	st	Z, r20
    *(state+13) = temp;
    1268:	9c 01       	movw	r18, r24
    126a:	23 5f       	subi	r18, 0xF3	; 243
    126c:	3f 4f       	sbci	r19, 0xFF	; 255
    126e:	f9 01       	movw	r30, r18
    1270:	10 83       	st	Z, r17
    // row2
    temp        = *(state+2);
    1272:	fc 01       	movw	r30, r24
    1274:	12 81       	ldd	r17, Z+2	; 0x02
    *(state+2)  = *(state+10);
    1276:	9c 01       	movw	r18, r24
    1278:	2e 5f       	subi	r18, 0xFE	; 254
    127a:	3f 4f       	sbci	r19, 0xFF	; 255
    127c:	fc 01       	movw	r30, r24
    127e:	42 85       	ldd	r20, Z+10	; 0x0a
    1280:	f9 01       	movw	r30, r18
    1282:	40 83       	st	Z, r20
    *(state+10) = temp;
    1284:	9c 01       	movw	r18, r24
    1286:	26 5f       	subi	r18, 0xF6	; 246
    1288:	3f 4f       	sbci	r19, 0xFF	; 255
    128a:	f9 01       	movw	r30, r18
    128c:	10 83       	st	Z, r17
    temp        = *(state+6);
    128e:	fc 01       	movw	r30, r24
    1290:	16 81       	ldd	r17, Z+6	; 0x06
    *(state+6)  = *(state+14);
    1292:	9c 01       	movw	r18, r24
    1294:	2a 5f       	subi	r18, 0xFA	; 250
    1296:	3f 4f       	sbci	r19, 0xFF	; 255
    1298:	fc 01       	movw	r30, r24
    129a:	46 85       	ldd	r20, Z+14	; 0x0e
    129c:	f9 01       	movw	r30, r18
    129e:	40 83       	st	Z, r20
    *(state+14) = temp;
    12a0:	9c 01       	movw	r18, r24
    12a2:	22 5f       	subi	r18, 0xF2	; 242
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	f9 01       	movw	r30, r18
    12a8:	10 83       	st	Z, r17
    // row3
    temp        = *(state+15);
    12aa:	fc 01       	movw	r30, r24
    12ac:	17 85       	ldd	r17, Z+15	; 0x0f
    *(state+15) = *(state+11);
    12ae:	9c 01       	movw	r18, r24
    12b0:	21 5f       	subi	r18, 0xF1	; 241
    12b2:	3f 4f       	sbci	r19, 0xFF	; 255
    12b4:	fc 01       	movw	r30, r24
    12b6:	43 85       	ldd	r20, Z+11	; 0x0b
    12b8:	f9 01       	movw	r30, r18
    12ba:	40 83       	st	Z, r20
    *(state+11) = *(state+7);
    12bc:	9c 01       	movw	r18, r24
    12be:	25 5f       	subi	r18, 0xF5	; 245
    12c0:	3f 4f       	sbci	r19, 0xFF	; 255
    12c2:	fc 01       	movw	r30, r24
    12c4:	47 81       	ldd	r20, Z+7	; 0x07
    12c6:	f9 01       	movw	r30, r18
    12c8:	40 83       	st	Z, r20
    *(state+7)  = *(state+3);
    12ca:	9c 01       	movw	r18, r24
    12cc:	29 5f       	subi	r18, 0xF9	; 249
    12ce:	3f 4f       	sbci	r19, 0xFF	; 255
    12d0:	fc 01       	movw	r30, r24
    12d2:	43 81       	ldd	r20, Z+3	; 0x03
    12d4:	f9 01       	movw	r30, r18
    12d6:	40 83       	st	Z, r20
    *(state+3)  = temp;
    12d8:	03 96       	adiw	r24, 0x03	; 3
    12da:	fc 01       	movw	r30, r24
    12dc:	10 83       	st	Z, r17
}
    12de:	00 00       	nop
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	1f 91       	pop	r17
    12e6:	08 95       	ret

000012e8 <aes_encrypt_128>:

void aes_encrypt_128( register uint8_t *roundkeys, register uint8_t *ciphertext)
{
    12e8:	cf 92       	push	r12
    12ea:	df 92       	push	r13
    12ec:	ef 92       	push	r14
    12ee:	ff 92       	push	r15
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	61 97       	sbiw	r28, 0x11	; 17
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
    1308:	7c 01       	movw	r14, r24
    130a:	8b 01       	movw	r16, r22
    {
        *(ciphertext+i) = plaintext[i] ^ *roundkeys++;
    }
	*(ciphertext+i) = plaintext[i] ^ *roundkeys++;
	*/
	*(ciphertext+0) = plaintext[0] ^ *roundkeys++;
    130c:	20 91 0a 03 	lds	r18, 0x030A	; 0x80030a <plaintext>
    1310:	c7 01       	movw	r24, r14
    1312:	7c 01       	movw	r14, r24
    1314:	3f ef       	ldi	r19, 0xFF	; 255
    1316:	e3 1a       	sub	r14, r19
    1318:	f3 0a       	sbc	r15, r19
    131a:	fc 01       	movw	r30, r24
    131c:	80 81       	ld	r24, Z
    131e:	82 27       	eor	r24, r18
    1320:	f8 01       	movw	r30, r16
    1322:	80 83       	st	Z, r24
	*(ciphertext+1) = plaintext[1] ^ *roundkeys++;
    1324:	98 01       	movw	r18, r16
    1326:	2f 5f       	subi	r18, 0xFF	; 255
    1328:	3f 4f       	sbci	r19, 0xFF	; 255
    132a:	40 91 0b 03 	lds	r20, 0x030B	; 0x80030b <plaintext+0x1>
    132e:	c7 01       	movw	r24, r14
    1330:	7c 01       	movw	r14, r24
    1332:	ff ef       	ldi	r31, 0xFF	; 255
    1334:	ef 1a       	sub	r14, r31
    1336:	ff 0a       	sbc	r15, r31
    1338:	fc 01       	movw	r30, r24
    133a:	80 81       	ld	r24, Z
    133c:	84 27       	eor	r24, r20
    133e:	f9 01       	movw	r30, r18
    1340:	80 83       	st	Z, r24
	*(ciphertext+2) = plaintext[2] ^ *roundkeys++;
    1342:	98 01       	movw	r18, r16
    1344:	2e 5f       	subi	r18, 0xFE	; 254
    1346:	3f 4f       	sbci	r19, 0xFF	; 255
    1348:	40 91 0c 03 	lds	r20, 0x030C	; 0x80030c <plaintext+0x2>
    134c:	c7 01       	movw	r24, r14
    134e:	7c 01       	movw	r14, r24
    1350:	ff ef       	ldi	r31, 0xFF	; 255
    1352:	ef 1a       	sub	r14, r31
    1354:	ff 0a       	sbc	r15, r31
    1356:	fc 01       	movw	r30, r24
    1358:	80 81       	ld	r24, Z
    135a:	84 27       	eor	r24, r20
    135c:	f9 01       	movw	r30, r18
    135e:	80 83       	st	Z, r24
	*(ciphertext+3) = plaintext[3] ^ *roundkeys++;
    1360:	98 01       	movw	r18, r16
    1362:	2d 5f       	subi	r18, 0xFD	; 253
    1364:	3f 4f       	sbci	r19, 0xFF	; 255
    1366:	40 91 0d 03 	lds	r20, 0x030D	; 0x80030d <plaintext+0x3>
    136a:	c7 01       	movw	r24, r14
    136c:	7c 01       	movw	r14, r24
    136e:	ff ef       	ldi	r31, 0xFF	; 255
    1370:	ef 1a       	sub	r14, r31
    1372:	ff 0a       	sbc	r15, r31
    1374:	fc 01       	movw	r30, r24
    1376:	80 81       	ld	r24, Z
    1378:	84 27       	eor	r24, r20
    137a:	f9 01       	movw	r30, r18
    137c:	80 83       	st	Z, r24
	*(ciphertext+4) = plaintext[4] ^ *roundkeys++;
    137e:	98 01       	movw	r18, r16
    1380:	2c 5f       	subi	r18, 0xFC	; 252
    1382:	3f 4f       	sbci	r19, 0xFF	; 255
    1384:	40 91 0e 03 	lds	r20, 0x030E	; 0x80030e <plaintext+0x4>
    1388:	c7 01       	movw	r24, r14
    138a:	7c 01       	movw	r14, r24
    138c:	ff ef       	ldi	r31, 0xFF	; 255
    138e:	ef 1a       	sub	r14, r31
    1390:	ff 0a       	sbc	r15, r31
    1392:	fc 01       	movw	r30, r24
    1394:	80 81       	ld	r24, Z
    1396:	84 27       	eor	r24, r20
    1398:	f9 01       	movw	r30, r18
    139a:	80 83       	st	Z, r24
	*(ciphertext+5) = plaintext[5] ^ *roundkeys++;
    139c:	98 01       	movw	r18, r16
    139e:	2b 5f       	subi	r18, 0xFB	; 251
    13a0:	3f 4f       	sbci	r19, 0xFF	; 255
    13a2:	40 91 0f 03 	lds	r20, 0x030F	; 0x80030f <plaintext+0x5>
    13a6:	c7 01       	movw	r24, r14
    13a8:	7c 01       	movw	r14, r24
    13aa:	ff ef       	ldi	r31, 0xFF	; 255
    13ac:	ef 1a       	sub	r14, r31
    13ae:	ff 0a       	sbc	r15, r31
    13b0:	fc 01       	movw	r30, r24
    13b2:	80 81       	ld	r24, Z
    13b4:	84 27       	eor	r24, r20
    13b6:	f9 01       	movw	r30, r18
    13b8:	80 83       	st	Z, r24
	*(ciphertext+6) = plaintext[6] ^ *roundkeys++;
    13ba:	98 01       	movw	r18, r16
    13bc:	2a 5f       	subi	r18, 0xFA	; 250
    13be:	3f 4f       	sbci	r19, 0xFF	; 255
    13c0:	40 91 10 03 	lds	r20, 0x0310	; 0x800310 <plaintext+0x6>
    13c4:	c7 01       	movw	r24, r14
    13c6:	7c 01       	movw	r14, r24
    13c8:	ff ef       	ldi	r31, 0xFF	; 255
    13ca:	ef 1a       	sub	r14, r31
    13cc:	ff 0a       	sbc	r15, r31
    13ce:	fc 01       	movw	r30, r24
    13d0:	80 81       	ld	r24, Z
    13d2:	84 27       	eor	r24, r20
    13d4:	f9 01       	movw	r30, r18
    13d6:	80 83       	st	Z, r24
	*(ciphertext+7) = plaintext[7] ^ *roundkeys++;
    13d8:	98 01       	movw	r18, r16
    13da:	29 5f       	subi	r18, 0xF9	; 249
    13dc:	3f 4f       	sbci	r19, 0xFF	; 255
    13de:	40 91 11 03 	lds	r20, 0x0311	; 0x800311 <plaintext+0x7>
    13e2:	c7 01       	movw	r24, r14
    13e4:	7c 01       	movw	r14, r24
    13e6:	ff ef       	ldi	r31, 0xFF	; 255
    13e8:	ef 1a       	sub	r14, r31
    13ea:	ff 0a       	sbc	r15, r31
    13ec:	fc 01       	movw	r30, r24
    13ee:	80 81       	ld	r24, Z
    13f0:	84 27       	eor	r24, r20
    13f2:	f9 01       	movw	r30, r18
    13f4:	80 83       	st	Z, r24
	*(ciphertext+8) = plaintext[8] ^ *roundkeys++;
    13f6:	98 01       	movw	r18, r16
    13f8:	28 5f       	subi	r18, 0xF8	; 248
    13fa:	3f 4f       	sbci	r19, 0xFF	; 255
    13fc:	40 91 12 03 	lds	r20, 0x0312	; 0x800312 <plaintext+0x8>
    1400:	c7 01       	movw	r24, r14
    1402:	7c 01       	movw	r14, r24
    1404:	ff ef       	ldi	r31, 0xFF	; 255
    1406:	ef 1a       	sub	r14, r31
    1408:	ff 0a       	sbc	r15, r31
    140a:	fc 01       	movw	r30, r24
    140c:	80 81       	ld	r24, Z
    140e:	84 27       	eor	r24, r20
    1410:	f9 01       	movw	r30, r18
    1412:	80 83       	st	Z, r24
	*(ciphertext+9) = plaintext[9] ^ *roundkeys++;
    1414:	98 01       	movw	r18, r16
    1416:	27 5f       	subi	r18, 0xF7	; 247
    1418:	3f 4f       	sbci	r19, 0xFF	; 255
    141a:	40 91 13 03 	lds	r20, 0x0313	; 0x800313 <plaintext+0x9>
    141e:	c7 01       	movw	r24, r14
    1420:	7c 01       	movw	r14, r24
    1422:	ff ef       	ldi	r31, 0xFF	; 255
    1424:	ef 1a       	sub	r14, r31
    1426:	ff 0a       	sbc	r15, r31
    1428:	fc 01       	movw	r30, r24
    142a:	80 81       	ld	r24, Z
    142c:	84 27       	eor	r24, r20
    142e:	f9 01       	movw	r30, r18
    1430:	80 83       	st	Z, r24
	*(ciphertext+10) = plaintext[10] ^ *roundkeys++;
    1432:	98 01       	movw	r18, r16
    1434:	26 5f       	subi	r18, 0xF6	; 246
    1436:	3f 4f       	sbci	r19, 0xFF	; 255
    1438:	40 91 14 03 	lds	r20, 0x0314	; 0x800314 <plaintext+0xa>
    143c:	c7 01       	movw	r24, r14
    143e:	7c 01       	movw	r14, r24
    1440:	ff ef       	ldi	r31, 0xFF	; 255
    1442:	ef 1a       	sub	r14, r31
    1444:	ff 0a       	sbc	r15, r31
    1446:	fc 01       	movw	r30, r24
    1448:	80 81       	ld	r24, Z
    144a:	84 27       	eor	r24, r20
    144c:	f9 01       	movw	r30, r18
    144e:	80 83       	st	Z, r24
	*(ciphertext+11) = plaintext[11] ^ *roundkeys++;
    1450:	98 01       	movw	r18, r16
    1452:	25 5f       	subi	r18, 0xF5	; 245
    1454:	3f 4f       	sbci	r19, 0xFF	; 255
    1456:	40 91 15 03 	lds	r20, 0x0315	; 0x800315 <plaintext+0xb>
    145a:	c7 01       	movw	r24, r14
    145c:	7c 01       	movw	r14, r24
    145e:	ff ef       	ldi	r31, 0xFF	; 255
    1460:	ef 1a       	sub	r14, r31
    1462:	ff 0a       	sbc	r15, r31
    1464:	fc 01       	movw	r30, r24
    1466:	80 81       	ld	r24, Z
    1468:	84 27       	eor	r24, r20
    146a:	f9 01       	movw	r30, r18
    146c:	80 83       	st	Z, r24
	*(ciphertext+12) = plaintext[12] ^ *roundkeys++;
    146e:	98 01       	movw	r18, r16
    1470:	24 5f       	subi	r18, 0xF4	; 244
    1472:	3f 4f       	sbci	r19, 0xFF	; 255
    1474:	40 91 16 03 	lds	r20, 0x0316	; 0x800316 <plaintext+0xc>
    1478:	c7 01       	movw	r24, r14
    147a:	7c 01       	movw	r14, r24
    147c:	ff ef       	ldi	r31, 0xFF	; 255
    147e:	ef 1a       	sub	r14, r31
    1480:	ff 0a       	sbc	r15, r31
    1482:	fc 01       	movw	r30, r24
    1484:	80 81       	ld	r24, Z
    1486:	84 27       	eor	r24, r20
    1488:	f9 01       	movw	r30, r18
    148a:	80 83       	st	Z, r24
	*(ciphertext+13) = plaintext[13] ^ *roundkeys++;
    148c:	98 01       	movw	r18, r16
    148e:	23 5f       	subi	r18, 0xF3	; 243
    1490:	3f 4f       	sbci	r19, 0xFF	; 255
    1492:	40 91 17 03 	lds	r20, 0x0317	; 0x800317 <plaintext+0xd>
    1496:	c7 01       	movw	r24, r14
    1498:	7c 01       	movw	r14, r24
    149a:	ff ef       	ldi	r31, 0xFF	; 255
    149c:	ef 1a       	sub	r14, r31
    149e:	ff 0a       	sbc	r15, r31
    14a0:	fc 01       	movw	r30, r24
    14a2:	80 81       	ld	r24, Z
    14a4:	84 27       	eor	r24, r20
    14a6:	f9 01       	movw	r30, r18
    14a8:	80 83       	st	Z, r24
	*(ciphertext+14) = plaintext[14] ^ *roundkeys++;
    14aa:	98 01       	movw	r18, r16
    14ac:	22 5f       	subi	r18, 0xF2	; 242
    14ae:	3f 4f       	sbci	r19, 0xFF	; 255
    14b0:	40 91 18 03 	lds	r20, 0x0318	; 0x800318 <plaintext+0xe>
    14b4:	c7 01       	movw	r24, r14
    14b6:	7c 01       	movw	r14, r24
    14b8:	ff ef       	ldi	r31, 0xFF	; 255
    14ba:	ef 1a       	sub	r14, r31
    14bc:	ff 0a       	sbc	r15, r31
    14be:	fc 01       	movw	r30, r24
    14c0:	80 81       	ld	r24, Z
    14c2:	84 27       	eor	r24, r20
    14c4:	f9 01       	movw	r30, r18
    14c6:	80 83       	st	Z, r24
	*(ciphertext+15) = plaintext[15] ^ *roundkeys++;
    14c8:	98 01       	movw	r18, r16
    14ca:	21 5f       	subi	r18, 0xF1	; 241
    14cc:	3f 4f       	sbci	r19, 0xFF	; 255
    14ce:	40 91 19 03 	lds	r20, 0x0319	; 0x800319 <plaintext+0xf>
    14d2:	c7 01       	movw	r24, r14
    14d4:	7c 01       	movw	r14, r24
    14d6:	ff ef       	ldi	r31, 0xFF	; 255
    14d8:	ef 1a       	sub	r14, r31
    14da:	ff 0a       	sbc	r15, r31
    14dc:	fc 01       	movw	r30, r24
    14de:	80 81       	ld	r24, Z
    14e0:	84 27       	eor	r24, r20
    14e2:	f9 01       	movw	r30, r18
    14e4:	80 83       	st	Z, r24
		*/
/*
    }
	*/

		*(tmp+0) = SBOX[*(ciphertext+0)];
    14e6:	f8 01       	movw	r30, r16
    14e8:	80 81       	ld	r24, Z
    14ea:	88 2f       	mov	r24, r24
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	80 50       	subi	r24, 0x00	; 0
    14f0:	9e 4f       	sbci	r25, 0xFE	; 254
    14f2:	fc 01       	movw	r30, r24
    14f4:	80 81       	ld	r24, Z
    14f6:	8a 83       	std	Y+2, r24	; 0x02
		*(tmp+1) = SBOX[*(ciphertext+1)];
    14f8:	c8 01       	movw	r24, r16
    14fa:	01 96       	adiw	r24, 0x01	; 1
    14fc:	fc 01       	movw	r30, r24
    14fe:	80 81       	ld	r24, Z
    1500:	88 2f       	mov	r24, r24
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	80 50       	subi	r24, 0x00	; 0
    1506:	9e 4f       	sbci	r25, 0xFE	; 254
    1508:	fc 01       	movw	r30, r24
    150a:	80 81       	ld	r24, Z
    150c:	8b 83       	std	Y+3, r24	; 0x03
		*(tmp+2) = SBOX[*(ciphertext+2)];
    150e:	c8 01       	movw	r24, r16
    1510:	02 96       	adiw	r24, 0x02	; 2
    1512:	fc 01       	movw	r30, r24
    1514:	80 81       	ld	r24, Z
    1516:	88 2f       	mov	r24, r24
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	80 50       	subi	r24, 0x00	; 0
    151c:	9e 4f       	sbci	r25, 0xFE	; 254
    151e:	fc 01       	movw	r30, r24
    1520:	80 81       	ld	r24, Z
    1522:	8c 83       	std	Y+4, r24	; 0x04
		*(tmp+3) = SBOX[*(ciphertext+3)];
    1524:	c8 01       	movw	r24, r16
    1526:	03 96       	adiw	r24, 0x03	; 3
    1528:	fc 01       	movw	r30, r24
    152a:	80 81       	ld	r24, Z
    152c:	88 2f       	mov	r24, r24
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	80 50       	subi	r24, 0x00	; 0
    1532:	9e 4f       	sbci	r25, 0xFE	; 254
    1534:	fc 01       	movw	r30, r24
    1536:	80 81       	ld	r24, Z
    1538:	8d 83       	std	Y+5, r24	; 0x05
		*(tmp+4) = SBOX[*(ciphertext+4)];
    153a:	c8 01       	movw	r24, r16
    153c:	04 96       	adiw	r24, 0x04	; 4
    153e:	fc 01       	movw	r30, r24
    1540:	80 81       	ld	r24, Z
    1542:	88 2f       	mov	r24, r24
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	80 50       	subi	r24, 0x00	; 0
    1548:	9e 4f       	sbci	r25, 0xFE	; 254
    154a:	fc 01       	movw	r30, r24
    154c:	80 81       	ld	r24, Z
    154e:	8e 83       	std	Y+6, r24	; 0x06
		*(tmp+5) = SBOX[*(ciphertext+5)];
    1550:	c8 01       	movw	r24, r16
    1552:	05 96       	adiw	r24, 0x05	; 5
    1554:	fc 01       	movw	r30, r24
    1556:	80 81       	ld	r24, Z
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	80 50       	subi	r24, 0x00	; 0
    155e:	9e 4f       	sbci	r25, 0xFE	; 254
    1560:	fc 01       	movw	r30, r24
    1562:	80 81       	ld	r24, Z
    1564:	8f 83       	std	Y+7, r24	; 0x07
		*(tmp+6) = SBOX[*(ciphertext+6)];
    1566:	c8 01       	movw	r24, r16
    1568:	06 96       	adiw	r24, 0x06	; 6
    156a:	fc 01       	movw	r30, r24
    156c:	80 81       	ld	r24, Z
    156e:	88 2f       	mov	r24, r24
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	80 50       	subi	r24, 0x00	; 0
    1574:	9e 4f       	sbci	r25, 0xFE	; 254
    1576:	fc 01       	movw	r30, r24
    1578:	80 81       	ld	r24, Z
    157a:	88 87       	std	Y+8, r24	; 0x08
		*(tmp+7) = SBOX[*(ciphertext+7)];
    157c:	c8 01       	movw	r24, r16
    157e:	07 96       	adiw	r24, 0x07	; 7
    1580:	fc 01       	movw	r30, r24
    1582:	80 81       	ld	r24, Z
    1584:	88 2f       	mov	r24, r24
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	80 50       	subi	r24, 0x00	; 0
    158a:	9e 4f       	sbci	r25, 0xFE	; 254
    158c:	fc 01       	movw	r30, r24
    158e:	80 81       	ld	r24, Z
    1590:	89 87       	std	Y+9, r24	; 0x09
		*(tmp+8) = SBOX[*(ciphertext+8)];
    1592:	c8 01       	movw	r24, r16
    1594:	08 96       	adiw	r24, 0x08	; 8
    1596:	fc 01       	movw	r30, r24
    1598:	80 81       	ld	r24, Z
    159a:	88 2f       	mov	r24, r24
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	80 50       	subi	r24, 0x00	; 0
    15a0:	9e 4f       	sbci	r25, 0xFE	; 254
    15a2:	fc 01       	movw	r30, r24
    15a4:	80 81       	ld	r24, Z
    15a6:	8a 87       	std	Y+10, r24	; 0x0a
		*(tmp+9) = SBOX[*(ciphertext+9)];
    15a8:	c8 01       	movw	r24, r16
    15aa:	09 96       	adiw	r24, 0x09	; 9
    15ac:	fc 01       	movw	r30, r24
    15ae:	80 81       	ld	r24, Z
    15b0:	88 2f       	mov	r24, r24
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	80 50       	subi	r24, 0x00	; 0
    15b6:	9e 4f       	sbci	r25, 0xFE	; 254
    15b8:	fc 01       	movw	r30, r24
    15ba:	80 81       	ld	r24, Z
    15bc:	8b 87       	std	Y+11, r24	; 0x0b
		*(tmp+10) = SBOX[*(ciphertext+10)];
    15be:	c8 01       	movw	r24, r16
    15c0:	0a 96       	adiw	r24, 0x0a	; 10
    15c2:	fc 01       	movw	r30, r24
    15c4:	80 81       	ld	r24, Z
    15c6:	88 2f       	mov	r24, r24
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	80 50       	subi	r24, 0x00	; 0
    15cc:	9e 4f       	sbci	r25, 0xFE	; 254
    15ce:	fc 01       	movw	r30, r24
    15d0:	80 81       	ld	r24, Z
    15d2:	8c 87       	std	Y+12, r24	; 0x0c
		*(tmp+11) = SBOX[*(ciphertext+11)];
    15d4:	c8 01       	movw	r24, r16
    15d6:	0b 96       	adiw	r24, 0x0b	; 11
    15d8:	fc 01       	movw	r30, r24
    15da:	80 81       	ld	r24, Z
    15dc:	88 2f       	mov	r24, r24
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	80 50       	subi	r24, 0x00	; 0
    15e2:	9e 4f       	sbci	r25, 0xFE	; 254
    15e4:	fc 01       	movw	r30, r24
    15e6:	80 81       	ld	r24, Z
    15e8:	8d 87       	std	Y+13, r24	; 0x0d
		*(tmp+12) = SBOX[*(ciphertext+12)];
    15ea:	c8 01       	movw	r24, r16
    15ec:	0c 96       	adiw	r24, 0x0c	; 12
    15ee:	fc 01       	movw	r30, r24
    15f0:	80 81       	ld	r24, Z
    15f2:	88 2f       	mov	r24, r24
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	80 50       	subi	r24, 0x00	; 0
    15f8:	9e 4f       	sbci	r25, 0xFE	; 254
    15fa:	fc 01       	movw	r30, r24
    15fc:	80 81       	ld	r24, Z
    15fe:	8e 87       	std	Y+14, r24	; 0x0e
		*(tmp+13) = SBOX[*(ciphertext+13)];
    1600:	c8 01       	movw	r24, r16
    1602:	0d 96       	adiw	r24, 0x0d	; 13
    1604:	fc 01       	movw	r30, r24
    1606:	80 81       	ld	r24, Z
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	80 50       	subi	r24, 0x00	; 0
    160e:	9e 4f       	sbci	r25, 0xFE	; 254
    1610:	fc 01       	movw	r30, r24
    1612:	80 81       	ld	r24, Z
    1614:	8f 87       	std	Y+15, r24	; 0x0f
		*(tmp+14) = SBOX[*(ciphertext+14)];
    1616:	c8 01       	movw	r24, r16
    1618:	0e 96       	adiw	r24, 0x0e	; 14
    161a:	fc 01       	movw	r30, r24
    161c:	80 81       	ld	r24, Z
    161e:	88 2f       	mov	r24, r24
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	80 50       	subi	r24, 0x00	; 0
    1624:	9e 4f       	sbci	r25, 0xFE	; 254
    1626:	fc 01       	movw	r30, r24
    1628:	80 81       	ld	r24, Z
    162a:	88 8b       	std	Y+16, r24	; 0x10
		*(tmp+15) = SBOX[*(ciphertext+15)];
    162c:	c8 01       	movw	r24, r16
    162e:	0f 96       	adiw	r24, 0x0f	; 15
    1630:	fc 01       	movw	r30, r24
    1632:	80 81       	ld	r24, Z
    1634:	88 2f       	mov	r24, r24
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	80 50       	subi	r24, 0x00	; 0
    163a:	9e 4f       	sbci	r25, 0xFE	; 254
    163c:	fc 01       	movw	r30, r24
    163e:	80 81       	ld	r24, Z
    1640:	89 8b       	std	Y+17, r24	; 0x11
        shift_rows(tmp);
    1642:	ce 01       	movw	r24, r28
    1644:	02 96       	adiw	r24, 0x02	; 2
    1646:	0e 94 18 09 	call	0x1230	; 0x1230 <shift_rows>
		
		t = tmp[0] ^ tmp[1] ^ tmp[2] ^ tmp[3];
    164a:	9a 81       	ldd	r25, Y+2	; 0x02
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	98 27       	eor	r25, r24
    1650:	8c 81       	ldd	r24, Y+4	; 0x04
    1652:	98 27       	eor	r25, r24
    1654:	8d 81       	ldd	r24, Y+5	; 0x05
    1656:	89 27       	eor	r24, r25
    1658:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[0]   = mul2(tmp[0]   ^ tmp[1]) ^ tmp[0]   ^ t;
    165a:	9a 81       	ldd	r25, Y+2	; 0x02
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	89 27       	eor	r24, r25
    1660:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1664:	98 2f       	mov	r25, r24
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	98 27       	eor	r25, r24
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	89 27       	eor	r24, r25
    166e:	f8 01       	movw	r30, r16
    1670:	80 83       	st	Z, r24
        ciphertext[1] = mul2(tmp[1] ^ tmp[2]) ^ tmp[1] ^ t;
    1672:	68 01       	movw	r12, r16
    1674:	ff ef       	ldi	r31, 0xFF	; 255
    1676:	cf 1a       	sub	r12, r31
    1678:	df 0a       	sbc	r13, r31
    167a:	9b 81       	ldd	r25, Y+3	; 0x03
    167c:	8c 81       	ldd	r24, Y+4	; 0x04
    167e:	89 27       	eor	r24, r25
    1680:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1684:	98 2f       	mov	r25, r24
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	98 27       	eor	r25, r24
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	89 27       	eor	r24, r25
    168e:	f6 01       	movw	r30, r12
    1690:	80 83       	st	Z, r24
        ciphertext[2] = mul2(tmp[2] ^ tmp[3]) ^ tmp[2] ^ t;
    1692:	68 01       	movw	r12, r16
    1694:	f2 e0       	ldi	r31, 0x02	; 2
    1696:	cf 0e       	add	r12, r31
    1698:	d1 1c       	adc	r13, r1
    169a:	9c 81       	ldd	r25, Y+4	; 0x04
    169c:	8d 81       	ldd	r24, Y+5	; 0x05
    169e:	89 27       	eor	r24, r25
    16a0:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    16a4:	98 2f       	mov	r25, r24
    16a6:	8c 81       	ldd	r24, Y+4	; 0x04
    16a8:	98 27       	eor	r25, r24
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	89 27       	eor	r24, r25
    16ae:	f6 01       	movw	r30, r12
    16b0:	80 83       	st	Z, r24
        ciphertext[3] = mul2(tmp[3] ^ tmp[0]  ) ^ tmp[3] ^ t;
    16b2:	68 01       	movw	r12, r16
    16b4:	f3 e0       	ldi	r31, 0x03	; 3
    16b6:	cf 0e       	add	r12, r31
    16b8:	d1 1c       	adc	r13, r1
    16ba:	9d 81       	ldd	r25, Y+5	; 0x05
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	89 27       	eor	r24, r25
    16c0:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    16c4:	98 2f       	mov	r25, r24
    16c6:	8d 81       	ldd	r24, Y+5	; 0x05
    16c8:	98 27       	eor	r25, r24
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	89 27       	eor	r24, r25
    16ce:	f6 01       	movw	r30, r12
    16d0:	80 83       	st	Z, r24
			
		t = tmp[4] ^ tmp[5] ^ tmp[6] ^ tmp[7];
    16d2:	9e 81       	ldd	r25, Y+6	; 0x06
    16d4:	8f 81       	ldd	r24, Y+7	; 0x07
    16d6:	98 27       	eor	r25, r24
    16d8:	88 85       	ldd	r24, Y+8	; 0x08
    16da:	98 27       	eor	r25, r24
    16dc:	89 85       	ldd	r24, Y+9	; 0x09
    16de:	89 27       	eor	r24, r25
    16e0:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[4]   = mul2(tmp[4]   ^ tmp[5]) ^ tmp[4]   ^ t;
    16e2:	68 01       	movw	r12, r16
    16e4:	f4 e0       	ldi	r31, 0x04	; 4
    16e6:	cf 0e       	add	r12, r31
    16e8:	d1 1c       	adc	r13, r1
    16ea:	9e 81       	ldd	r25, Y+6	; 0x06
    16ec:	8f 81       	ldd	r24, Y+7	; 0x07
    16ee:	89 27       	eor	r24, r25
    16f0:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    16f4:	98 2f       	mov	r25, r24
    16f6:	8e 81       	ldd	r24, Y+6	; 0x06
    16f8:	98 27       	eor	r25, r24
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	89 27       	eor	r24, r25
    16fe:	f6 01       	movw	r30, r12
    1700:	80 83       	st	Z, r24
        ciphertext[5] = mul2(tmp[5] ^ tmp[6]) ^ tmp[5] ^ t;
    1702:	68 01       	movw	r12, r16
    1704:	f5 e0       	ldi	r31, 0x05	; 5
    1706:	cf 0e       	add	r12, r31
    1708:	d1 1c       	adc	r13, r1
    170a:	9f 81       	ldd	r25, Y+7	; 0x07
    170c:	88 85       	ldd	r24, Y+8	; 0x08
    170e:	89 27       	eor	r24, r25
    1710:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1714:	98 2f       	mov	r25, r24
    1716:	8f 81       	ldd	r24, Y+7	; 0x07
    1718:	98 27       	eor	r25, r24
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	89 27       	eor	r24, r25
    171e:	f6 01       	movw	r30, r12
    1720:	80 83       	st	Z, r24
        ciphertext[6] = mul2(tmp[6] ^ tmp[7]) ^ tmp[6] ^ t;
    1722:	68 01       	movw	r12, r16
    1724:	f6 e0       	ldi	r31, 0x06	; 6
    1726:	cf 0e       	add	r12, r31
    1728:	d1 1c       	adc	r13, r1
    172a:	98 85       	ldd	r25, Y+8	; 0x08
    172c:	89 85       	ldd	r24, Y+9	; 0x09
    172e:	89 27       	eor	r24, r25
    1730:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1734:	98 2f       	mov	r25, r24
    1736:	88 85       	ldd	r24, Y+8	; 0x08
    1738:	98 27       	eor	r25, r24
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	89 27       	eor	r24, r25
    173e:	f6 01       	movw	r30, r12
    1740:	80 83       	st	Z, r24
        ciphertext[7] = mul2(tmp[7] ^ tmp[4]  ) ^ tmp[7] ^ t;
    1742:	68 01       	movw	r12, r16
    1744:	f7 e0       	ldi	r31, 0x07	; 7
    1746:	cf 0e       	add	r12, r31
    1748:	d1 1c       	adc	r13, r1
    174a:	99 85       	ldd	r25, Y+9	; 0x09
    174c:	8e 81       	ldd	r24, Y+6	; 0x06
    174e:	89 27       	eor	r24, r25
    1750:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1754:	98 2f       	mov	r25, r24
    1756:	89 85       	ldd	r24, Y+9	; 0x09
    1758:	98 27       	eor	r25, r24
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	89 27       	eor	r24, r25
    175e:	f6 01       	movw	r30, r12
    1760:	80 83       	st	Z, r24
			
		t = tmp[8] ^ tmp[9] ^ tmp[10] ^ tmp[11];
    1762:	9a 85       	ldd	r25, Y+10	; 0x0a
    1764:	8b 85       	ldd	r24, Y+11	; 0x0b
    1766:	98 27       	eor	r25, r24
    1768:	8c 85       	ldd	r24, Y+12	; 0x0c
    176a:	98 27       	eor	r25, r24
    176c:	8d 85       	ldd	r24, Y+13	; 0x0d
    176e:	89 27       	eor	r24, r25
    1770:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[8]   = mul2(tmp[8]   ^ tmp[9]) ^ tmp[8]   ^ t;
    1772:	68 01       	movw	r12, r16
    1774:	f8 e0       	ldi	r31, 0x08	; 8
    1776:	cf 0e       	add	r12, r31
    1778:	d1 1c       	adc	r13, r1
    177a:	9a 85       	ldd	r25, Y+10	; 0x0a
    177c:	8b 85       	ldd	r24, Y+11	; 0x0b
    177e:	89 27       	eor	r24, r25
    1780:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1784:	98 2f       	mov	r25, r24
    1786:	8a 85       	ldd	r24, Y+10	; 0x0a
    1788:	98 27       	eor	r25, r24
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	89 27       	eor	r24, r25
    178e:	f6 01       	movw	r30, r12
    1790:	80 83       	st	Z, r24
        ciphertext[9] = mul2(tmp[9] ^ tmp[10]) ^ tmp[9] ^ t;
    1792:	68 01       	movw	r12, r16
    1794:	f9 e0       	ldi	r31, 0x09	; 9
    1796:	cf 0e       	add	r12, r31
    1798:	d1 1c       	adc	r13, r1
    179a:	9b 85       	ldd	r25, Y+11	; 0x0b
    179c:	8c 85       	ldd	r24, Y+12	; 0x0c
    179e:	89 27       	eor	r24, r25
    17a0:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    17a4:	98 2f       	mov	r25, r24
    17a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    17a8:	98 27       	eor	r25, r24
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	89 27       	eor	r24, r25
    17ae:	f6 01       	movw	r30, r12
    17b0:	80 83       	st	Z, r24
        ciphertext[10] = mul2(tmp[10] ^ tmp[11]) ^ tmp[10] ^ t;
    17b2:	68 01       	movw	r12, r16
    17b4:	fa e0       	ldi	r31, 0x0A	; 10
    17b6:	cf 0e       	add	r12, r31
    17b8:	d1 1c       	adc	r13, r1
    17ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    17bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17be:	89 27       	eor	r24, r25
    17c0:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    17c4:	98 2f       	mov	r25, r24
    17c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    17c8:	98 27       	eor	r25, r24
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	89 27       	eor	r24, r25
    17ce:	f6 01       	movw	r30, r12
    17d0:	80 83       	st	Z, r24
        ciphertext[11] = mul2(tmp[11] ^ tmp[8]  ) ^ tmp[11] ^ t;
    17d2:	68 01       	movw	r12, r16
    17d4:	fb e0       	ldi	r31, 0x0B	; 11
    17d6:	cf 0e       	add	r12, r31
    17d8:	d1 1c       	adc	r13, r1
    17da:	9d 85       	ldd	r25, Y+13	; 0x0d
    17dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    17de:	89 27       	eor	r24, r25
    17e0:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    17e4:	98 2f       	mov	r25, r24
    17e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e8:	98 27       	eor	r25, r24
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	89 27       	eor	r24, r25
    17ee:	f6 01       	movw	r30, r12
    17f0:	80 83       	st	Z, r24
			
		t = tmp[12] ^ tmp[13] ^ tmp[14] ^ tmp[15];
    17f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17f6:	98 27       	eor	r25, r24
    17f8:	88 89       	ldd	r24, Y+16	; 0x10
    17fa:	98 27       	eor	r25, r24
    17fc:	89 89       	ldd	r24, Y+17	; 0x11
    17fe:	89 27       	eor	r24, r25
    1800:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[12]   = mul2(tmp[12]   ^ tmp[13]) ^ tmp[12]   ^ t;
    1802:	68 01       	movw	r12, r16
    1804:	fc e0       	ldi	r31, 0x0C	; 12
    1806:	cf 0e       	add	r12, r31
    1808:	d1 1c       	adc	r13, r1
    180a:	9e 85       	ldd	r25, Y+14	; 0x0e
    180c:	8f 85       	ldd	r24, Y+15	; 0x0f
    180e:	89 27       	eor	r24, r25
    1810:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1814:	98 2f       	mov	r25, r24
    1816:	8e 85       	ldd	r24, Y+14	; 0x0e
    1818:	98 27       	eor	r25, r24
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	89 27       	eor	r24, r25
    181e:	f6 01       	movw	r30, r12
    1820:	80 83       	st	Z, r24
        ciphertext[13] = mul2(tmp[13] ^ tmp[14]) ^ tmp[13] ^ t;
    1822:	68 01       	movw	r12, r16
    1824:	fd e0       	ldi	r31, 0x0D	; 13
    1826:	cf 0e       	add	r12, r31
    1828:	d1 1c       	adc	r13, r1
    182a:	9f 85       	ldd	r25, Y+15	; 0x0f
    182c:	88 89       	ldd	r24, Y+16	; 0x10
    182e:	89 27       	eor	r24, r25
    1830:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1834:	98 2f       	mov	r25, r24
    1836:	8f 85       	ldd	r24, Y+15	; 0x0f
    1838:	98 27       	eor	r25, r24
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	89 27       	eor	r24, r25
    183e:	f6 01       	movw	r30, r12
    1840:	80 83       	st	Z, r24
        ciphertext[14] = mul2(tmp[14] ^ tmp[15]) ^ tmp[14] ^ t;
    1842:	68 01       	movw	r12, r16
    1844:	fe e0       	ldi	r31, 0x0E	; 14
    1846:	cf 0e       	add	r12, r31
    1848:	d1 1c       	adc	r13, r1
    184a:	98 89       	ldd	r25, Y+16	; 0x10
    184c:	89 89       	ldd	r24, Y+17	; 0x11
    184e:	89 27       	eor	r24, r25
    1850:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1854:	98 2f       	mov	r25, r24
    1856:	88 89       	ldd	r24, Y+16	; 0x10
    1858:	98 27       	eor	r25, r24
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	89 27       	eor	r24, r25
    185e:	f6 01       	movw	r30, r12
    1860:	80 83       	st	Z, r24
        ciphertext[15] = mul2(tmp[15] ^ tmp[12]  ) ^ tmp[15] ^ t;
    1862:	68 01       	movw	r12, r16
    1864:	ff e0       	ldi	r31, 0x0F	; 15
    1866:	cf 0e       	add	r12, r31
    1868:	d1 1c       	adc	r13, r1
    186a:	99 89       	ldd	r25, Y+17	; 0x11
    186c:	8e 85       	ldd	r24, Y+14	; 0x0e
    186e:	89 27       	eor	r24, r25
    1870:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1874:	98 2f       	mov	r25, r24
    1876:	89 89       	ldd	r24, Y+17	; 0x11
    1878:	98 27       	eor	r25, r24
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	89 27       	eor	r24, r25
    187e:	f6 01       	movw	r30, r12
    1880:	80 83       	st	Z, r24
		
		*(ciphertext+0) ^= *roundkeys++;
    1882:	c7 01       	movw	r24, r14
    1884:	7c 01       	movw	r14, r24
    1886:	ff ef       	ldi	r31, 0xFF	; 255
    1888:	ef 1a       	sub	r14, r31
    188a:	ff 0a       	sbc	r15, r31
    188c:	fc 01       	movw	r30, r24
    188e:	80 81       	ld	r24, Z
    1890:	f8 01       	movw	r30, r16
    1892:	90 81       	ld	r25, Z
    1894:	89 27       	eor	r24, r25
    1896:	f8 01       	movw	r30, r16
    1898:	80 83       	st	Z, r24
		*(ciphertext+1) ^= *roundkeys++;
    189a:	c7 01       	movw	r24, r14
    189c:	7c 01       	movw	r14, r24
    189e:	ff ef       	ldi	r31, 0xFF	; 255
    18a0:	ef 1a       	sub	r14, r31
    18a2:	ff 0a       	sbc	r15, r31
    18a4:	fc 01       	movw	r30, r24
    18a6:	40 81       	ld	r20, Z
    18a8:	c8 01       	movw	r24, r16
    18aa:	01 96       	adiw	r24, 0x01	; 1
    18ac:	98 01       	movw	r18, r16
    18ae:	2f 5f       	subi	r18, 0xFF	; 255
    18b0:	3f 4f       	sbci	r19, 0xFF	; 255
    18b2:	f9 01       	movw	r30, r18
    18b4:	20 81       	ld	r18, Z
    18b6:	24 27       	eor	r18, r20
    18b8:	fc 01       	movw	r30, r24
    18ba:	20 83       	st	Z, r18
		*(ciphertext+2) ^= *roundkeys++;
    18bc:	c7 01       	movw	r24, r14
    18be:	7c 01       	movw	r14, r24
    18c0:	ff ef       	ldi	r31, 0xFF	; 255
    18c2:	ef 1a       	sub	r14, r31
    18c4:	ff 0a       	sbc	r15, r31
    18c6:	fc 01       	movw	r30, r24
    18c8:	40 81       	ld	r20, Z
    18ca:	c8 01       	movw	r24, r16
    18cc:	02 96       	adiw	r24, 0x02	; 2
    18ce:	98 01       	movw	r18, r16
    18d0:	2e 5f       	subi	r18, 0xFE	; 254
    18d2:	3f 4f       	sbci	r19, 0xFF	; 255
    18d4:	f9 01       	movw	r30, r18
    18d6:	20 81       	ld	r18, Z
    18d8:	24 27       	eor	r18, r20
    18da:	fc 01       	movw	r30, r24
    18dc:	20 83       	st	Z, r18
		*(ciphertext+3) ^= *roundkeys++;
    18de:	c7 01       	movw	r24, r14
    18e0:	7c 01       	movw	r14, r24
    18e2:	ff ef       	ldi	r31, 0xFF	; 255
    18e4:	ef 1a       	sub	r14, r31
    18e6:	ff 0a       	sbc	r15, r31
    18e8:	fc 01       	movw	r30, r24
    18ea:	40 81       	ld	r20, Z
    18ec:	c8 01       	movw	r24, r16
    18ee:	03 96       	adiw	r24, 0x03	; 3
    18f0:	98 01       	movw	r18, r16
    18f2:	2d 5f       	subi	r18, 0xFD	; 253
    18f4:	3f 4f       	sbci	r19, 0xFF	; 255
    18f6:	f9 01       	movw	r30, r18
    18f8:	20 81       	ld	r18, Z
    18fa:	24 27       	eor	r18, r20
    18fc:	fc 01       	movw	r30, r24
    18fe:	20 83       	st	Z, r18
		*(ciphertext+4) ^= *roundkeys++;
    1900:	c7 01       	movw	r24, r14
    1902:	7c 01       	movw	r14, r24
    1904:	ff ef       	ldi	r31, 0xFF	; 255
    1906:	ef 1a       	sub	r14, r31
    1908:	ff 0a       	sbc	r15, r31
    190a:	fc 01       	movw	r30, r24
    190c:	40 81       	ld	r20, Z
    190e:	c8 01       	movw	r24, r16
    1910:	04 96       	adiw	r24, 0x04	; 4
    1912:	98 01       	movw	r18, r16
    1914:	2c 5f       	subi	r18, 0xFC	; 252
    1916:	3f 4f       	sbci	r19, 0xFF	; 255
    1918:	f9 01       	movw	r30, r18
    191a:	20 81       	ld	r18, Z
    191c:	24 27       	eor	r18, r20
    191e:	fc 01       	movw	r30, r24
    1920:	20 83       	st	Z, r18
		*(ciphertext+5) ^= *roundkeys++;
    1922:	c7 01       	movw	r24, r14
    1924:	7c 01       	movw	r14, r24
    1926:	ff ef       	ldi	r31, 0xFF	; 255
    1928:	ef 1a       	sub	r14, r31
    192a:	ff 0a       	sbc	r15, r31
    192c:	fc 01       	movw	r30, r24
    192e:	40 81       	ld	r20, Z
    1930:	c8 01       	movw	r24, r16
    1932:	05 96       	adiw	r24, 0x05	; 5
    1934:	98 01       	movw	r18, r16
    1936:	2b 5f       	subi	r18, 0xFB	; 251
    1938:	3f 4f       	sbci	r19, 0xFF	; 255
    193a:	f9 01       	movw	r30, r18
    193c:	20 81       	ld	r18, Z
    193e:	24 27       	eor	r18, r20
    1940:	fc 01       	movw	r30, r24
    1942:	20 83       	st	Z, r18
		*(ciphertext+6) ^= *roundkeys++;
    1944:	c7 01       	movw	r24, r14
    1946:	7c 01       	movw	r14, r24
    1948:	ff ef       	ldi	r31, 0xFF	; 255
    194a:	ef 1a       	sub	r14, r31
    194c:	ff 0a       	sbc	r15, r31
    194e:	fc 01       	movw	r30, r24
    1950:	40 81       	ld	r20, Z
    1952:	c8 01       	movw	r24, r16
    1954:	06 96       	adiw	r24, 0x06	; 6
    1956:	98 01       	movw	r18, r16
    1958:	2a 5f       	subi	r18, 0xFA	; 250
    195a:	3f 4f       	sbci	r19, 0xFF	; 255
    195c:	f9 01       	movw	r30, r18
    195e:	20 81       	ld	r18, Z
    1960:	24 27       	eor	r18, r20
    1962:	fc 01       	movw	r30, r24
    1964:	20 83       	st	Z, r18
		*(ciphertext+7) ^= *roundkeys++;
    1966:	c7 01       	movw	r24, r14
    1968:	7c 01       	movw	r14, r24
    196a:	ff ef       	ldi	r31, 0xFF	; 255
    196c:	ef 1a       	sub	r14, r31
    196e:	ff 0a       	sbc	r15, r31
    1970:	fc 01       	movw	r30, r24
    1972:	40 81       	ld	r20, Z
    1974:	c8 01       	movw	r24, r16
    1976:	07 96       	adiw	r24, 0x07	; 7
    1978:	98 01       	movw	r18, r16
    197a:	29 5f       	subi	r18, 0xF9	; 249
    197c:	3f 4f       	sbci	r19, 0xFF	; 255
    197e:	f9 01       	movw	r30, r18
    1980:	20 81       	ld	r18, Z
    1982:	24 27       	eor	r18, r20
    1984:	fc 01       	movw	r30, r24
    1986:	20 83       	st	Z, r18
		*(ciphertext+8) ^= *roundkeys++;
    1988:	c7 01       	movw	r24, r14
    198a:	7c 01       	movw	r14, r24
    198c:	ff ef       	ldi	r31, 0xFF	; 255
    198e:	ef 1a       	sub	r14, r31
    1990:	ff 0a       	sbc	r15, r31
    1992:	fc 01       	movw	r30, r24
    1994:	40 81       	ld	r20, Z
    1996:	c8 01       	movw	r24, r16
    1998:	08 96       	adiw	r24, 0x08	; 8
    199a:	98 01       	movw	r18, r16
    199c:	28 5f       	subi	r18, 0xF8	; 248
    199e:	3f 4f       	sbci	r19, 0xFF	; 255
    19a0:	f9 01       	movw	r30, r18
    19a2:	20 81       	ld	r18, Z
    19a4:	24 27       	eor	r18, r20
    19a6:	fc 01       	movw	r30, r24
    19a8:	20 83       	st	Z, r18
		*(ciphertext+9) ^= *roundkeys++;
    19aa:	c7 01       	movw	r24, r14
    19ac:	7c 01       	movw	r14, r24
    19ae:	ff ef       	ldi	r31, 0xFF	; 255
    19b0:	ef 1a       	sub	r14, r31
    19b2:	ff 0a       	sbc	r15, r31
    19b4:	fc 01       	movw	r30, r24
    19b6:	40 81       	ld	r20, Z
    19b8:	c8 01       	movw	r24, r16
    19ba:	09 96       	adiw	r24, 0x09	; 9
    19bc:	98 01       	movw	r18, r16
    19be:	27 5f       	subi	r18, 0xF7	; 247
    19c0:	3f 4f       	sbci	r19, 0xFF	; 255
    19c2:	f9 01       	movw	r30, r18
    19c4:	20 81       	ld	r18, Z
    19c6:	24 27       	eor	r18, r20
    19c8:	fc 01       	movw	r30, r24
    19ca:	20 83       	st	Z, r18
		*(ciphertext+10) ^= *roundkeys++;
    19cc:	c7 01       	movw	r24, r14
    19ce:	7c 01       	movw	r14, r24
    19d0:	ff ef       	ldi	r31, 0xFF	; 255
    19d2:	ef 1a       	sub	r14, r31
    19d4:	ff 0a       	sbc	r15, r31
    19d6:	fc 01       	movw	r30, r24
    19d8:	40 81       	ld	r20, Z
    19da:	c8 01       	movw	r24, r16
    19dc:	0a 96       	adiw	r24, 0x0a	; 10
    19de:	98 01       	movw	r18, r16
    19e0:	26 5f       	subi	r18, 0xF6	; 246
    19e2:	3f 4f       	sbci	r19, 0xFF	; 255
    19e4:	f9 01       	movw	r30, r18
    19e6:	20 81       	ld	r18, Z
    19e8:	24 27       	eor	r18, r20
    19ea:	fc 01       	movw	r30, r24
    19ec:	20 83       	st	Z, r18
		*(ciphertext+11) ^= *roundkeys++;
    19ee:	c7 01       	movw	r24, r14
    19f0:	7c 01       	movw	r14, r24
    19f2:	ff ef       	ldi	r31, 0xFF	; 255
    19f4:	ef 1a       	sub	r14, r31
    19f6:	ff 0a       	sbc	r15, r31
    19f8:	fc 01       	movw	r30, r24
    19fa:	40 81       	ld	r20, Z
    19fc:	c8 01       	movw	r24, r16
    19fe:	0b 96       	adiw	r24, 0x0b	; 11
    1a00:	98 01       	movw	r18, r16
    1a02:	25 5f       	subi	r18, 0xF5	; 245
    1a04:	3f 4f       	sbci	r19, 0xFF	; 255
    1a06:	f9 01       	movw	r30, r18
    1a08:	20 81       	ld	r18, Z
    1a0a:	24 27       	eor	r18, r20
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	20 83       	st	Z, r18
		*(ciphertext+12) ^= *roundkeys++;
    1a10:	c7 01       	movw	r24, r14
    1a12:	7c 01       	movw	r14, r24
    1a14:	ff ef       	ldi	r31, 0xFF	; 255
    1a16:	ef 1a       	sub	r14, r31
    1a18:	ff 0a       	sbc	r15, r31
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	40 81       	ld	r20, Z
    1a1e:	c8 01       	movw	r24, r16
    1a20:	0c 96       	adiw	r24, 0x0c	; 12
    1a22:	98 01       	movw	r18, r16
    1a24:	24 5f       	subi	r18, 0xF4	; 244
    1a26:	3f 4f       	sbci	r19, 0xFF	; 255
    1a28:	f9 01       	movw	r30, r18
    1a2a:	20 81       	ld	r18, Z
    1a2c:	24 27       	eor	r18, r20
    1a2e:	fc 01       	movw	r30, r24
    1a30:	20 83       	st	Z, r18
		*(ciphertext+13) ^= *roundkeys++;
    1a32:	c7 01       	movw	r24, r14
    1a34:	7c 01       	movw	r14, r24
    1a36:	ff ef       	ldi	r31, 0xFF	; 255
    1a38:	ef 1a       	sub	r14, r31
    1a3a:	ff 0a       	sbc	r15, r31
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	40 81       	ld	r20, Z
    1a40:	c8 01       	movw	r24, r16
    1a42:	0d 96       	adiw	r24, 0x0d	; 13
    1a44:	98 01       	movw	r18, r16
    1a46:	23 5f       	subi	r18, 0xF3	; 243
    1a48:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4a:	f9 01       	movw	r30, r18
    1a4c:	20 81       	ld	r18, Z
    1a4e:	24 27       	eor	r18, r20
    1a50:	fc 01       	movw	r30, r24
    1a52:	20 83       	st	Z, r18
		*(ciphertext+14) ^= *roundkeys++;
    1a54:	c7 01       	movw	r24, r14
    1a56:	7c 01       	movw	r14, r24
    1a58:	ff ef       	ldi	r31, 0xFF	; 255
    1a5a:	ef 1a       	sub	r14, r31
    1a5c:	ff 0a       	sbc	r15, r31
    1a5e:	fc 01       	movw	r30, r24
    1a60:	40 81       	ld	r20, Z
    1a62:	c8 01       	movw	r24, r16
    1a64:	0e 96       	adiw	r24, 0x0e	; 14
    1a66:	98 01       	movw	r18, r16
    1a68:	22 5f       	subi	r18, 0xF2	; 242
    1a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a6c:	f9 01       	movw	r30, r18
    1a6e:	20 81       	ld	r18, Z
    1a70:	24 27       	eor	r18, r20
    1a72:	fc 01       	movw	r30, r24
    1a74:	20 83       	st	Z, r18
		*(ciphertext+15) ^= *roundkeys++;
    1a76:	c7 01       	movw	r24, r14
    1a78:	7c 01       	movw	r14, r24
    1a7a:	ff ef       	ldi	r31, 0xFF	; 255
    1a7c:	ef 1a       	sub	r14, r31
    1a7e:	ff 0a       	sbc	r15, r31
    1a80:	fc 01       	movw	r30, r24
    1a82:	40 81       	ld	r20, Z
    1a84:	c8 01       	movw	r24, r16
    1a86:	0f 96       	adiw	r24, 0x0f	; 15
    1a88:	98 01       	movw	r18, r16
    1a8a:	21 5f       	subi	r18, 0xF1	; 241
    1a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8e:	f9 01       	movw	r30, r18
    1a90:	20 81       	ld	r18, Z
    1a92:	24 27       	eor	r18, r20
    1a94:	fc 01       	movw	r30, r24
    1a96:	20 83       	st	Z, r18
		
		*(tmp+0) = SBOX[*(ciphertext+0)];
    1a98:	f8 01       	movw	r30, r16
    1a9a:	80 81       	ld	r24, Z
    1a9c:	88 2f       	mov	r24, r24
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	80 50       	subi	r24, 0x00	; 0
    1aa2:	9e 4f       	sbci	r25, 0xFE	; 254
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	80 81       	ld	r24, Z
    1aa8:	8a 83       	std	Y+2, r24	; 0x02
		*(tmp+1) = SBOX[*(ciphertext+1)];
    1aaa:	c8 01       	movw	r24, r16
    1aac:	01 96       	adiw	r24, 0x01	; 1
    1aae:	fc 01       	movw	r30, r24
    1ab0:	80 81       	ld	r24, Z
    1ab2:	88 2f       	mov	r24, r24
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	80 50       	subi	r24, 0x00	; 0
    1ab8:	9e 4f       	sbci	r25, 0xFE	; 254
    1aba:	fc 01       	movw	r30, r24
    1abc:	80 81       	ld	r24, Z
    1abe:	8b 83       	std	Y+3, r24	; 0x03
		*(tmp+2) = SBOX[*(ciphertext+2)];
    1ac0:	c8 01       	movw	r24, r16
    1ac2:	02 96       	adiw	r24, 0x02	; 2
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	80 81       	ld	r24, Z
    1ac8:	88 2f       	mov	r24, r24
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	80 50       	subi	r24, 0x00	; 0
    1ace:	9e 4f       	sbci	r25, 0xFE	; 254
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	80 81       	ld	r24, Z
    1ad4:	8c 83       	std	Y+4, r24	; 0x04
		*(tmp+3) = SBOX[*(ciphertext+3)];
    1ad6:	c8 01       	movw	r24, r16
    1ad8:	03 96       	adiw	r24, 0x03	; 3
    1ada:	fc 01       	movw	r30, r24
    1adc:	80 81       	ld	r24, Z
    1ade:	88 2f       	mov	r24, r24
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	80 50       	subi	r24, 0x00	; 0
    1ae4:	9e 4f       	sbci	r25, 0xFE	; 254
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	80 81       	ld	r24, Z
    1aea:	8d 83       	std	Y+5, r24	; 0x05
		*(tmp+4) = SBOX[*(ciphertext+4)];
    1aec:	c8 01       	movw	r24, r16
    1aee:	04 96       	adiw	r24, 0x04	; 4
    1af0:	fc 01       	movw	r30, r24
    1af2:	80 81       	ld	r24, Z
    1af4:	88 2f       	mov	r24, r24
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	80 50       	subi	r24, 0x00	; 0
    1afa:	9e 4f       	sbci	r25, 0xFE	; 254
    1afc:	fc 01       	movw	r30, r24
    1afe:	80 81       	ld	r24, Z
    1b00:	8e 83       	std	Y+6, r24	; 0x06
		*(tmp+5) = SBOX[*(ciphertext+5)];
    1b02:	c8 01       	movw	r24, r16
    1b04:	05 96       	adiw	r24, 0x05	; 5
    1b06:	fc 01       	movw	r30, r24
    1b08:	80 81       	ld	r24, Z
    1b0a:	88 2f       	mov	r24, r24
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	80 50       	subi	r24, 0x00	; 0
    1b10:	9e 4f       	sbci	r25, 0xFE	; 254
    1b12:	fc 01       	movw	r30, r24
    1b14:	80 81       	ld	r24, Z
    1b16:	8f 83       	std	Y+7, r24	; 0x07
		*(tmp+6) = SBOX[*(ciphertext+6)];
    1b18:	c8 01       	movw	r24, r16
    1b1a:	06 96       	adiw	r24, 0x06	; 6
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	80 81       	ld	r24, Z
    1b20:	88 2f       	mov	r24, r24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	80 50       	subi	r24, 0x00	; 0
    1b26:	9e 4f       	sbci	r25, 0xFE	; 254
    1b28:	fc 01       	movw	r30, r24
    1b2a:	80 81       	ld	r24, Z
    1b2c:	88 87       	std	Y+8, r24	; 0x08
		*(tmp+7) = SBOX[*(ciphertext+7)];
    1b2e:	c8 01       	movw	r24, r16
    1b30:	07 96       	adiw	r24, 0x07	; 7
    1b32:	fc 01       	movw	r30, r24
    1b34:	80 81       	ld	r24, Z
    1b36:	88 2f       	mov	r24, r24
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	80 50       	subi	r24, 0x00	; 0
    1b3c:	9e 4f       	sbci	r25, 0xFE	; 254
    1b3e:	fc 01       	movw	r30, r24
    1b40:	80 81       	ld	r24, Z
    1b42:	89 87       	std	Y+9, r24	; 0x09
		*(tmp+8) = SBOX[*(ciphertext+8)];
    1b44:	c8 01       	movw	r24, r16
    1b46:	08 96       	adiw	r24, 0x08	; 8
    1b48:	fc 01       	movw	r30, r24
    1b4a:	80 81       	ld	r24, Z
    1b4c:	88 2f       	mov	r24, r24
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	80 50       	subi	r24, 0x00	; 0
    1b52:	9e 4f       	sbci	r25, 0xFE	; 254
    1b54:	fc 01       	movw	r30, r24
    1b56:	80 81       	ld	r24, Z
    1b58:	8a 87       	std	Y+10, r24	; 0x0a
		*(tmp+9) = SBOX[*(ciphertext+9)];
    1b5a:	c8 01       	movw	r24, r16
    1b5c:	09 96       	adiw	r24, 0x09	; 9
    1b5e:	fc 01       	movw	r30, r24
    1b60:	80 81       	ld	r24, Z
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	80 50       	subi	r24, 0x00	; 0
    1b68:	9e 4f       	sbci	r25, 0xFE	; 254
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	80 81       	ld	r24, Z
    1b6e:	8b 87       	std	Y+11, r24	; 0x0b
		*(tmp+10) = SBOX[*(ciphertext+10)];
    1b70:	c8 01       	movw	r24, r16
    1b72:	0a 96       	adiw	r24, 0x0a	; 10
    1b74:	fc 01       	movw	r30, r24
    1b76:	80 81       	ld	r24, Z
    1b78:	88 2f       	mov	r24, r24
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	80 50       	subi	r24, 0x00	; 0
    1b7e:	9e 4f       	sbci	r25, 0xFE	; 254
    1b80:	fc 01       	movw	r30, r24
    1b82:	80 81       	ld	r24, Z
    1b84:	8c 87       	std	Y+12, r24	; 0x0c
		*(tmp+11) = SBOX[*(ciphertext+11)];
    1b86:	c8 01       	movw	r24, r16
    1b88:	0b 96       	adiw	r24, 0x0b	; 11
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	80 81       	ld	r24, Z
    1b8e:	88 2f       	mov	r24, r24
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	80 50       	subi	r24, 0x00	; 0
    1b94:	9e 4f       	sbci	r25, 0xFE	; 254
    1b96:	fc 01       	movw	r30, r24
    1b98:	80 81       	ld	r24, Z
    1b9a:	8d 87       	std	Y+13, r24	; 0x0d
		*(tmp+12) = SBOX[*(ciphertext+12)];
    1b9c:	c8 01       	movw	r24, r16
    1b9e:	0c 96       	adiw	r24, 0x0c	; 12
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	80 81       	ld	r24, Z
    1ba4:	88 2f       	mov	r24, r24
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	80 50       	subi	r24, 0x00	; 0
    1baa:	9e 4f       	sbci	r25, 0xFE	; 254
    1bac:	fc 01       	movw	r30, r24
    1bae:	80 81       	ld	r24, Z
    1bb0:	8e 87       	std	Y+14, r24	; 0x0e
		*(tmp+13) = SBOX[*(ciphertext+13)];
    1bb2:	c8 01       	movw	r24, r16
    1bb4:	0d 96       	adiw	r24, 0x0d	; 13
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	80 81       	ld	r24, Z
    1bba:	88 2f       	mov	r24, r24
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	80 50       	subi	r24, 0x00	; 0
    1bc0:	9e 4f       	sbci	r25, 0xFE	; 254
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	80 81       	ld	r24, Z
    1bc6:	8f 87       	std	Y+15, r24	; 0x0f
		*(tmp+14) = SBOX[*(ciphertext+14)];
    1bc8:	c8 01       	movw	r24, r16
    1bca:	0e 96       	adiw	r24, 0x0e	; 14
    1bcc:	fc 01       	movw	r30, r24
    1bce:	80 81       	ld	r24, Z
    1bd0:	88 2f       	mov	r24, r24
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	80 50       	subi	r24, 0x00	; 0
    1bd6:	9e 4f       	sbci	r25, 0xFE	; 254
    1bd8:	fc 01       	movw	r30, r24
    1bda:	80 81       	ld	r24, Z
    1bdc:	88 8b       	std	Y+16, r24	; 0x10
		*(tmp+15) = SBOX[*(ciphertext+15)];
    1bde:	c8 01       	movw	r24, r16
    1be0:	0f 96       	adiw	r24, 0x0f	; 15
    1be2:	fc 01       	movw	r30, r24
    1be4:	80 81       	ld	r24, Z
    1be6:	88 2f       	mov	r24, r24
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	80 50       	subi	r24, 0x00	; 0
    1bec:	9e 4f       	sbci	r25, 0xFE	; 254
    1bee:	fc 01       	movw	r30, r24
    1bf0:	80 81       	ld	r24, Z
    1bf2:	89 8b       	std	Y+17, r24	; 0x11
        shift_rows(tmp);
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	02 96       	adiw	r24, 0x02	; 2
    1bf8:	0e 94 18 09 	call	0x1230	; 0x1230 <shift_rows>
		
		t = tmp[0] ^ tmp[1] ^ tmp[2] ^ tmp[3];
    1bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	98 27       	eor	r25, r24
    1c02:	8c 81       	ldd	r24, Y+4	; 0x04
    1c04:	98 27       	eor	r25, r24
    1c06:	8d 81       	ldd	r24, Y+5	; 0x05
    1c08:	89 27       	eor	r24, r25
    1c0a:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[0]   = mul2(tmp[0]   ^ tmp[1]) ^ tmp[0]   ^ t;
    1c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	89 27       	eor	r24, r25
    1c12:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1c16:	98 2f       	mov	r25, r24
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	98 27       	eor	r25, r24
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	89 27       	eor	r24, r25
    1c20:	f8 01       	movw	r30, r16
    1c22:	80 83       	st	Z, r24
        ciphertext[1] = mul2(tmp[1] ^ tmp[2]) ^ tmp[1] ^ t;
    1c24:	68 01       	movw	r12, r16
    1c26:	ff ef       	ldi	r31, 0xFF	; 255
    1c28:	cf 1a       	sub	r12, r31
    1c2a:	df 0a       	sbc	r13, r31
    1c2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c30:	89 27       	eor	r24, r25
    1c32:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1c36:	98 2f       	mov	r25, r24
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	98 27       	eor	r25, r24
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	89 27       	eor	r24, r25
    1c40:	f6 01       	movw	r30, r12
    1c42:	80 83       	st	Z, r24
        ciphertext[2] = mul2(tmp[2] ^ tmp[3]) ^ tmp[2] ^ t;
    1c44:	68 01       	movw	r12, r16
    1c46:	f2 e0       	ldi	r31, 0x02	; 2
    1c48:	cf 0e       	add	r12, r31
    1c4a:	d1 1c       	adc	r13, r1
    1c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c50:	89 27       	eor	r24, r25
    1c52:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1c56:	98 2f       	mov	r25, r24
    1c58:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5a:	98 27       	eor	r25, r24
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	89 27       	eor	r24, r25
    1c60:	f6 01       	movw	r30, r12
    1c62:	80 83       	st	Z, r24
        ciphertext[3] = mul2(tmp[3] ^ tmp[0]  ) ^ tmp[3] ^ t;
    1c64:	68 01       	movw	r12, r16
    1c66:	f3 e0       	ldi	r31, 0x03	; 3
    1c68:	cf 0e       	add	r12, r31
    1c6a:	d1 1c       	adc	r13, r1
    1c6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	89 27       	eor	r24, r25
    1c72:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1c76:	98 2f       	mov	r25, r24
    1c78:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7a:	98 27       	eor	r25, r24
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	89 27       	eor	r24, r25
    1c80:	f6 01       	movw	r30, r12
    1c82:	80 83       	st	Z, r24
			
		t = tmp[4] ^ tmp[5] ^ tmp[6] ^ tmp[7];
    1c84:	9e 81       	ldd	r25, Y+6	; 0x06
    1c86:	8f 81       	ldd	r24, Y+7	; 0x07
    1c88:	98 27       	eor	r25, r24
    1c8a:	88 85       	ldd	r24, Y+8	; 0x08
    1c8c:	98 27       	eor	r25, r24
    1c8e:	89 85       	ldd	r24, Y+9	; 0x09
    1c90:	89 27       	eor	r24, r25
    1c92:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[4]   = mul2(tmp[4]   ^ tmp[5]) ^ tmp[4]   ^ t;
    1c94:	68 01       	movw	r12, r16
    1c96:	f4 e0       	ldi	r31, 0x04	; 4
    1c98:	cf 0e       	add	r12, r31
    1c9a:	d1 1c       	adc	r13, r1
    1c9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca0:	89 27       	eor	r24, r25
    1ca2:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1ca6:	98 2f       	mov	r25, r24
    1ca8:	8e 81       	ldd	r24, Y+6	; 0x06
    1caa:	98 27       	eor	r25, r24
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	89 27       	eor	r24, r25
    1cb0:	f6 01       	movw	r30, r12
    1cb2:	80 83       	st	Z, r24
        ciphertext[5] = mul2(tmp[5] ^ tmp[6]) ^ tmp[5] ^ t;
    1cb4:	68 01       	movw	r12, r16
    1cb6:	f5 e0       	ldi	r31, 0x05	; 5
    1cb8:	cf 0e       	add	r12, r31
    1cba:	d1 1c       	adc	r13, r1
    1cbc:	9f 81       	ldd	r25, Y+7	; 0x07
    1cbe:	88 85       	ldd	r24, Y+8	; 0x08
    1cc0:	89 27       	eor	r24, r25
    1cc2:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1cc6:	98 2f       	mov	r25, r24
    1cc8:	8f 81       	ldd	r24, Y+7	; 0x07
    1cca:	98 27       	eor	r25, r24
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	89 27       	eor	r24, r25
    1cd0:	f6 01       	movw	r30, r12
    1cd2:	80 83       	st	Z, r24
        ciphertext[6] = mul2(tmp[6] ^ tmp[7]) ^ tmp[6] ^ t;
    1cd4:	68 01       	movw	r12, r16
    1cd6:	f6 e0       	ldi	r31, 0x06	; 6
    1cd8:	cf 0e       	add	r12, r31
    1cda:	d1 1c       	adc	r13, r1
    1cdc:	98 85       	ldd	r25, Y+8	; 0x08
    1cde:	89 85       	ldd	r24, Y+9	; 0x09
    1ce0:	89 27       	eor	r24, r25
    1ce2:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1ce6:	98 2f       	mov	r25, r24
    1ce8:	88 85       	ldd	r24, Y+8	; 0x08
    1cea:	98 27       	eor	r25, r24
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	89 27       	eor	r24, r25
    1cf0:	f6 01       	movw	r30, r12
    1cf2:	80 83       	st	Z, r24
        ciphertext[7] = mul2(tmp[7] ^ tmp[4]  ) ^ tmp[7] ^ t;
    1cf4:	68 01       	movw	r12, r16
    1cf6:	f7 e0       	ldi	r31, 0x07	; 7
    1cf8:	cf 0e       	add	r12, r31
    1cfa:	d1 1c       	adc	r13, r1
    1cfc:	99 85       	ldd	r25, Y+9	; 0x09
    1cfe:	8e 81       	ldd	r24, Y+6	; 0x06
    1d00:	89 27       	eor	r24, r25
    1d02:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1d06:	98 2f       	mov	r25, r24
    1d08:	89 85       	ldd	r24, Y+9	; 0x09
    1d0a:	98 27       	eor	r25, r24
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	89 27       	eor	r24, r25
    1d10:	f6 01       	movw	r30, r12
    1d12:	80 83       	st	Z, r24
			
		t = tmp[8] ^ tmp[9] ^ tmp[10] ^ tmp[11];
    1d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d16:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d18:	98 27       	eor	r25, r24
    1d1a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d1c:	98 27       	eor	r25, r24
    1d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d20:	89 27       	eor	r24, r25
    1d22:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[8]   = mul2(tmp[8]   ^ tmp[9]) ^ tmp[8]   ^ t;
    1d24:	68 01       	movw	r12, r16
    1d26:	f8 e0       	ldi	r31, 0x08	; 8
    1d28:	cf 0e       	add	r12, r31
    1d2a:	d1 1c       	adc	r13, r1
    1d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d30:	89 27       	eor	r24, r25
    1d32:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1d36:	98 2f       	mov	r25, r24
    1d38:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d3a:	98 27       	eor	r25, r24
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	89 27       	eor	r24, r25
    1d40:	f6 01       	movw	r30, r12
    1d42:	80 83       	st	Z, r24
        ciphertext[9] = mul2(tmp[9] ^ tmp[10]) ^ tmp[9] ^ t;
    1d44:	68 01       	movw	r12, r16
    1d46:	f9 e0       	ldi	r31, 0x09	; 9
    1d48:	cf 0e       	add	r12, r31
    1d4a:	d1 1c       	adc	r13, r1
    1d4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d50:	89 27       	eor	r24, r25
    1d52:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1d56:	98 2f       	mov	r25, r24
    1d58:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d5a:	98 27       	eor	r25, r24
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	89 27       	eor	r24, r25
    1d60:	f6 01       	movw	r30, r12
    1d62:	80 83       	st	Z, r24
        ciphertext[10] = mul2(tmp[10] ^ tmp[11]) ^ tmp[10] ^ t;
    1d64:	68 01       	movw	r12, r16
    1d66:	fa e0       	ldi	r31, 0x0A	; 10
    1d68:	cf 0e       	add	r12, r31
    1d6a:	d1 1c       	adc	r13, r1
    1d6c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d70:	89 27       	eor	r24, r25
    1d72:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1d76:	98 2f       	mov	r25, r24
    1d78:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d7a:	98 27       	eor	r25, r24
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	89 27       	eor	r24, r25
    1d80:	f6 01       	movw	r30, r12
    1d82:	80 83       	st	Z, r24
        ciphertext[11] = mul2(tmp[11] ^ tmp[8]  ) ^ tmp[11] ^ t;
    1d84:	68 01       	movw	r12, r16
    1d86:	fb e0       	ldi	r31, 0x0B	; 11
    1d88:	cf 0e       	add	r12, r31
    1d8a:	d1 1c       	adc	r13, r1
    1d8c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d90:	89 27       	eor	r24, r25
    1d92:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1d96:	98 2f       	mov	r25, r24
    1d98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9a:	98 27       	eor	r25, r24
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	89 27       	eor	r24, r25
    1da0:	f6 01       	movw	r30, r12
    1da2:	80 83       	st	Z, r24
			
		t = tmp[12] ^ tmp[13] ^ tmp[14] ^ tmp[15];
    1da4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1da8:	98 27       	eor	r25, r24
    1daa:	88 89       	ldd	r24, Y+16	; 0x10
    1dac:	98 27       	eor	r25, r24
    1dae:	89 89       	ldd	r24, Y+17	; 0x11
    1db0:	89 27       	eor	r24, r25
    1db2:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[12]   = mul2(tmp[12]   ^ tmp[13]) ^ tmp[12]   ^ t;
    1db4:	68 01       	movw	r12, r16
    1db6:	fc e0       	ldi	r31, 0x0C	; 12
    1db8:	cf 0e       	add	r12, r31
    1dba:	d1 1c       	adc	r13, r1
    1dbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dc0:	89 27       	eor	r24, r25
    1dc2:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1dc6:	98 2f       	mov	r25, r24
    1dc8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dca:	98 27       	eor	r25, r24
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	89 27       	eor	r24, r25
    1dd0:	f6 01       	movw	r30, r12
    1dd2:	80 83       	st	Z, r24
        ciphertext[13] = mul2(tmp[13] ^ tmp[14]) ^ tmp[13] ^ t;
    1dd4:	68 01       	movw	r12, r16
    1dd6:	fd e0       	ldi	r31, 0x0D	; 13
    1dd8:	cf 0e       	add	r12, r31
    1dda:	d1 1c       	adc	r13, r1
    1ddc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dde:	88 89       	ldd	r24, Y+16	; 0x10
    1de0:	89 27       	eor	r24, r25
    1de2:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1de6:	98 2f       	mov	r25, r24
    1de8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dea:	98 27       	eor	r25, r24
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	89 27       	eor	r24, r25
    1df0:	f6 01       	movw	r30, r12
    1df2:	80 83       	st	Z, r24
        ciphertext[14] = mul2(tmp[14] ^ tmp[15]) ^ tmp[14] ^ t;
    1df4:	68 01       	movw	r12, r16
    1df6:	fe e0       	ldi	r31, 0x0E	; 14
    1df8:	cf 0e       	add	r12, r31
    1dfa:	d1 1c       	adc	r13, r1
    1dfc:	98 89       	ldd	r25, Y+16	; 0x10
    1dfe:	89 89       	ldd	r24, Y+17	; 0x11
    1e00:	89 27       	eor	r24, r25
    1e02:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1e06:	98 2f       	mov	r25, r24
    1e08:	88 89       	ldd	r24, Y+16	; 0x10
    1e0a:	98 27       	eor	r25, r24
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	89 27       	eor	r24, r25
    1e10:	f6 01       	movw	r30, r12
    1e12:	80 83       	st	Z, r24
        ciphertext[15] = mul2(tmp[15] ^ tmp[12]  ) ^ tmp[15] ^ t;
    1e14:	68 01       	movw	r12, r16
    1e16:	ff e0       	ldi	r31, 0x0F	; 15
    1e18:	cf 0e       	add	r12, r31
    1e1a:	d1 1c       	adc	r13, r1
    1e1c:	99 89       	ldd	r25, Y+17	; 0x11
    1e1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e20:	89 27       	eor	r24, r25
    1e22:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    1e26:	98 2f       	mov	r25, r24
    1e28:	89 89       	ldd	r24, Y+17	; 0x11
    1e2a:	98 27       	eor	r25, r24
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	89 27       	eor	r24, r25
    1e30:	f6 01       	movw	r30, r12
    1e32:	80 83       	st	Z, r24
		
		*(ciphertext+0) ^= *roundkeys++;
    1e34:	c7 01       	movw	r24, r14
    1e36:	7c 01       	movw	r14, r24
    1e38:	ff ef       	ldi	r31, 0xFF	; 255
    1e3a:	ef 1a       	sub	r14, r31
    1e3c:	ff 0a       	sbc	r15, r31
    1e3e:	fc 01       	movw	r30, r24
    1e40:	80 81       	ld	r24, Z
    1e42:	f8 01       	movw	r30, r16
    1e44:	90 81       	ld	r25, Z
    1e46:	89 27       	eor	r24, r25
    1e48:	f8 01       	movw	r30, r16
    1e4a:	80 83       	st	Z, r24
		*(ciphertext+1) ^= *roundkeys++;
    1e4c:	c7 01       	movw	r24, r14
    1e4e:	7c 01       	movw	r14, r24
    1e50:	ff ef       	ldi	r31, 0xFF	; 255
    1e52:	ef 1a       	sub	r14, r31
    1e54:	ff 0a       	sbc	r15, r31
    1e56:	fc 01       	movw	r30, r24
    1e58:	40 81       	ld	r20, Z
    1e5a:	c8 01       	movw	r24, r16
    1e5c:	01 96       	adiw	r24, 0x01	; 1
    1e5e:	98 01       	movw	r18, r16
    1e60:	2f 5f       	subi	r18, 0xFF	; 255
    1e62:	3f 4f       	sbci	r19, 0xFF	; 255
    1e64:	f9 01       	movw	r30, r18
    1e66:	20 81       	ld	r18, Z
    1e68:	24 27       	eor	r18, r20
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	20 83       	st	Z, r18
		*(ciphertext+2) ^= *roundkeys++;
    1e6e:	c7 01       	movw	r24, r14
    1e70:	7c 01       	movw	r14, r24
    1e72:	ff ef       	ldi	r31, 0xFF	; 255
    1e74:	ef 1a       	sub	r14, r31
    1e76:	ff 0a       	sbc	r15, r31
    1e78:	fc 01       	movw	r30, r24
    1e7a:	40 81       	ld	r20, Z
    1e7c:	c8 01       	movw	r24, r16
    1e7e:	02 96       	adiw	r24, 0x02	; 2
    1e80:	98 01       	movw	r18, r16
    1e82:	2e 5f       	subi	r18, 0xFE	; 254
    1e84:	3f 4f       	sbci	r19, 0xFF	; 255
    1e86:	f9 01       	movw	r30, r18
    1e88:	20 81       	ld	r18, Z
    1e8a:	24 27       	eor	r18, r20
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	20 83       	st	Z, r18
		*(ciphertext+3) ^= *roundkeys++;
    1e90:	c7 01       	movw	r24, r14
    1e92:	7c 01       	movw	r14, r24
    1e94:	ff ef       	ldi	r31, 0xFF	; 255
    1e96:	ef 1a       	sub	r14, r31
    1e98:	ff 0a       	sbc	r15, r31
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	40 81       	ld	r20, Z
    1e9e:	c8 01       	movw	r24, r16
    1ea0:	03 96       	adiw	r24, 0x03	; 3
    1ea2:	98 01       	movw	r18, r16
    1ea4:	2d 5f       	subi	r18, 0xFD	; 253
    1ea6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea8:	f9 01       	movw	r30, r18
    1eaa:	20 81       	ld	r18, Z
    1eac:	24 27       	eor	r18, r20
    1eae:	fc 01       	movw	r30, r24
    1eb0:	20 83       	st	Z, r18
		*(ciphertext+4) ^= *roundkeys++;
    1eb2:	c7 01       	movw	r24, r14
    1eb4:	7c 01       	movw	r14, r24
    1eb6:	ff ef       	ldi	r31, 0xFF	; 255
    1eb8:	ef 1a       	sub	r14, r31
    1eba:	ff 0a       	sbc	r15, r31
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	40 81       	ld	r20, Z
    1ec0:	c8 01       	movw	r24, r16
    1ec2:	04 96       	adiw	r24, 0x04	; 4
    1ec4:	98 01       	movw	r18, r16
    1ec6:	2c 5f       	subi	r18, 0xFC	; 252
    1ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eca:	f9 01       	movw	r30, r18
    1ecc:	20 81       	ld	r18, Z
    1ece:	24 27       	eor	r18, r20
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	20 83       	st	Z, r18
		*(ciphertext+5) ^= *roundkeys++;
    1ed4:	c7 01       	movw	r24, r14
    1ed6:	7c 01       	movw	r14, r24
    1ed8:	ff ef       	ldi	r31, 0xFF	; 255
    1eda:	ef 1a       	sub	r14, r31
    1edc:	ff 0a       	sbc	r15, r31
    1ede:	fc 01       	movw	r30, r24
    1ee0:	40 81       	ld	r20, Z
    1ee2:	c8 01       	movw	r24, r16
    1ee4:	05 96       	adiw	r24, 0x05	; 5
    1ee6:	98 01       	movw	r18, r16
    1ee8:	2b 5f       	subi	r18, 0xFB	; 251
    1eea:	3f 4f       	sbci	r19, 0xFF	; 255
    1eec:	f9 01       	movw	r30, r18
    1eee:	20 81       	ld	r18, Z
    1ef0:	24 27       	eor	r18, r20
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	20 83       	st	Z, r18
		*(ciphertext+6) ^= *roundkeys++;
    1ef6:	c7 01       	movw	r24, r14
    1ef8:	7c 01       	movw	r14, r24
    1efa:	ff ef       	ldi	r31, 0xFF	; 255
    1efc:	ef 1a       	sub	r14, r31
    1efe:	ff 0a       	sbc	r15, r31
    1f00:	fc 01       	movw	r30, r24
    1f02:	40 81       	ld	r20, Z
    1f04:	c8 01       	movw	r24, r16
    1f06:	06 96       	adiw	r24, 0x06	; 6
    1f08:	98 01       	movw	r18, r16
    1f0a:	2a 5f       	subi	r18, 0xFA	; 250
    1f0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0e:	f9 01       	movw	r30, r18
    1f10:	20 81       	ld	r18, Z
    1f12:	24 27       	eor	r18, r20
    1f14:	fc 01       	movw	r30, r24
    1f16:	20 83       	st	Z, r18
		*(ciphertext+7) ^= *roundkeys++;
    1f18:	c7 01       	movw	r24, r14
    1f1a:	7c 01       	movw	r14, r24
    1f1c:	ff ef       	ldi	r31, 0xFF	; 255
    1f1e:	ef 1a       	sub	r14, r31
    1f20:	ff 0a       	sbc	r15, r31
    1f22:	fc 01       	movw	r30, r24
    1f24:	40 81       	ld	r20, Z
    1f26:	c8 01       	movw	r24, r16
    1f28:	07 96       	adiw	r24, 0x07	; 7
    1f2a:	98 01       	movw	r18, r16
    1f2c:	29 5f       	subi	r18, 0xF9	; 249
    1f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f30:	f9 01       	movw	r30, r18
    1f32:	20 81       	ld	r18, Z
    1f34:	24 27       	eor	r18, r20
    1f36:	fc 01       	movw	r30, r24
    1f38:	20 83       	st	Z, r18
		*(ciphertext+8) ^= *roundkeys++;
    1f3a:	c7 01       	movw	r24, r14
    1f3c:	7c 01       	movw	r14, r24
    1f3e:	ff ef       	ldi	r31, 0xFF	; 255
    1f40:	ef 1a       	sub	r14, r31
    1f42:	ff 0a       	sbc	r15, r31
    1f44:	fc 01       	movw	r30, r24
    1f46:	40 81       	ld	r20, Z
    1f48:	c8 01       	movw	r24, r16
    1f4a:	08 96       	adiw	r24, 0x08	; 8
    1f4c:	98 01       	movw	r18, r16
    1f4e:	28 5f       	subi	r18, 0xF8	; 248
    1f50:	3f 4f       	sbci	r19, 0xFF	; 255
    1f52:	f9 01       	movw	r30, r18
    1f54:	20 81       	ld	r18, Z
    1f56:	24 27       	eor	r18, r20
    1f58:	fc 01       	movw	r30, r24
    1f5a:	20 83       	st	Z, r18
		*(ciphertext+9) ^= *roundkeys++;
    1f5c:	c7 01       	movw	r24, r14
    1f5e:	7c 01       	movw	r14, r24
    1f60:	ff ef       	ldi	r31, 0xFF	; 255
    1f62:	ef 1a       	sub	r14, r31
    1f64:	ff 0a       	sbc	r15, r31
    1f66:	fc 01       	movw	r30, r24
    1f68:	40 81       	ld	r20, Z
    1f6a:	c8 01       	movw	r24, r16
    1f6c:	09 96       	adiw	r24, 0x09	; 9
    1f6e:	98 01       	movw	r18, r16
    1f70:	27 5f       	subi	r18, 0xF7	; 247
    1f72:	3f 4f       	sbci	r19, 0xFF	; 255
    1f74:	f9 01       	movw	r30, r18
    1f76:	20 81       	ld	r18, Z
    1f78:	24 27       	eor	r18, r20
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	20 83       	st	Z, r18
		*(ciphertext+10) ^= *roundkeys++;
    1f7e:	c7 01       	movw	r24, r14
    1f80:	7c 01       	movw	r14, r24
    1f82:	ff ef       	ldi	r31, 0xFF	; 255
    1f84:	ef 1a       	sub	r14, r31
    1f86:	ff 0a       	sbc	r15, r31
    1f88:	fc 01       	movw	r30, r24
    1f8a:	40 81       	ld	r20, Z
    1f8c:	c8 01       	movw	r24, r16
    1f8e:	0a 96       	adiw	r24, 0x0a	; 10
    1f90:	98 01       	movw	r18, r16
    1f92:	26 5f       	subi	r18, 0xF6	; 246
    1f94:	3f 4f       	sbci	r19, 0xFF	; 255
    1f96:	f9 01       	movw	r30, r18
    1f98:	20 81       	ld	r18, Z
    1f9a:	24 27       	eor	r18, r20
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	20 83       	st	Z, r18
		*(ciphertext+11) ^= *roundkeys++;
    1fa0:	c7 01       	movw	r24, r14
    1fa2:	7c 01       	movw	r14, r24
    1fa4:	ff ef       	ldi	r31, 0xFF	; 255
    1fa6:	ef 1a       	sub	r14, r31
    1fa8:	ff 0a       	sbc	r15, r31
    1faa:	fc 01       	movw	r30, r24
    1fac:	40 81       	ld	r20, Z
    1fae:	c8 01       	movw	r24, r16
    1fb0:	0b 96       	adiw	r24, 0x0b	; 11
    1fb2:	98 01       	movw	r18, r16
    1fb4:	25 5f       	subi	r18, 0xF5	; 245
    1fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb8:	f9 01       	movw	r30, r18
    1fba:	20 81       	ld	r18, Z
    1fbc:	24 27       	eor	r18, r20
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	20 83       	st	Z, r18
		*(ciphertext+12) ^= *roundkeys++;
    1fc2:	c7 01       	movw	r24, r14
    1fc4:	7c 01       	movw	r14, r24
    1fc6:	ff ef       	ldi	r31, 0xFF	; 255
    1fc8:	ef 1a       	sub	r14, r31
    1fca:	ff 0a       	sbc	r15, r31
    1fcc:	fc 01       	movw	r30, r24
    1fce:	40 81       	ld	r20, Z
    1fd0:	c8 01       	movw	r24, r16
    1fd2:	0c 96       	adiw	r24, 0x0c	; 12
    1fd4:	98 01       	movw	r18, r16
    1fd6:	24 5f       	subi	r18, 0xF4	; 244
    1fd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fda:	f9 01       	movw	r30, r18
    1fdc:	20 81       	ld	r18, Z
    1fde:	24 27       	eor	r18, r20
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	20 83       	st	Z, r18
		*(ciphertext+13) ^= *roundkeys++;
    1fe4:	c7 01       	movw	r24, r14
    1fe6:	7c 01       	movw	r14, r24
    1fe8:	ff ef       	ldi	r31, 0xFF	; 255
    1fea:	ef 1a       	sub	r14, r31
    1fec:	ff 0a       	sbc	r15, r31
    1fee:	fc 01       	movw	r30, r24
    1ff0:	40 81       	ld	r20, Z
    1ff2:	c8 01       	movw	r24, r16
    1ff4:	0d 96       	adiw	r24, 0x0d	; 13
    1ff6:	98 01       	movw	r18, r16
    1ff8:	23 5f       	subi	r18, 0xF3	; 243
    1ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    1ffc:	f9 01       	movw	r30, r18
    1ffe:	20 81       	ld	r18, Z
    2000:	24 27       	eor	r18, r20
    2002:	fc 01       	movw	r30, r24
    2004:	20 83       	st	Z, r18
		*(ciphertext+14) ^= *roundkeys++;
    2006:	c7 01       	movw	r24, r14
    2008:	7c 01       	movw	r14, r24
    200a:	ff ef       	ldi	r31, 0xFF	; 255
    200c:	ef 1a       	sub	r14, r31
    200e:	ff 0a       	sbc	r15, r31
    2010:	fc 01       	movw	r30, r24
    2012:	40 81       	ld	r20, Z
    2014:	c8 01       	movw	r24, r16
    2016:	0e 96       	adiw	r24, 0x0e	; 14
    2018:	98 01       	movw	r18, r16
    201a:	22 5f       	subi	r18, 0xF2	; 242
    201c:	3f 4f       	sbci	r19, 0xFF	; 255
    201e:	f9 01       	movw	r30, r18
    2020:	20 81       	ld	r18, Z
    2022:	24 27       	eor	r18, r20
    2024:	fc 01       	movw	r30, r24
    2026:	20 83       	st	Z, r18
		*(ciphertext+15) ^= *roundkeys++;
    2028:	c7 01       	movw	r24, r14
    202a:	7c 01       	movw	r14, r24
    202c:	ff ef       	ldi	r31, 0xFF	; 255
    202e:	ef 1a       	sub	r14, r31
    2030:	ff 0a       	sbc	r15, r31
    2032:	fc 01       	movw	r30, r24
    2034:	40 81       	ld	r20, Z
    2036:	c8 01       	movw	r24, r16
    2038:	0f 96       	adiw	r24, 0x0f	; 15
    203a:	98 01       	movw	r18, r16
    203c:	21 5f       	subi	r18, 0xF1	; 241
    203e:	3f 4f       	sbci	r19, 0xFF	; 255
    2040:	f9 01       	movw	r30, r18
    2042:	20 81       	ld	r18, Z
    2044:	24 27       	eor	r18, r20
    2046:	fc 01       	movw	r30, r24
    2048:	20 83       	st	Z, r18
		
		*(tmp+0) = SBOX[*(ciphertext+0)];
    204a:	f8 01       	movw	r30, r16
    204c:	80 81       	ld	r24, Z
    204e:	88 2f       	mov	r24, r24
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	80 50       	subi	r24, 0x00	; 0
    2054:	9e 4f       	sbci	r25, 0xFE	; 254
    2056:	fc 01       	movw	r30, r24
    2058:	80 81       	ld	r24, Z
    205a:	8a 83       	std	Y+2, r24	; 0x02
		*(tmp+1) = SBOX[*(ciphertext+1)];
    205c:	c8 01       	movw	r24, r16
    205e:	01 96       	adiw	r24, 0x01	; 1
    2060:	fc 01       	movw	r30, r24
    2062:	80 81       	ld	r24, Z
    2064:	88 2f       	mov	r24, r24
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	80 50       	subi	r24, 0x00	; 0
    206a:	9e 4f       	sbci	r25, 0xFE	; 254
    206c:	fc 01       	movw	r30, r24
    206e:	80 81       	ld	r24, Z
    2070:	8b 83       	std	Y+3, r24	; 0x03
		*(tmp+2) = SBOX[*(ciphertext+2)];
    2072:	c8 01       	movw	r24, r16
    2074:	02 96       	adiw	r24, 0x02	; 2
    2076:	fc 01       	movw	r30, r24
    2078:	80 81       	ld	r24, Z
    207a:	88 2f       	mov	r24, r24
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	80 50       	subi	r24, 0x00	; 0
    2080:	9e 4f       	sbci	r25, 0xFE	; 254
    2082:	fc 01       	movw	r30, r24
    2084:	80 81       	ld	r24, Z
    2086:	8c 83       	std	Y+4, r24	; 0x04
		*(tmp+3) = SBOX[*(ciphertext+3)];
    2088:	c8 01       	movw	r24, r16
    208a:	03 96       	adiw	r24, 0x03	; 3
    208c:	fc 01       	movw	r30, r24
    208e:	80 81       	ld	r24, Z
    2090:	88 2f       	mov	r24, r24
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	80 50       	subi	r24, 0x00	; 0
    2096:	9e 4f       	sbci	r25, 0xFE	; 254
    2098:	fc 01       	movw	r30, r24
    209a:	80 81       	ld	r24, Z
    209c:	8d 83       	std	Y+5, r24	; 0x05
		*(tmp+4) = SBOX[*(ciphertext+4)];
    209e:	c8 01       	movw	r24, r16
    20a0:	04 96       	adiw	r24, 0x04	; 4
    20a2:	fc 01       	movw	r30, r24
    20a4:	80 81       	ld	r24, Z
    20a6:	88 2f       	mov	r24, r24
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	80 50       	subi	r24, 0x00	; 0
    20ac:	9e 4f       	sbci	r25, 0xFE	; 254
    20ae:	fc 01       	movw	r30, r24
    20b0:	80 81       	ld	r24, Z
    20b2:	8e 83       	std	Y+6, r24	; 0x06
		*(tmp+5) = SBOX[*(ciphertext+5)];
    20b4:	c8 01       	movw	r24, r16
    20b6:	05 96       	adiw	r24, 0x05	; 5
    20b8:	fc 01       	movw	r30, r24
    20ba:	80 81       	ld	r24, Z
    20bc:	88 2f       	mov	r24, r24
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	80 50       	subi	r24, 0x00	; 0
    20c2:	9e 4f       	sbci	r25, 0xFE	; 254
    20c4:	fc 01       	movw	r30, r24
    20c6:	80 81       	ld	r24, Z
    20c8:	8f 83       	std	Y+7, r24	; 0x07
		*(tmp+6) = SBOX[*(ciphertext+6)];
    20ca:	c8 01       	movw	r24, r16
    20cc:	06 96       	adiw	r24, 0x06	; 6
    20ce:	fc 01       	movw	r30, r24
    20d0:	80 81       	ld	r24, Z
    20d2:	88 2f       	mov	r24, r24
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	80 50       	subi	r24, 0x00	; 0
    20d8:	9e 4f       	sbci	r25, 0xFE	; 254
    20da:	fc 01       	movw	r30, r24
    20dc:	80 81       	ld	r24, Z
    20de:	88 87       	std	Y+8, r24	; 0x08
		*(tmp+7) = SBOX[*(ciphertext+7)];
    20e0:	c8 01       	movw	r24, r16
    20e2:	07 96       	adiw	r24, 0x07	; 7
    20e4:	fc 01       	movw	r30, r24
    20e6:	80 81       	ld	r24, Z
    20e8:	88 2f       	mov	r24, r24
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	80 50       	subi	r24, 0x00	; 0
    20ee:	9e 4f       	sbci	r25, 0xFE	; 254
    20f0:	fc 01       	movw	r30, r24
    20f2:	80 81       	ld	r24, Z
    20f4:	89 87       	std	Y+9, r24	; 0x09
		*(tmp+8) = SBOX[*(ciphertext+8)];
    20f6:	c8 01       	movw	r24, r16
    20f8:	08 96       	adiw	r24, 0x08	; 8
    20fa:	fc 01       	movw	r30, r24
    20fc:	80 81       	ld	r24, Z
    20fe:	88 2f       	mov	r24, r24
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	80 50       	subi	r24, 0x00	; 0
    2104:	9e 4f       	sbci	r25, 0xFE	; 254
    2106:	fc 01       	movw	r30, r24
    2108:	80 81       	ld	r24, Z
    210a:	8a 87       	std	Y+10, r24	; 0x0a
		*(tmp+9) = SBOX[*(ciphertext+9)];
    210c:	c8 01       	movw	r24, r16
    210e:	09 96       	adiw	r24, 0x09	; 9
    2110:	fc 01       	movw	r30, r24
    2112:	80 81       	ld	r24, Z
    2114:	88 2f       	mov	r24, r24
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	80 50       	subi	r24, 0x00	; 0
    211a:	9e 4f       	sbci	r25, 0xFE	; 254
    211c:	fc 01       	movw	r30, r24
    211e:	80 81       	ld	r24, Z
    2120:	8b 87       	std	Y+11, r24	; 0x0b
		*(tmp+10) = SBOX[*(ciphertext+10)];
    2122:	c8 01       	movw	r24, r16
    2124:	0a 96       	adiw	r24, 0x0a	; 10
    2126:	fc 01       	movw	r30, r24
    2128:	80 81       	ld	r24, Z
    212a:	88 2f       	mov	r24, r24
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	80 50       	subi	r24, 0x00	; 0
    2130:	9e 4f       	sbci	r25, 0xFE	; 254
    2132:	fc 01       	movw	r30, r24
    2134:	80 81       	ld	r24, Z
    2136:	8c 87       	std	Y+12, r24	; 0x0c
		*(tmp+11) = SBOX[*(ciphertext+11)];
    2138:	c8 01       	movw	r24, r16
    213a:	0b 96       	adiw	r24, 0x0b	; 11
    213c:	fc 01       	movw	r30, r24
    213e:	80 81       	ld	r24, Z
    2140:	88 2f       	mov	r24, r24
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	80 50       	subi	r24, 0x00	; 0
    2146:	9e 4f       	sbci	r25, 0xFE	; 254
    2148:	fc 01       	movw	r30, r24
    214a:	80 81       	ld	r24, Z
    214c:	8d 87       	std	Y+13, r24	; 0x0d
		*(tmp+12) = SBOX[*(ciphertext+12)];
    214e:	c8 01       	movw	r24, r16
    2150:	0c 96       	adiw	r24, 0x0c	; 12
    2152:	fc 01       	movw	r30, r24
    2154:	80 81       	ld	r24, Z
    2156:	88 2f       	mov	r24, r24
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	80 50       	subi	r24, 0x00	; 0
    215c:	9e 4f       	sbci	r25, 0xFE	; 254
    215e:	fc 01       	movw	r30, r24
    2160:	80 81       	ld	r24, Z
    2162:	8e 87       	std	Y+14, r24	; 0x0e
		*(tmp+13) = SBOX[*(ciphertext+13)];
    2164:	c8 01       	movw	r24, r16
    2166:	0d 96       	adiw	r24, 0x0d	; 13
    2168:	fc 01       	movw	r30, r24
    216a:	80 81       	ld	r24, Z
    216c:	88 2f       	mov	r24, r24
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	80 50       	subi	r24, 0x00	; 0
    2172:	9e 4f       	sbci	r25, 0xFE	; 254
    2174:	fc 01       	movw	r30, r24
    2176:	80 81       	ld	r24, Z
    2178:	8f 87       	std	Y+15, r24	; 0x0f
		*(tmp+14) = SBOX[*(ciphertext+14)];
    217a:	c8 01       	movw	r24, r16
    217c:	0e 96       	adiw	r24, 0x0e	; 14
    217e:	fc 01       	movw	r30, r24
    2180:	80 81       	ld	r24, Z
    2182:	88 2f       	mov	r24, r24
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	80 50       	subi	r24, 0x00	; 0
    2188:	9e 4f       	sbci	r25, 0xFE	; 254
    218a:	fc 01       	movw	r30, r24
    218c:	80 81       	ld	r24, Z
    218e:	88 8b       	std	Y+16, r24	; 0x10
		*(tmp+15) = SBOX[*(ciphertext+15)];
    2190:	c8 01       	movw	r24, r16
    2192:	0f 96       	adiw	r24, 0x0f	; 15
    2194:	fc 01       	movw	r30, r24
    2196:	80 81       	ld	r24, Z
    2198:	88 2f       	mov	r24, r24
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	80 50       	subi	r24, 0x00	; 0
    219e:	9e 4f       	sbci	r25, 0xFE	; 254
    21a0:	fc 01       	movw	r30, r24
    21a2:	80 81       	ld	r24, Z
    21a4:	89 8b       	std	Y+17, r24	; 0x11
        shift_rows(tmp);
    21a6:	ce 01       	movw	r24, r28
    21a8:	02 96       	adiw	r24, 0x02	; 2
    21aa:	0e 94 18 09 	call	0x1230	; 0x1230 <shift_rows>
		
		t = tmp[0] ^ tmp[1] ^ tmp[2] ^ tmp[3];
    21ae:	9a 81       	ldd	r25, Y+2	; 0x02
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	98 27       	eor	r25, r24
    21b4:	8c 81       	ldd	r24, Y+4	; 0x04
    21b6:	98 27       	eor	r25, r24
    21b8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ba:	89 27       	eor	r24, r25
    21bc:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[0]   = mul2(tmp[0]   ^ tmp[1]) ^ tmp[0]   ^ t;
    21be:	9a 81       	ldd	r25, Y+2	; 0x02
    21c0:	8b 81       	ldd	r24, Y+3	; 0x03
    21c2:	89 27       	eor	r24, r25
    21c4:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    21c8:	98 2f       	mov	r25, r24
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	98 27       	eor	r25, r24
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	89 27       	eor	r24, r25
    21d2:	f8 01       	movw	r30, r16
    21d4:	80 83       	st	Z, r24
        ciphertext[1] = mul2(tmp[1] ^ tmp[2]) ^ tmp[1] ^ t;
    21d6:	68 01       	movw	r12, r16
    21d8:	ff ef       	ldi	r31, 0xFF	; 255
    21da:	cf 1a       	sub	r12, r31
    21dc:	df 0a       	sbc	r13, r31
    21de:	9b 81       	ldd	r25, Y+3	; 0x03
    21e0:	8c 81       	ldd	r24, Y+4	; 0x04
    21e2:	89 27       	eor	r24, r25
    21e4:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    21e8:	98 2f       	mov	r25, r24
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	98 27       	eor	r25, r24
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	89 27       	eor	r24, r25
    21f2:	f6 01       	movw	r30, r12
    21f4:	80 83       	st	Z, r24
        ciphertext[2] = mul2(tmp[2] ^ tmp[3]) ^ tmp[2] ^ t;
    21f6:	68 01       	movw	r12, r16
    21f8:	f2 e0       	ldi	r31, 0x02	; 2
    21fa:	cf 0e       	add	r12, r31
    21fc:	d1 1c       	adc	r13, r1
    21fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2200:	8d 81       	ldd	r24, Y+5	; 0x05
    2202:	89 27       	eor	r24, r25
    2204:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2208:	98 2f       	mov	r25, r24
    220a:	8c 81       	ldd	r24, Y+4	; 0x04
    220c:	98 27       	eor	r25, r24
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	89 27       	eor	r24, r25
    2212:	f6 01       	movw	r30, r12
    2214:	80 83       	st	Z, r24
        ciphertext[3] = mul2(tmp[3] ^ tmp[0]  ) ^ tmp[3] ^ t;
    2216:	68 01       	movw	r12, r16
    2218:	f3 e0       	ldi	r31, 0x03	; 3
    221a:	cf 0e       	add	r12, r31
    221c:	d1 1c       	adc	r13, r1
    221e:	9d 81       	ldd	r25, Y+5	; 0x05
    2220:	8a 81       	ldd	r24, Y+2	; 0x02
    2222:	89 27       	eor	r24, r25
    2224:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2228:	98 2f       	mov	r25, r24
    222a:	8d 81       	ldd	r24, Y+5	; 0x05
    222c:	98 27       	eor	r25, r24
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	89 27       	eor	r24, r25
    2232:	f6 01       	movw	r30, r12
    2234:	80 83       	st	Z, r24
			
		t = tmp[4] ^ tmp[5] ^ tmp[6] ^ tmp[7];
    2236:	9e 81       	ldd	r25, Y+6	; 0x06
    2238:	8f 81       	ldd	r24, Y+7	; 0x07
    223a:	98 27       	eor	r25, r24
    223c:	88 85       	ldd	r24, Y+8	; 0x08
    223e:	98 27       	eor	r25, r24
    2240:	89 85       	ldd	r24, Y+9	; 0x09
    2242:	89 27       	eor	r24, r25
    2244:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[4]   = mul2(tmp[4]   ^ tmp[5]) ^ tmp[4]   ^ t;
    2246:	68 01       	movw	r12, r16
    2248:	f4 e0       	ldi	r31, 0x04	; 4
    224a:	cf 0e       	add	r12, r31
    224c:	d1 1c       	adc	r13, r1
    224e:	9e 81       	ldd	r25, Y+6	; 0x06
    2250:	8f 81       	ldd	r24, Y+7	; 0x07
    2252:	89 27       	eor	r24, r25
    2254:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2258:	98 2f       	mov	r25, r24
    225a:	8e 81       	ldd	r24, Y+6	; 0x06
    225c:	98 27       	eor	r25, r24
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	89 27       	eor	r24, r25
    2262:	f6 01       	movw	r30, r12
    2264:	80 83       	st	Z, r24
        ciphertext[5] = mul2(tmp[5] ^ tmp[6]) ^ tmp[5] ^ t;
    2266:	68 01       	movw	r12, r16
    2268:	f5 e0       	ldi	r31, 0x05	; 5
    226a:	cf 0e       	add	r12, r31
    226c:	d1 1c       	adc	r13, r1
    226e:	9f 81       	ldd	r25, Y+7	; 0x07
    2270:	88 85       	ldd	r24, Y+8	; 0x08
    2272:	89 27       	eor	r24, r25
    2274:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2278:	98 2f       	mov	r25, r24
    227a:	8f 81       	ldd	r24, Y+7	; 0x07
    227c:	98 27       	eor	r25, r24
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	89 27       	eor	r24, r25
    2282:	f6 01       	movw	r30, r12
    2284:	80 83       	st	Z, r24
        ciphertext[6] = mul2(tmp[6] ^ tmp[7]) ^ tmp[6] ^ t;
    2286:	68 01       	movw	r12, r16
    2288:	f6 e0       	ldi	r31, 0x06	; 6
    228a:	cf 0e       	add	r12, r31
    228c:	d1 1c       	adc	r13, r1
    228e:	98 85       	ldd	r25, Y+8	; 0x08
    2290:	89 85       	ldd	r24, Y+9	; 0x09
    2292:	89 27       	eor	r24, r25
    2294:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2298:	98 2f       	mov	r25, r24
    229a:	88 85       	ldd	r24, Y+8	; 0x08
    229c:	98 27       	eor	r25, r24
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	89 27       	eor	r24, r25
    22a2:	f6 01       	movw	r30, r12
    22a4:	80 83       	st	Z, r24
        ciphertext[7] = mul2(tmp[7] ^ tmp[4]  ) ^ tmp[7] ^ t;
    22a6:	68 01       	movw	r12, r16
    22a8:	f7 e0       	ldi	r31, 0x07	; 7
    22aa:	cf 0e       	add	r12, r31
    22ac:	d1 1c       	adc	r13, r1
    22ae:	99 85       	ldd	r25, Y+9	; 0x09
    22b0:	8e 81       	ldd	r24, Y+6	; 0x06
    22b2:	89 27       	eor	r24, r25
    22b4:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    22b8:	98 2f       	mov	r25, r24
    22ba:	89 85       	ldd	r24, Y+9	; 0x09
    22bc:	98 27       	eor	r25, r24
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	89 27       	eor	r24, r25
    22c2:	f6 01       	movw	r30, r12
    22c4:	80 83       	st	Z, r24
			
		t = tmp[8] ^ tmp[9] ^ tmp[10] ^ tmp[11];
    22c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    22ca:	98 27       	eor	r25, r24
    22cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    22ce:	98 27       	eor	r25, r24
    22d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d2:	89 27       	eor	r24, r25
    22d4:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[8]   = mul2(tmp[8]   ^ tmp[9]) ^ tmp[8]   ^ t;
    22d6:	68 01       	movw	r12, r16
    22d8:	f8 e0       	ldi	r31, 0x08	; 8
    22da:	cf 0e       	add	r12, r31
    22dc:	d1 1c       	adc	r13, r1
    22de:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    22e2:	89 27       	eor	r24, r25
    22e4:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    22e8:	98 2f       	mov	r25, r24
    22ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    22ec:	98 27       	eor	r25, r24
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	89 27       	eor	r24, r25
    22f2:	f6 01       	movw	r30, r12
    22f4:	80 83       	st	Z, r24
        ciphertext[9] = mul2(tmp[9] ^ tmp[10]) ^ tmp[9] ^ t;
    22f6:	68 01       	movw	r12, r16
    22f8:	f9 e0       	ldi	r31, 0x09	; 9
    22fa:	cf 0e       	add	r12, r31
    22fc:	d1 1c       	adc	r13, r1
    22fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2300:	8c 85       	ldd	r24, Y+12	; 0x0c
    2302:	89 27       	eor	r24, r25
    2304:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2308:	98 2f       	mov	r25, r24
    230a:	8b 85       	ldd	r24, Y+11	; 0x0b
    230c:	98 27       	eor	r25, r24
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	89 27       	eor	r24, r25
    2312:	f6 01       	movw	r30, r12
    2314:	80 83       	st	Z, r24
        ciphertext[10] = mul2(tmp[10] ^ tmp[11]) ^ tmp[10] ^ t;
    2316:	68 01       	movw	r12, r16
    2318:	fa e0       	ldi	r31, 0x0A	; 10
    231a:	cf 0e       	add	r12, r31
    231c:	d1 1c       	adc	r13, r1
    231e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2320:	8d 85       	ldd	r24, Y+13	; 0x0d
    2322:	89 27       	eor	r24, r25
    2324:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2328:	98 2f       	mov	r25, r24
    232a:	8c 85       	ldd	r24, Y+12	; 0x0c
    232c:	98 27       	eor	r25, r24
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	89 27       	eor	r24, r25
    2332:	f6 01       	movw	r30, r12
    2334:	80 83       	st	Z, r24
        ciphertext[11] = mul2(tmp[11] ^ tmp[8]  ) ^ tmp[11] ^ t;
    2336:	68 01       	movw	r12, r16
    2338:	fb e0       	ldi	r31, 0x0B	; 11
    233a:	cf 0e       	add	r12, r31
    233c:	d1 1c       	adc	r13, r1
    233e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2340:	8a 85       	ldd	r24, Y+10	; 0x0a
    2342:	89 27       	eor	r24, r25
    2344:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2348:	98 2f       	mov	r25, r24
    234a:	8d 85       	ldd	r24, Y+13	; 0x0d
    234c:	98 27       	eor	r25, r24
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	89 27       	eor	r24, r25
    2352:	f6 01       	movw	r30, r12
    2354:	80 83       	st	Z, r24
			
		t = tmp[12] ^ tmp[13] ^ tmp[14] ^ tmp[15];
    2356:	9e 85       	ldd	r25, Y+14	; 0x0e
    2358:	8f 85       	ldd	r24, Y+15	; 0x0f
    235a:	98 27       	eor	r25, r24
    235c:	88 89       	ldd	r24, Y+16	; 0x10
    235e:	98 27       	eor	r25, r24
    2360:	89 89       	ldd	r24, Y+17	; 0x11
    2362:	89 27       	eor	r24, r25
    2364:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[12]   = mul2(tmp[12]   ^ tmp[13]) ^ tmp[12]   ^ t;
    2366:	68 01       	movw	r12, r16
    2368:	fc e0       	ldi	r31, 0x0C	; 12
    236a:	cf 0e       	add	r12, r31
    236c:	d1 1c       	adc	r13, r1
    236e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2370:	8f 85       	ldd	r24, Y+15	; 0x0f
    2372:	89 27       	eor	r24, r25
    2374:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2378:	98 2f       	mov	r25, r24
    237a:	8e 85       	ldd	r24, Y+14	; 0x0e
    237c:	98 27       	eor	r25, r24
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	89 27       	eor	r24, r25
    2382:	f6 01       	movw	r30, r12
    2384:	80 83       	st	Z, r24
        ciphertext[13] = mul2(tmp[13] ^ tmp[14]) ^ tmp[13] ^ t;
    2386:	68 01       	movw	r12, r16
    2388:	fd e0       	ldi	r31, 0x0D	; 13
    238a:	cf 0e       	add	r12, r31
    238c:	d1 1c       	adc	r13, r1
    238e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2390:	88 89       	ldd	r24, Y+16	; 0x10
    2392:	89 27       	eor	r24, r25
    2394:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2398:	98 2f       	mov	r25, r24
    239a:	8f 85       	ldd	r24, Y+15	; 0x0f
    239c:	98 27       	eor	r25, r24
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	89 27       	eor	r24, r25
    23a2:	f6 01       	movw	r30, r12
    23a4:	80 83       	st	Z, r24
        ciphertext[14] = mul2(tmp[14] ^ tmp[15]) ^ tmp[14] ^ t;
    23a6:	68 01       	movw	r12, r16
    23a8:	fe e0       	ldi	r31, 0x0E	; 14
    23aa:	cf 0e       	add	r12, r31
    23ac:	d1 1c       	adc	r13, r1
    23ae:	98 89       	ldd	r25, Y+16	; 0x10
    23b0:	89 89       	ldd	r24, Y+17	; 0x11
    23b2:	89 27       	eor	r24, r25
    23b4:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    23b8:	98 2f       	mov	r25, r24
    23ba:	88 89       	ldd	r24, Y+16	; 0x10
    23bc:	98 27       	eor	r25, r24
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	89 27       	eor	r24, r25
    23c2:	f6 01       	movw	r30, r12
    23c4:	80 83       	st	Z, r24
        ciphertext[15] = mul2(tmp[15] ^ tmp[12]  ) ^ tmp[15] ^ t;
    23c6:	68 01       	movw	r12, r16
    23c8:	ff e0       	ldi	r31, 0x0F	; 15
    23ca:	cf 0e       	add	r12, r31
    23cc:	d1 1c       	adc	r13, r1
    23ce:	99 89       	ldd	r25, Y+17	; 0x11
    23d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    23d2:	89 27       	eor	r24, r25
    23d4:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    23d8:	98 2f       	mov	r25, r24
    23da:	89 89       	ldd	r24, Y+17	; 0x11
    23dc:	98 27       	eor	r25, r24
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	89 27       	eor	r24, r25
    23e2:	f6 01       	movw	r30, r12
    23e4:	80 83       	st	Z, r24
		
		*(ciphertext+0) ^= *roundkeys++;
    23e6:	c7 01       	movw	r24, r14
    23e8:	7c 01       	movw	r14, r24
    23ea:	ff ef       	ldi	r31, 0xFF	; 255
    23ec:	ef 1a       	sub	r14, r31
    23ee:	ff 0a       	sbc	r15, r31
    23f0:	fc 01       	movw	r30, r24
    23f2:	80 81       	ld	r24, Z
    23f4:	f8 01       	movw	r30, r16
    23f6:	90 81       	ld	r25, Z
    23f8:	89 27       	eor	r24, r25
    23fa:	f8 01       	movw	r30, r16
    23fc:	80 83       	st	Z, r24
		*(ciphertext+1) ^= *roundkeys++;
    23fe:	c7 01       	movw	r24, r14
    2400:	7c 01       	movw	r14, r24
    2402:	ff ef       	ldi	r31, 0xFF	; 255
    2404:	ef 1a       	sub	r14, r31
    2406:	ff 0a       	sbc	r15, r31
    2408:	fc 01       	movw	r30, r24
    240a:	40 81       	ld	r20, Z
    240c:	c8 01       	movw	r24, r16
    240e:	01 96       	adiw	r24, 0x01	; 1
    2410:	98 01       	movw	r18, r16
    2412:	2f 5f       	subi	r18, 0xFF	; 255
    2414:	3f 4f       	sbci	r19, 0xFF	; 255
    2416:	f9 01       	movw	r30, r18
    2418:	20 81       	ld	r18, Z
    241a:	24 27       	eor	r18, r20
    241c:	fc 01       	movw	r30, r24
    241e:	20 83       	st	Z, r18
		*(ciphertext+2) ^= *roundkeys++;
    2420:	c7 01       	movw	r24, r14
    2422:	7c 01       	movw	r14, r24
    2424:	ff ef       	ldi	r31, 0xFF	; 255
    2426:	ef 1a       	sub	r14, r31
    2428:	ff 0a       	sbc	r15, r31
    242a:	fc 01       	movw	r30, r24
    242c:	40 81       	ld	r20, Z
    242e:	c8 01       	movw	r24, r16
    2430:	02 96       	adiw	r24, 0x02	; 2
    2432:	98 01       	movw	r18, r16
    2434:	2e 5f       	subi	r18, 0xFE	; 254
    2436:	3f 4f       	sbci	r19, 0xFF	; 255
    2438:	f9 01       	movw	r30, r18
    243a:	20 81       	ld	r18, Z
    243c:	24 27       	eor	r18, r20
    243e:	fc 01       	movw	r30, r24
    2440:	20 83       	st	Z, r18
		*(ciphertext+3) ^= *roundkeys++;
    2442:	c7 01       	movw	r24, r14
    2444:	7c 01       	movw	r14, r24
    2446:	ff ef       	ldi	r31, 0xFF	; 255
    2448:	ef 1a       	sub	r14, r31
    244a:	ff 0a       	sbc	r15, r31
    244c:	fc 01       	movw	r30, r24
    244e:	40 81       	ld	r20, Z
    2450:	c8 01       	movw	r24, r16
    2452:	03 96       	adiw	r24, 0x03	; 3
    2454:	98 01       	movw	r18, r16
    2456:	2d 5f       	subi	r18, 0xFD	; 253
    2458:	3f 4f       	sbci	r19, 0xFF	; 255
    245a:	f9 01       	movw	r30, r18
    245c:	20 81       	ld	r18, Z
    245e:	24 27       	eor	r18, r20
    2460:	fc 01       	movw	r30, r24
    2462:	20 83       	st	Z, r18
		*(ciphertext+4) ^= *roundkeys++;
    2464:	c7 01       	movw	r24, r14
    2466:	7c 01       	movw	r14, r24
    2468:	ff ef       	ldi	r31, 0xFF	; 255
    246a:	ef 1a       	sub	r14, r31
    246c:	ff 0a       	sbc	r15, r31
    246e:	fc 01       	movw	r30, r24
    2470:	40 81       	ld	r20, Z
    2472:	c8 01       	movw	r24, r16
    2474:	04 96       	adiw	r24, 0x04	; 4
    2476:	98 01       	movw	r18, r16
    2478:	2c 5f       	subi	r18, 0xFC	; 252
    247a:	3f 4f       	sbci	r19, 0xFF	; 255
    247c:	f9 01       	movw	r30, r18
    247e:	20 81       	ld	r18, Z
    2480:	24 27       	eor	r18, r20
    2482:	fc 01       	movw	r30, r24
    2484:	20 83       	st	Z, r18
		*(ciphertext+5) ^= *roundkeys++;
    2486:	c7 01       	movw	r24, r14
    2488:	7c 01       	movw	r14, r24
    248a:	ff ef       	ldi	r31, 0xFF	; 255
    248c:	ef 1a       	sub	r14, r31
    248e:	ff 0a       	sbc	r15, r31
    2490:	fc 01       	movw	r30, r24
    2492:	40 81       	ld	r20, Z
    2494:	c8 01       	movw	r24, r16
    2496:	05 96       	adiw	r24, 0x05	; 5
    2498:	98 01       	movw	r18, r16
    249a:	2b 5f       	subi	r18, 0xFB	; 251
    249c:	3f 4f       	sbci	r19, 0xFF	; 255
    249e:	f9 01       	movw	r30, r18
    24a0:	20 81       	ld	r18, Z
    24a2:	24 27       	eor	r18, r20
    24a4:	fc 01       	movw	r30, r24
    24a6:	20 83       	st	Z, r18
		*(ciphertext+6) ^= *roundkeys++;
    24a8:	c7 01       	movw	r24, r14
    24aa:	7c 01       	movw	r14, r24
    24ac:	ff ef       	ldi	r31, 0xFF	; 255
    24ae:	ef 1a       	sub	r14, r31
    24b0:	ff 0a       	sbc	r15, r31
    24b2:	fc 01       	movw	r30, r24
    24b4:	40 81       	ld	r20, Z
    24b6:	c8 01       	movw	r24, r16
    24b8:	06 96       	adiw	r24, 0x06	; 6
    24ba:	98 01       	movw	r18, r16
    24bc:	2a 5f       	subi	r18, 0xFA	; 250
    24be:	3f 4f       	sbci	r19, 0xFF	; 255
    24c0:	f9 01       	movw	r30, r18
    24c2:	20 81       	ld	r18, Z
    24c4:	24 27       	eor	r18, r20
    24c6:	fc 01       	movw	r30, r24
    24c8:	20 83       	st	Z, r18
		*(ciphertext+7) ^= *roundkeys++;
    24ca:	c7 01       	movw	r24, r14
    24cc:	7c 01       	movw	r14, r24
    24ce:	ff ef       	ldi	r31, 0xFF	; 255
    24d0:	ef 1a       	sub	r14, r31
    24d2:	ff 0a       	sbc	r15, r31
    24d4:	fc 01       	movw	r30, r24
    24d6:	40 81       	ld	r20, Z
    24d8:	c8 01       	movw	r24, r16
    24da:	07 96       	adiw	r24, 0x07	; 7
    24dc:	98 01       	movw	r18, r16
    24de:	29 5f       	subi	r18, 0xF9	; 249
    24e0:	3f 4f       	sbci	r19, 0xFF	; 255
    24e2:	f9 01       	movw	r30, r18
    24e4:	20 81       	ld	r18, Z
    24e6:	24 27       	eor	r18, r20
    24e8:	fc 01       	movw	r30, r24
    24ea:	20 83       	st	Z, r18
		*(ciphertext+8) ^= *roundkeys++;
    24ec:	c7 01       	movw	r24, r14
    24ee:	7c 01       	movw	r14, r24
    24f0:	ff ef       	ldi	r31, 0xFF	; 255
    24f2:	ef 1a       	sub	r14, r31
    24f4:	ff 0a       	sbc	r15, r31
    24f6:	fc 01       	movw	r30, r24
    24f8:	40 81       	ld	r20, Z
    24fa:	c8 01       	movw	r24, r16
    24fc:	08 96       	adiw	r24, 0x08	; 8
    24fe:	98 01       	movw	r18, r16
    2500:	28 5f       	subi	r18, 0xF8	; 248
    2502:	3f 4f       	sbci	r19, 0xFF	; 255
    2504:	f9 01       	movw	r30, r18
    2506:	20 81       	ld	r18, Z
    2508:	24 27       	eor	r18, r20
    250a:	fc 01       	movw	r30, r24
    250c:	20 83       	st	Z, r18
		*(ciphertext+9) ^= *roundkeys++;
    250e:	c7 01       	movw	r24, r14
    2510:	7c 01       	movw	r14, r24
    2512:	ff ef       	ldi	r31, 0xFF	; 255
    2514:	ef 1a       	sub	r14, r31
    2516:	ff 0a       	sbc	r15, r31
    2518:	fc 01       	movw	r30, r24
    251a:	40 81       	ld	r20, Z
    251c:	c8 01       	movw	r24, r16
    251e:	09 96       	adiw	r24, 0x09	; 9
    2520:	98 01       	movw	r18, r16
    2522:	27 5f       	subi	r18, 0xF7	; 247
    2524:	3f 4f       	sbci	r19, 0xFF	; 255
    2526:	f9 01       	movw	r30, r18
    2528:	20 81       	ld	r18, Z
    252a:	24 27       	eor	r18, r20
    252c:	fc 01       	movw	r30, r24
    252e:	20 83       	st	Z, r18
		*(ciphertext+10) ^= *roundkeys++;
    2530:	c7 01       	movw	r24, r14
    2532:	7c 01       	movw	r14, r24
    2534:	ff ef       	ldi	r31, 0xFF	; 255
    2536:	ef 1a       	sub	r14, r31
    2538:	ff 0a       	sbc	r15, r31
    253a:	fc 01       	movw	r30, r24
    253c:	40 81       	ld	r20, Z
    253e:	c8 01       	movw	r24, r16
    2540:	0a 96       	adiw	r24, 0x0a	; 10
    2542:	98 01       	movw	r18, r16
    2544:	26 5f       	subi	r18, 0xF6	; 246
    2546:	3f 4f       	sbci	r19, 0xFF	; 255
    2548:	f9 01       	movw	r30, r18
    254a:	20 81       	ld	r18, Z
    254c:	24 27       	eor	r18, r20
    254e:	fc 01       	movw	r30, r24
    2550:	20 83       	st	Z, r18
		*(ciphertext+11) ^= *roundkeys++;
    2552:	c7 01       	movw	r24, r14
    2554:	7c 01       	movw	r14, r24
    2556:	ff ef       	ldi	r31, 0xFF	; 255
    2558:	ef 1a       	sub	r14, r31
    255a:	ff 0a       	sbc	r15, r31
    255c:	fc 01       	movw	r30, r24
    255e:	40 81       	ld	r20, Z
    2560:	c8 01       	movw	r24, r16
    2562:	0b 96       	adiw	r24, 0x0b	; 11
    2564:	98 01       	movw	r18, r16
    2566:	25 5f       	subi	r18, 0xF5	; 245
    2568:	3f 4f       	sbci	r19, 0xFF	; 255
    256a:	f9 01       	movw	r30, r18
    256c:	20 81       	ld	r18, Z
    256e:	24 27       	eor	r18, r20
    2570:	fc 01       	movw	r30, r24
    2572:	20 83       	st	Z, r18
		*(ciphertext+12) ^= *roundkeys++;
    2574:	c7 01       	movw	r24, r14
    2576:	7c 01       	movw	r14, r24
    2578:	ff ef       	ldi	r31, 0xFF	; 255
    257a:	ef 1a       	sub	r14, r31
    257c:	ff 0a       	sbc	r15, r31
    257e:	fc 01       	movw	r30, r24
    2580:	40 81       	ld	r20, Z
    2582:	c8 01       	movw	r24, r16
    2584:	0c 96       	adiw	r24, 0x0c	; 12
    2586:	98 01       	movw	r18, r16
    2588:	24 5f       	subi	r18, 0xF4	; 244
    258a:	3f 4f       	sbci	r19, 0xFF	; 255
    258c:	f9 01       	movw	r30, r18
    258e:	20 81       	ld	r18, Z
    2590:	24 27       	eor	r18, r20
    2592:	fc 01       	movw	r30, r24
    2594:	20 83       	st	Z, r18
		*(ciphertext+13) ^= *roundkeys++;
    2596:	c7 01       	movw	r24, r14
    2598:	7c 01       	movw	r14, r24
    259a:	ff ef       	ldi	r31, 0xFF	; 255
    259c:	ef 1a       	sub	r14, r31
    259e:	ff 0a       	sbc	r15, r31
    25a0:	fc 01       	movw	r30, r24
    25a2:	40 81       	ld	r20, Z
    25a4:	c8 01       	movw	r24, r16
    25a6:	0d 96       	adiw	r24, 0x0d	; 13
    25a8:	98 01       	movw	r18, r16
    25aa:	23 5f       	subi	r18, 0xF3	; 243
    25ac:	3f 4f       	sbci	r19, 0xFF	; 255
    25ae:	f9 01       	movw	r30, r18
    25b0:	20 81       	ld	r18, Z
    25b2:	24 27       	eor	r18, r20
    25b4:	fc 01       	movw	r30, r24
    25b6:	20 83       	st	Z, r18
		*(ciphertext+14) ^= *roundkeys++;
    25b8:	c7 01       	movw	r24, r14
    25ba:	7c 01       	movw	r14, r24
    25bc:	ff ef       	ldi	r31, 0xFF	; 255
    25be:	ef 1a       	sub	r14, r31
    25c0:	ff 0a       	sbc	r15, r31
    25c2:	fc 01       	movw	r30, r24
    25c4:	40 81       	ld	r20, Z
    25c6:	c8 01       	movw	r24, r16
    25c8:	0e 96       	adiw	r24, 0x0e	; 14
    25ca:	98 01       	movw	r18, r16
    25cc:	22 5f       	subi	r18, 0xF2	; 242
    25ce:	3f 4f       	sbci	r19, 0xFF	; 255
    25d0:	f9 01       	movw	r30, r18
    25d2:	20 81       	ld	r18, Z
    25d4:	24 27       	eor	r18, r20
    25d6:	fc 01       	movw	r30, r24
    25d8:	20 83       	st	Z, r18
		*(ciphertext+15) ^= *roundkeys++;
    25da:	c7 01       	movw	r24, r14
    25dc:	7c 01       	movw	r14, r24
    25de:	ff ef       	ldi	r31, 0xFF	; 255
    25e0:	ef 1a       	sub	r14, r31
    25e2:	ff 0a       	sbc	r15, r31
    25e4:	fc 01       	movw	r30, r24
    25e6:	40 81       	ld	r20, Z
    25e8:	c8 01       	movw	r24, r16
    25ea:	0f 96       	adiw	r24, 0x0f	; 15
    25ec:	98 01       	movw	r18, r16
    25ee:	21 5f       	subi	r18, 0xF1	; 241
    25f0:	3f 4f       	sbci	r19, 0xFF	; 255
    25f2:	f9 01       	movw	r30, r18
    25f4:	20 81       	ld	r18, Z
    25f6:	24 27       	eor	r18, r20
    25f8:	fc 01       	movw	r30, r24
    25fa:	20 83       	st	Z, r18
		
		*(tmp+0) = SBOX[*(ciphertext+0)];
    25fc:	f8 01       	movw	r30, r16
    25fe:	80 81       	ld	r24, Z
    2600:	88 2f       	mov	r24, r24
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	80 50       	subi	r24, 0x00	; 0
    2606:	9e 4f       	sbci	r25, 0xFE	; 254
    2608:	fc 01       	movw	r30, r24
    260a:	80 81       	ld	r24, Z
    260c:	8a 83       	std	Y+2, r24	; 0x02
		*(tmp+1) = SBOX[*(ciphertext+1)];
    260e:	c8 01       	movw	r24, r16
    2610:	01 96       	adiw	r24, 0x01	; 1
    2612:	fc 01       	movw	r30, r24
    2614:	80 81       	ld	r24, Z
    2616:	88 2f       	mov	r24, r24
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	80 50       	subi	r24, 0x00	; 0
    261c:	9e 4f       	sbci	r25, 0xFE	; 254
    261e:	fc 01       	movw	r30, r24
    2620:	80 81       	ld	r24, Z
    2622:	8b 83       	std	Y+3, r24	; 0x03
		*(tmp+2) = SBOX[*(ciphertext+2)];
    2624:	c8 01       	movw	r24, r16
    2626:	02 96       	adiw	r24, 0x02	; 2
    2628:	fc 01       	movw	r30, r24
    262a:	80 81       	ld	r24, Z
    262c:	88 2f       	mov	r24, r24
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	80 50       	subi	r24, 0x00	; 0
    2632:	9e 4f       	sbci	r25, 0xFE	; 254
    2634:	fc 01       	movw	r30, r24
    2636:	80 81       	ld	r24, Z
    2638:	8c 83       	std	Y+4, r24	; 0x04
		*(tmp+3) = SBOX[*(ciphertext+3)];
    263a:	c8 01       	movw	r24, r16
    263c:	03 96       	adiw	r24, 0x03	; 3
    263e:	fc 01       	movw	r30, r24
    2640:	80 81       	ld	r24, Z
    2642:	88 2f       	mov	r24, r24
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	80 50       	subi	r24, 0x00	; 0
    2648:	9e 4f       	sbci	r25, 0xFE	; 254
    264a:	fc 01       	movw	r30, r24
    264c:	80 81       	ld	r24, Z
    264e:	8d 83       	std	Y+5, r24	; 0x05
		*(tmp+4) = SBOX[*(ciphertext+4)];
    2650:	c8 01       	movw	r24, r16
    2652:	04 96       	adiw	r24, 0x04	; 4
    2654:	fc 01       	movw	r30, r24
    2656:	80 81       	ld	r24, Z
    2658:	88 2f       	mov	r24, r24
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	80 50       	subi	r24, 0x00	; 0
    265e:	9e 4f       	sbci	r25, 0xFE	; 254
    2660:	fc 01       	movw	r30, r24
    2662:	80 81       	ld	r24, Z
    2664:	8e 83       	std	Y+6, r24	; 0x06
		*(tmp+5) = SBOX[*(ciphertext+5)];
    2666:	c8 01       	movw	r24, r16
    2668:	05 96       	adiw	r24, 0x05	; 5
    266a:	fc 01       	movw	r30, r24
    266c:	80 81       	ld	r24, Z
    266e:	88 2f       	mov	r24, r24
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	80 50       	subi	r24, 0x00	; 0
    2674:	9e 4f       	sbci	r25, 0xFE	; 254
    2676:	fc 01       	movw	r30, r24
    2678:	80 81       	ld	r24, Z
    267a:	8f 83       	std	Y+7, r24	; 0x07
		*(tmp+6) = SBOX[*(ciphertext+6)];
    267c:	c8 01       	movw	r24, r16
    267e:	06 96       	adiw	r24, 0x06	; 6
    2680:	fc 01       	movw	r30, r24
    2682:	80 81       	ld	r24, Z
    2684:	88 2f       	mov	r24, r24
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	80 50       	subi	r24, 0x00	; 0
    268a:	9e 4f       	sbci	r25, 0xFE	; 254
    268c:	fc 01       	movw	r30, r24
    268e:	80 81       	ld	r24, Z
    2690:	88 87       	std	Y+8, r24	; 0x08
		*(tmp+7) = SBOX[*(ciphertext+7)];
    2692:	c8 01       	movw	r24, r16
    2694:	07 96       	adiw	r24, 0x07	; 7
    2696:	fc 01       	movw	r30, r24
    2698:	80 81       	ld	r24, Z
    269a:	88 2f       	mov	r24, r24
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	80 50       	subi	r24, 0x00	; 0
    26a0:	9e 4f       	sbci	r25, 0xFE	; 254
    26a2:	fc 01       	movw	r30, r24
    26a4:	80 81       	ld	r24, Z
    26a6:	89 87       	std	Y+9, r24	; 0x09
		*(tmp+8) = SBOX[*(ciphertext+8)];
    26a8:	c8 01       	movw	r24, r16
    26aa:	08 96       	adiw	r24, 0x08	; 8
    26ac:	fc 01       	movw	r30, r24
    26ae:	80 81       	ld	r24, Z
    26b0:	88 2f       	mov	r24, r24
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	80 50       	subi	r24, 0x00	; 0
    26b6:	9e 4f       	sbci	r25, 0xFE	; 254
    26b8:	fc 01       	movw	r30, r24
    26ba:	80 81       	ld	r24, Z
    26bc:	8a 87       	std	Y+10, r24	; 0x0a
		*(tmp+9) = SBOX[*(ciphertext+9)];
    26be:	c8 01       	movw	r24, r16
    26c0:	09 96       	adiw	r24, 0x09	; 9
    26c2:	fc 01       	movw	r30, r24
    26c4:	80 81       	ld	r24, Z
    26c6:	88 2f       	mov	r24, r24
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	80 50       	subi	r24, 0x00	; 0
    26cc:	9e 4f       	sbci	r25, 0xFE	; 254
    26ce:	fc 01       	movw	r30, r24
    26d0:	80 81       	ld	r24, Z
    26d2:	8b 87       	std	Y+11, r24	; 0x0b
		*(tmp+10) = SBOX[*(ciphertext+10)];
    26d4:	c8 01       	movw	r24, r16
    26d6:	0a 96       	adiw	r24, 0x0a	; 10
    26d8:	fc 01       	movw	r30, r24
    26da:	80 81       	ld	r24, Z
    26dc:	88 2f       	mov	r24, r24
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	80 50       	subi	r24, 0x00	; 0
    26e2:	9e 4f       	sbci	r25, 0xFE	; 254
    26e4:	fc 01       	movw	r30, r24
    26e6:	80 81       	ld	r24, Z
    26e8:	8c 87       	std	Y+12, r24	; 0x0c
		*(tmp+11) = SBOX[*(ciphertext+11)];
    26ea:	c8 01       	movw	r24, r16
    26ec:	0b 96       	adiw	r24, 0x0b	; 11
    26ee:	fc 01       	movw	r30, r24
    26f0:	80 81       	ld	r24, Z
    26f2:	88 2f       	mov	r24, r24
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	80 50       	subi	r24, 0x00	; 0
    26f8:	9e 4f       	sbci	r25, 0xFE	; 254
    26fa:	fc 01       	movw	r30, r24
    26fc:	80 81       	ld	r24, Z
    26fe:	8d 87       	std	Y+13, r24	; 0x0d
		*(tmp+12) = SBOX[*(ciphertext+12)];
    2700:	c8 01       	movw	r24, r16
    2702:	0c 96       	adiw	r24, 0x0c	; 12
    2704:	fc 01       	movw	r30, r24
    2706:	80 81       	ld	r24, Z
    2708:	88 2f       	mov	r24, r24
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	80 50       	subi	r24, 0x00	; 0
    270e:	9e 4f       	sbci	r25, 0xFE	; 254
    2710:	fc 01       	movw	r30, r24
    2712:	80 81       	ld	r24, Z
    2714:	8e 87       	std	Y+14, r24	; 0x0e
		*(tmp+13) = SBOX[*(ciphertext+13)];
    2716:	c8 01       	movw	r24, r16
    2718:	0d 96       	adiw	r24, 0x0d	; 13
    271a:	fc 01       	movw	r30, r24
    271c:	80 81       	ld	r24, Z
    271e:	88 2f       	mov	r24, r24
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	80 50       	subi	r24, 0x00	; 0
    2724:	9e 4f       	sbci	r25, 0xFE	; 254
    2726:	fc 01       	movw	r30, r24
    2728:	80 81       	ld	r24, Z
    272a:	8f 87       	std	Y+15, r24	; 0x0f
		*(tmp+14) = SBOX[*(ciphertext+14)];
    272c:	c8 01       	movw	r24, r16
    272e:	0e 96       	adiw	r24, 0x0e	; 14
    2730:	fc 01       	movw	r30, r24
    2732:	80 81       	ld	r24, Z
    2734:	88 2f       	mov	r24, r24
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	80 50       	subi	r24, 0x00	; 0
    273a:	9e 4f       	sbci	r25, 0xFE	; 254
    273c:	fc 01       	movw	r30, r24
    273e:	80 81       	ld	r24, Z
    2740:	88 8b       	std	Y+16, r24	; 0x10
		*(tmp+15) = SBOX[*(ciphertext+15)];
    2742:	c8 01       	movw	r24, r16
    2744:	0f 96       	adiw	r24, 0x0f	; 15
    2746:	fc 01       	movw	r30, r24
    2748:	80 81       	ld	r24, Z
    274a:	88 2f       	mov	r24, r24
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	80 50       	subi	r24, 0x00	; 0
    2750:	9e 4f       	sbci	r25, 0xFE	; 254
    2752:	fc 01       	movw	r30, r24
    2754:	80 81       	ld	r24, Z
    2756:	89 8b       	std	Y+17, r24	; 0x11
        shift_rows(tmp);
    2758:	ce 01       	movw	r24, r28
    275a:	02 96       	adiw	r24, 0x02	; 2
    275c:	0e 94 18 09 	call	0x1230	; 0x1230 <shift_rows>
		
		t = tmp[0] ^ tmp[1] ^ tmp[2] ^ tmp[3];
    2760:	9a 81       	ldd	r25, Y+2	; 0x02
    2762:	8b 81       	ldd	r24, Y+3	; 0x03
    2764:	98 27       	eor	r25, r24
    2766:	8c 81       	ldd	r24, Y+4	; 0x04
    2768:	98 27       	eor	r25, r24
    276a:	8d 81       	ldd	r24, Y+5	; 0x05
    276c:	89 27       	eor	r24, r25
    276e:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[0] = mul2(tmp[0]   ^ tmp[1]) ^ tmp[0]   ^ t;
    2770:	9a 81       	ldd	r25, Y+2	; 0x02
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	89 27       	eor	r24, r25
    2776:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    277a:	98 2f       	mov	r25, r24
    277c:	8a 81       	ldd	r24, Y+2	; 0x02
    277e:	98 27       	eor	r25, r24
    2780:	89 81       	ldd	r24, Y+1	; 0x01
    2782:	89 27       	eor	r24, r25
    2784:	f8 01       	movw	r30, r16
    2786:	80 83       	st	Z, r24
        ciphertext[1] = mul2(tmp[1] ^ tmp[2]) ^ tmp[1] ^ t;
    2788:	68 01       	movw	r12, r16
    278a:	ff ef       	ldi	r31, 0xFF	; 255
    278c:	cf 1a       	sub	r12, r31
    278e:	df 0a       	sbc	r13, r31
    2790:	9b 81       	ldd	r25, Y+3	; 0x03
    2792:	8c 81       	ldd	r24, Y+4	; 0x04
    2794:	89 27       	eor	r24, r25
    2796:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    279a:	98 2f       	mov	r25, r24
    279c:	8b 81       	ldd	r24, Y+3	; 0x03
    279e:	98 27       	eor	r25, r24
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	89 27       	eor	r24, r25
    27a4:	f6 01       	movw	r30, r12
    27a6:	80 83       	st	Z, r24
        ciphertext[2] = mul2(tmp[2] ^ tmp[3]) ^ tmp[2] ^ t;
    27a8:	68 01       	movw	r12, r16
    27aa:	f2 e0       	ldi	r31, 0x02	; 2
    27ac:	cf 0e       	add	r12, r31
    27ae:	d1 1c       	adc	r13, r1
    27b0:	9c 81       	ldd	r25, Y+4	; 0x04
    27b2:	8d 81       	ldd	r24, Y+5	; 0x05
    27b4:	89 27       	eor	r24, r25
    27b6:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    27ba:	98 2f       	mov	r25, r24
    27bc:	8c 81       	ldd	r24, Y+4	; 0x04
    27be:	98 27       	eor	r25, r24
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	89 27       	eor	r24, r25
    27c4:	f6 01       	movw	r30, r12
    27c6:	80 83       	st	Z, r24
        ciphertext[3] = mul2(tmp[3] ^ tmp[0]  ) ^ tmp[3] ^ t;
    27c8:	68 01       	movw	r12, r16
    27ca:	f3 e0       	ldi	r31, 0x03	; 3
    27cc:	cf 0e       	add	r12, r31
    27ce:	d1 1c       	adc	r13, r1
    27d0:	9d 81       	ldd	r25, Y+5	; 0x05
    27d2:	8a 81       	ldd	r24, Y+2	; 0x02
    27d4:	89 27       	eor	r24, r25
    27d6:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    27da:	98 2f       	mov	r25, r24
    27dc:	8d 81       	ldd	r24, Y+5	; 0x05
    27de:	98 27       	eor	r25, r24
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	89 27       	eor	r24, r25
    27e4:	f6 01       	movw	r30, r12
    27e6:	80 83       	st	Z, r24
			
		t = tmp[4] ^ tmp[5] ^ tmp[6] ^ tmp[7];
    27e8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ea:	8f 81       	ldd	r24, Y+7	; 0x07
    27ec:	98 27       	eor	r25, r24
    27ee:	88 85       	ldd	r24, Y+8	; 0x08
    27f0:	98 27       	eor	r25, r24
    27f2:	89 85       	ldd	r24, Y+9	; 0x09
    27f4:	89 27       	eor	r24, r25
    27f6:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[4] = mul2(tmp[4]   ^ tmp[5]) ^ tmp[4]   ^ t;
    27f8:	68 01       	movw	r12, r16
    27fa:	f4 e0       	ldi	r31, 0x04	; 4
    27fc:	cf 0e       	add	r12, r31
    27fe:	d1 1c       	adc	r13, r1
    2800:	9e 81       	ldd	r25, Y+6	; 0x06
    2802:	8f 81       	ldd	r24, Y+7	; 0x07
    2804:	89 27       	eor	r24, r25
    2806:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    280a:	98 2f       	mov	r25, r24
    280c:	8e 81       	ldd	r24, Y+6	; 0x06
    280e:	98 27       	eor	r25, r24
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	89 27       	eor	r24, r25
    2814:	f6 01       	movw	r30, r12
    2816:	80 83       	st	Z, r24
        ciphertext[5] = mul2(tmp[5] ^ tmp[6]) ^ tmp[5] ^ t;
    2818:	68 01       	movw	r12, r16
    281a:	f5 e0       	ldi	r31, 0x05	; 5
    281c:	cf 0e       	add	r12, r31
    281e:	d1 1c       	adc	r13, r1
    2820:	9f 81       	ldd	r25, Y+7	; 0x07
    2822:	88 85       	ldd	r24, Y+8	; 0x08
    2824:	89 27       	eor	r24, r25
    2826:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    282a:	98 2f       	mov	r25, r24
    282c:	8f 81       	ldd	r24, Y+7	; 0x07
    282e:	98 27       	eor	r25, r24
    2830:	89 81       	ldd	r24, Y+1	; 0x01
    2832:	89 27       	eor	r24, r25
    2834:	f6 01       	movw	r30, r12
    2836:	80 83       	st	Z, r24
        ciphertext[6] = mul2(tmp[6] ^ tmp[7]) ^ tmp[6] ^ t;
    2838:	68 01       	movw	r12, r16
    283a:	f6 e0       	ldi	r31, 0x06	; 6
    283c:	cf 0e       	add	r12, r31
    283e:	d1 1c       	adc	r13, r1
    2840:	98 85       	ldd	r25, Y+8	; 0x08
    2842:	89 85       	ldd	r24, Y+9	; 0x09
    2844:	89 27       	eor	r24, r25
    2846:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    284a:	98 2f       	mov	r25, r24
    284c:	88 85       	ldd	r24, Y+8	; 0x08
    284e:	98 27       	eor	r25, r24
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	89 27       	eor	r24, r25
    2854:	f6 01       	movw	r30, r12
    2856:	80 83       	st	Z, r24
        ciphertext[7] = mul2(tmp[7] ^ tmp[4]  ) ^ tmp[7] ^ t;
    2858:	68 01       	movw	r12, r16
    285a:	f7 e0       	ldi	r31, 0x07	; 7
    285c:	cf 0e       	add	r12, r31
    285e:	d1 1c       	adc	r13, r1
    2860:	99 85       	ldd	r25, Y+9	; 0x09
    2862:	8e 81       	ldd	r24, Y+6	; 0x06
    2864:	89 27       	eor	r24, r25
    2866:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    286a:	98 2f       	mov	r25, r24
    286c:	89 85       	ldd	r24, Y+9	; 0x09
    286e:	98 27       	eor	r25, r24
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	89 27       	eor	r24, r25
    2874:	f6 01       	movw	r30, r12
    2876:	80 83       	st	Z, r24
			
		t = tmp[8] ^ tmp[9] ^ tmp[10] ^ tmp[11];
    2878:	9a 85       	ldd	r25, Y+10	; 0x0a
    287a:	8b 85       	ldd	r24, Y+11	; 0x0b
    287c:	98 27       	eor	r25, r24
    287e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2880:	98 27       	eor	r25, r24
    2882:	8d 85       	ldd	r24, Y+13	; 0x0d
    2884:	89 27       	eor	r24, r25
    2886:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[8]  = mul2(tmp[8]   ^ tmp[9]) ^ tmp[8]   ^ t;
    2888:	68 01       	movw	r12, r16
    288a:	f8 e0       	ldi	r31, 0x08	; 8
    288c:	cf 0e       	add	r12, r31
    288e:	d1 1c       	adc	r13, r1
    2890:	9a 85       	ldd	r25, Y+10	; 0x0a
    2892:	8b 85       	ldd	r24, Y+11	; 0x0b
    2894:	89 27       	eor	r24, r25
    2896:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    289a:	98 2f       	mov	r25, r24
    289c:	8a 85       	ldd	r24, Y+10	; 0x0a
    289e:	98 27       	eor	r25, r24
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	89 27       	eor	r24, r25
    28a4:	f6 01       	movw	r30, r12
    28a6:	80 83       	st	Z, r24
        ciphertext[9]  = mul2(tmp[9] ^ tmp[10]) ^ tmp[9] ^ t;
    28a8:	68 01       	movw	r12, r16
    28aa:	f9 e0       	ldi	r31, 0x09	; 9
    28ac:	cf 0e       	add	r12, r31
    28ae:	d1 1c       	adc	r13, r1
    28b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    28b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    28b4:	89 27       	eor	r24, r25
    28b6:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    28ba:	98 2f       	mov	r25, r24
    28bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    28be:	98 27       	eor	r25, r24
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	89 27       	eor	r24, r25
    28c4:	f6 01       	movw	r30, r12
    28c6:	80 83       	st	Z, r24
        ciphertext[10] = mul2(tmp[10] ^ tmp[11]) ^ tmp[10] ^ t;
    28c8:	68 01       	movw	r12, r16
    28ca:	fa e0       	ldi	r31, 0x0A	; 10
    28cc:	cf 0e       	add	r12, r31
    28ce:	d1 1c       	adc	r13, r1
    28d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    28d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28d4:	89 27       	eor	r24, r25
    28d6:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    28da:	98 2f       	mov	r25, r24
    28dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    28de:	98 27       	eor	r25, r24
    28e0:	89 81       	ldd	r24, Y+1	; 0x01
    28e2:	89 27       	eor	r24, r25
    28e4:	f6 01       	movw	r30, r12
    28e6:	80 83       	st	Z, r24
        ciphertext[11] = mul2(tmp[11] ^ tmp[8]  ) ^ tmp[11] ^ t;
    28e8:	68 01       	movw	r12, r16
    28ea:	fb e0       	ldi	r31, 0x0B	; 11
    28ec:	cf 0e       	add	r12, r31
    28ee:	d1 1c       	adc	r13, r1
    28f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    28f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    28f4:	89 27       	eor	r24, r25
    28f6:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    28fa:	98 2f       	mov	r25, r24
    28fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    28fe:	98 27       	eor	r25, r24
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	89 27       	eor	r24, r25
    2904:	f6 01       	movw	r30, r12
    2906:	80 83       	st	Z, r24
			
		t = tmp[12] ^ tmp[13] ^ tmp[14] ^ tmp[15];
    2908:	9e 85       	ldd	r25, Y+14	; 0x0e
    290a:	8f 85       	ldd	r24, Y+15	; 0x0f
    290c:	98 27       	eor	r25, r24
    290e:	88 89       	ldd	r24, Y+16	; 0x10
    2910:	98 27       	eor	r25, r24
    2912:	89 89       	ldd	r24, Y+17	; 0x11
    2914:	89 27       	eor	r24, r25
    2916:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[12] = mul2(tmp[12]   ^ tmp[13]) ^ tmp[12]   ^ t;
    2918:	68 01       	movw	r12, r16
    291a:	fc e0       	ldi	r31, 0x0C	; 12
    291c:	cf 0e       	add	r12, r31
    291e:	d1 1c       	adc	r13, r1
    2920:	9e 85       	ldd	r25, Y+14	; 0x0e
    2922:	8f 85       	ldd	r24, Y+15	; 0x0f
    2924:	89 27       	eor	r24, r25
    2926:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    292a:	98 2f       	mov	r25, r24
    292c:	8e 85       	ldd	r24, Y+14	; 0x0e
    292e:	98 27       	eor	r25, r24
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	89 27       	eor	r24, r25
    2934:	f6 01       	movw	r30, r12
    2936:	80 83       	st	Z, r24
        ciphertext[13] = mul2(tmp[13] ^ tmp[14]) ^ tmp[13] ^ t;
    2938:	68 01       	movw	r12, r16
    293a:	fd e0       	ldi	r31, 0x0D	; 13
    293c:	cf 0e       	add	r12, r31
    293e:	d1 1c       	adc	r13, r1
    2940:	9f 85       	ldd	r25, Y+15	; 0x0f
    2942:	88 89       	ldd	r24, Y+16	; 0x10
    2944:	89 27       	eor	r24, r25
    2946:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    294a:	98 2f       	mov	r25, r24
    294c:	8f 85       	ldd	r24, Y+15	; 0x0f
    294e:	98 27       	eor	r25, r24
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	89 27       	eor	r24, r25
    2954:	f6 01       	movw	r30, r12
    2956:	80 83       	st	Z, r24
        ciphertext[14] = mul2(tmp[14] ^ tmp[15]) ^ tmp[14] ^ t;
    2958:	68 01       	movw	r12, r16
    295a:	fe e0       	ldi	r31, 0x0E	; 14
    295c:	cf 0e       	add	r12, r31
    295e:	d1 1c       	adc	r13, r1
    2960:	98 89       	ldd	r25, Y+16	; 0x10
    2962:	89 89       	ldd	r24, Y+17	; 0x11
    2964:	89 27       	eor	r24, r25
    2966:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    296a:	98 2f       	mov	r25, r24
    296c:	88 89       	ldd	r24, Y+16	; 0x10
    296e:	98 27       	eor	r25, r24
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	89 27       	eor	r24, r25
    2974:	f6 01       	movw	r30, r12
    2976:	80 83       	st	Z, r24
        ciphertext[15] = mul2(tmp[15] ^ tmp[12]  ) ^ tmp[15] ^ t;
    2978:	68 01       	movw	r12, r16
    297a:	ff e0       	ldi	r31, 0x0F	; 15
    297c:	cf 0e       	add	r12, r31
    297e:	d1 1c       	adc	r13, r1
    2980:	99 89       	ldd	r25, Y+17	; 0x11
    2982:	8e 85       	ldd	r24, Y+14	; 0x0e
    2984:	89 27       	eor	r24, r25
    2986:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    298a:	98 2f       	mov	r25, r24
    298c:	89 89       	ldd	r24, Y+17	; 0x11
    298e:	98 27       	eor	r25, r24
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	89 27       	eor	r24, r25
    2994:	f6 01       	movw	r30, r12
    2996:	80 83       	st	Z, r24
		
		*(ciphertext+0) ^= *roundkeys++;
    2998:	c7 01       	movw	r24, r14
    299a:	7c 01       	movw	r14, r24
    299c:	ff ef       	ldi	r31, 0xFF	; 255
    299e:	ef 1a       	sub	r14, r31
    29a0:	ff 0a       	sbc	r15, r31
    29a2:	fc 01       	movw	r30, r24
    29a4:	80 81       	ld	r24, Z
    29a6:	f8 01       	movw	r30, r16
    29a8:	90 81       	ld	r25, Z
    29aa:	89 27       	eor	r24, r25
    29ac:	f8 01       	movw	r30, r16
    29ae:	80 83       	st	Z, r24
		*(ciphertext+1) ^= *roundkeys++;
    29b0:	c7 01       	movw	r24, r14
    29b2:	7c 01       	movw	r14, r24
    29b4:	ff ef       	ldi	r31, 0xFF	; 255
    29b6:	ef 1a       	sub	r14, r31
    29b8:	ff 0a       	sbc	r15, r31
    29ba:	fc 01       	movw	r30, r24
    29bc:	40 81       	ld	r20, Z
    29be:	c8 01       	movw	r24, r16
    29c0:	01 96       	adiw	r24, 0x01	; 1
    29c2:	98 01       	movw	r18, r16
    29c4:	2f 5f       	subi	r18, 0xFF	; 255
    29c6:	3f 4f       	sbci	r19, 0xFF	; 255
    29c8:	f9 01       	movw	r30, r18
    29ca:	20 81       	ld	r18, Z
    29cc:	24 27       	eor	r18, r20
    29ce:	fc 01       	movw	r30, r24
    29d0:	20 83       	st	Z, r18
		*(ciphertext+2) ^= *roundkeys++;
    29d2:	c7 01       	movw	r24, r14
    29d4:	7c 01       	movw	r14, r24
    29d6:	ff ef       	ldi	r31, 0xFF	; 255
    29d8:	ef 1a       	sub	r14, r31
    29da:	ff 0a       	sbc	r15, r31
    29dc:	fc 01       	movw	r30, r24
    29de:	40 81       	ld	r20, Z
    29e0:	c8 01       	movw	r24, r16
    29e2:	02 96       	adiw	r24, 0x02	; 2
    29e4:	98 01       	movw	r18, r16
    29e6:	2e 5f       	subi	r18, 0xFE	; 254
    29e8:	3f 4f       	sbci	r19, 0xFF	; 255
    29ea:	f9 01       	movw	r30, r18
    29ec:	20 81       	ld	r18, Z
    29ee:	24 27       	eor	r18, r20
    29f0:	fc 01       	movw	r30, r24
    29f2:	20 83       	st	Z, r18
		*(ciphertext+3) ^= *roundkeys++;
    29f4:	c7 01       	movw	r24, r14
    29f6:	7c 01       	movw	r14, r24
    29f8:	ff ef       	ldi	r31, 0xFF	; 255
    29fa:	ef 1a       	sub	r14, r31
    29fc:	ff 0a       	sbc	r15, r31
    29fe:	fc 01       	movw	r30, r24
    2a00:	40 81       	ld	r20, Z
    2a02:	c8 01       	movw	r24, r16
    2a04:	03 96       	adiw	r24, 0x03	; 3
    2a06:	98 01       	movw	r18, r16
    2a08:	2d 5f       	subi	r18, 0xFD	; 253
    2a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0c:	f9 01       	movw	r30, r18
    2a0e:	20 81       	ld	r18, Z
    2a10:	24 27       	eor	r18, r20
    2a12:	fc 01       	movw	r30, r24
    2a14:	20 83       	st	Z, r18
		*(ciphertext+4) ^= *roundkeys++;
    2a16:	c7 01       	movw	r24, r14
    2a18:	7c 01       	movw	r14, r24
    2a1a:	ff ef       	ldi	r31, 0xFF	; 255
    2a1c:	ef 1a       	sub	r14, r31
    2a1e:	ff 0a       	sbc	r15, r31
    2a20:	fc 01       	movw	r30, r24
    2a22:	40 81       	ld	r20, Z
    2a24:	c8 01       	movw	r24, r16
    2a26:	04 96       	adiw	r24, 0x04	; 4
    2a28:	98 01       	movw	r18, r16
    2a2a:	2c 5f       	subi	r18, 0xFC	; 252
    2a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a2e:	f9 01       	movw	r30, r18
    2a30:	20 81       	ld	r18, Z
    2a32:	24 27       	eor	r18, r20
    2a34:	fc 01       	movw	r30, r24
    2a36:	20 83       	st	Z, r18
		*(ciphertext+5) ^= *roundkeys++;
    2a38:	c7 01       	movw	r24, r14
    2a3a:	7c 01       	movw	r14, r24
    2a3c:	ff ef       	ldi	r31, 0xFF	; 255
    2a3e:	ef 1a       	sub	r14, r31
    2a40:	ff 0a       	sbc	r15, r31
    2a42:	fc 01       	movw	r30, r24
    2a44:	40 81       	ld	r20, Z
    2a46:	c8 01       	movw	r24, r16
    2a48:	05 96       	adiw	r24, 0x05	; 5
    2a4a:	98 01       	movw	r18, r16
    2a4c:	2b 5f       	subi	r18, 0xFB	; 251
    2a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a50:	f9 01       	movw	r30, r18
    2a52:	20 81       	ld	r18, Z
    2a54:	24 27       	eor	r18, r20
    2a56:	fc 01       	movw	r30, r24
    2a58:	20 83       	st	Z, r18
		*(ciphertext+6) ^= *roundkeys++;
    2a5a:	c7 01       	movw	r24, r14
    2a5c:	7c 01       	movw	r14, r24
    2a5e:	ff ef       	ldi	r31, 0xFF	; 255
    2a60:	ef 1a       	sub	r14, r31
    2a62:	ff 0a       	sbc	r15, r31
    2a64:	fc 01       	movw	r30, r24
    2a66:	40 81       	ld	r20, Z
    2a68:	c8 01       	movw	r24, r16
    2a6a:	06 96       	adiw	r24, 0x06	; 6
    2a6c:	98 01       	movw	r18, r16
    2a6e:	2a 5f       	subi	r18, 0xFA	; 250
    2a70:	3f 4f       	sbci	r19, 0xFF	; 255
    2a72:	f9 01       	movw	r30, r18
    2a74:	20 81       	ld	r18, Z
    2a76:	24 27       	eor	r18, r20
    2a78:	fc 01       	movw	r30, r24
    2a7a:	20 83       	st	Z, r18
		*(ciphertext+7) ^= *roundkeys++;
    2a7c:	c7 01       	movw	r24, r14
    2a7e:	7c 01       	movw	r14, r24
    2a80:	ff ef       	ldi	r31, 0xFF	; 255
    2a82:	ef 1a       	sub	r14, r31
    2a84:	ff 0a       	sbc	r15, r31
    2a86:	fc 01       	movw	r30, r24
    2a88:	40 81       	ld	r20, Z
    2a8a:	c8 01       	movw	r24, r16
    2a8c:	07 96       	adiw	r24, 0x07	; 7
    2a8e:	98 01       	movw	r18, r16
    2a90:	29 5f       	subi	r18, 0xF9	; 249
    2a92:	3f 4f       	sbci	r19, 0xFF	; 255
    2a94:	f9 01       	movw	r30, r18
    2a96:	20 81       	ld	r18, Z
    2a98:	24 27       	eor	r18, r20
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	20 83       	st	Z, r18
		*(ciphertext+8) ^= *roundkeys++;
    2a9e:	c7 01       	movw	r24, r14
    2aa0:	7c 01       	movw	r14, r24
    2aa2:	ff ef       	ldi	r31, 0xFF	; 255
    2aa4:	ef 1a       	sub	r14, r31
    2aa6:	ff 0a       	sbc	r15, r31
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	40 81       	ld	r20, Z
    2aac:	c8 01       	movw	r24, r16
    2aae:	08 96       	adiw	r24, 0x08	; 8
    2ab0:	98 01       	movw	r18, r16
    2ab2:	28 5f       	subi	r18, 0xF8	; 248
    2ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab6:	f9 01       	movw	r30, r18
    2ab8:	20 81       	ld	r18, Z
    2aba:	24 27       	eor	r18, r20
    2abc:	fc 01       	movw	r30, r24
    2abe:	20 83       	st	Z, r18
		*(ciphertext+9) ^= *roundkeys++;
    2ac0:	c7 01       	movw	r24, r14
    2ac2:	7c 01       	movw	r14, r24
    2ac4:	ff ef       	ldi	r31, 0xFF	; 255
    2ac6:	ef 1a       	sub	r14, r31
    2ac8:	ff 0a       	sbc	r15, r31
    2aca:	fc 01       	movw	r30, r24
    2acc:	40 81       	ld	r20, Z
    2ace:	c8 01       	movw	r24, r16
    2ad0:	09 96       	adiw	r24, 0x09	; 9
    2ad2:	98 01       	movw	r18, r16
    2ad4:	27 5f       	subi	r18, 0xF7	; 247
    2ad6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad8:	f9 01       	movw	r30, r18
    2ada:	20 81       	ld	r18, Z
    2adc:	24 27       	eor	r18, r20
    2ade:	fc 01       	movw	r30, r24
    2ae0:	20 83       	st	Z, r18
		*(ciphertext+10) ^= *roundkeys++;
    2ae2:	c7 01       	movw	r24, r14
    2ae4:	7c 01       	movw	r14, r24
    2ae6:	ff ef       	ldi	r31, 0xFF	; 255
    2ae8:	ef 1a       	sub	r14, r31
    2aea:	ff 0a       	sbc	r15, r31
    2aec:	fc 01       	movw	r30, r24
    2aee:	40 81       	ld	r20, Z
    2af0:	c8 01       	movw	r24, r16
    2af2:	0a 96       	adiw	r24, 0x0a	; 10
    2af4:	98 01       	movw	r18, r16
    2af6:	26 5f       	subi	r18, 0xF6	; 246
    2af8:	3f 4f       	sbci	r19, 0xFF	; 255
    2afa:	f9 01       	movw	r30, r18
    2afc:	20 81       	ld	r18, Z
    2afe:	24 27       	eor	r18, r20
    2b00:	fc 01       	movw	r30, r24
    2b02:	20 83       	st	Z, r18
		*(ciphertext+11) ^= *roundkeys++;
    2b04:	c7 01       	movw	r24, r14
    2b06:	7c 01       	movw	r14, r24
    2b08:	ff ef       	ldi	r31, 0xFF	; 255
    2b0a:	ef 1a       	sub	r14, r31
    2b0c:	ff 0a       	sbc	r15, r31
    2b0e:	fc 01       	movw	r30, r24
    2b10:	40 81       	ld	r20, Z
    2b12:	c8 01       	movw	r24, r16
    2b14:	0b 96       	adiw	r24, 0x0b	; 11
    2b16:	98 01       	movw	r18, r16
    2b18:	25 5f       	subi	r18, 0xF5	; 245
    2b1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b1c:	f9 01       	movw	r30, r18
    2b1e:	20 81       	ld	r18, Z
    2b20:	24 27       	eor	r18, r20
    2b22:	fc 01       	movw	r30, r24
    2b24:	20 83       	st	Z, r18
		*(ciphertext+12) ^= *roundkeys++;
    2b26:	c7 01       	movw	r24, r14
    2b28:	7c 01       	movw	r14, r24
    2b2a:	ff ef       	ldi	r31, 0xFF	; 255
    2b2c:	ef 1a       	sub	r14, r31
    2b2e:	ff 0a       	sbc	r15, r31
    2b30:	fc 01       	movw	r30, r24
    2b32:	40 81       	ld	r20, Z
    2b34:	c8 01       	movw	r24, r16
    2b36:	0c 96       	adiw	r24, 0x0c	; 12
    2b38:	98 01       	movw	r18, r16
    2b3a:	24 5f       	subi	r18, 0xF4	; 244
    2b3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b3e:	f9 01       	movw	r30, r18
    2b40:	20 81       	ld	r18, Z
    2b42:	24 27       	eor	r18, r20
    2b44:	fc 01       	movw	r30, r24
    2b46:	20 83       	st	Z, r18
		*(ciphertext+13) ^= *roundkeys++;
    2b48:	c7 01       	movw	r24, r14
    2b4a:	7c 01       	movw	r14, r24
    2b4c:	ff ef       	ldi	r31, 0xFF	; 255
    2b4e:	ef 1a       	sub	r14, r31
    2b50:	ff 0a       	sbc	r15, r31
    2b52:	fc 01       	movw	r30, r24
    2b54:	40 81       	ld	r20, Z
    2b56:	c8 01       	movw	r24, r16
    2b58:	0d 96       	adiw	r24, 0x0d	; 13
    2b5a:	98 01       	movw	r18, r16
    2b5c:	23 5f       	subi	r18, 0xF3	; 243
    2b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b60:	f9 01       	movw	r30, r18
    2b62:	20 81       	ld	r18, Z
    2b64:	24 27       	eor	r18, r20
    2b66:	fc 01       	movw	r30, r24
    2b68:	20 83       	st	Z, r18
		*(ciphertext+14) ^= *roundkeys++;
    2b6a:	c7 01       	movw	r24, r14
    2b6c:	7c 01       	movw	r14, r24
    2b6e:	ff ef       	ldi	r31, 0xFF	; 255
    2b70:	ef 1a       	sub	r14, r31
    2b72:	ff 0a       	sbc	r15, r31
    2b74:	fc 01       	movw	r30, r24
    2b76:	40 81       	ld	r20, Z
    2b78:	c8 01       	movw	r24, r16
    2b7a:	0e 96       	adiw	r24, 0x0e	; 14
    2b7c:	98 01       	movw	r18, r16
    2b7e:	22 5f       	subi	r18, 0xF2	; 242
    2b80:	3f 4f       	sbci	r19, 0xFF	; 255
    2b82:	f9 01       	movw	r30, r18
    2b84:	20 81       	ld	r18, Z
    2b86:	24 27       	eor	r18, r20
    2b88:	fc 01       	movw	r30, r24
    2b8a:	20 83       	st	Z, r18
		*(ciphertext+15) ^= *roundkeys++;
    2b8c:	c7 01       	movw	r24, r14
    2b8e:	7c 01       	movw	r14, r24
    2b90:	ff ef       	ldi	r31, 0xFF	; 255
    2b92:	ef 1a       	sub	r14, r31
    2b94:	ff 0a       	sbc	r15, r31
    2b96:	fc 01       	movw	r30, r24
    2b98:	40 81       	ld	r20, Z
    2b9a:	c8 01       	movw	r24, r16
    2b9c:	0f 96       	adiw	r24, 0x0f	; 15
    2b9e:	98 01       	movw	r18, r16
    2ba0:	21 5f       	subi	r18, 0xF1	; 241
    2ba2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba4:	f9 01       	movw	r30, r18
    2ba6:	20 81       	ld	r18, Z
    2ba8:	24 27       	eor	r18, r20
    2baa:	fc 01       	movw	r30, r24
    2bac:	20 83       	st	Z, r18
		
		*(tmp+0) = SBOX[*(ciphertext+0)];
    2bae:	f8 01       	movw	r30, r16
    2bb0:	80 81       	ld	r24, Z
    2bb2:	88 2f       	mov	r24, r24
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	80 50       	subi	r24, 0x00	; 0
    2bb8:	9e 4f       	sbci	r25, 0xFE	; 254
    2bba:	fc 01       	movw	r30, r24
    2bbc:	80 81       	ld	r24, Z
    2bbe:	8a 83       	std	Y+2, r24	; 0x02
		*(tmp+1) = SBOX[*(ciphertext+1)];
    2bc0:	c8 01       	movw	r24, r16
    2bc2:	01 96       	adiw	r24, 0x01	; 1
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	80 81       	ld	r24, Z
    2bc8:	88 2f       	mov	r24, r24
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	80 50       	subi	r24, 0x00	; 0
    2bce:	9e 4f       	sbci	r25, 0xFE	; 254
    2bd0:	fc 01       	movw	r30, r24
    2bd2:	80 81       	ld	r24, Z
    2bd4:	8b 83       	std	Y+3, r24	; 0x03
		*(tmp+2) = SBOX[*(ciphertext+2)];
    2bd6:	c8 01       	movw	r24, r16
    2bd8:	02 96       	adiw	r24, 0x02	; 2
    2bda:	fc 01       	movw	r30, r24
    2bdc:	80 81       	ld	r24, Z
    2bde:	88 2f       	mov	r24, r24
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	80 50       	subi	r24, 0x00	; 0
    2be4:	9e 4f       	sbci	r25, 0xFE	; 254
    2be6:	fc 01       	movw	r30, r24
    2be8:	80 81       	ld	r24, Z
    2bea:	8c 83       	std	Y+4, r24	; 0x04
		*(tmp+3) = SBOX[*(ciphertext+3)];
    2bec:	c8 01       	movw	r24, r16
    2bee:	03 96       	adiw	r24, 0x03	; 3
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	80 81       	ld	r24, Z
    2bf4:	88 2f       	mov	r24, r24
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	80 50       	subi	r24, 0x00	; 0
    2bfa:	9e 4f       	sbci	r25, 0xFE	; 254
    2bfc:	fc 01       	movw	r30, r24
    2bfe:	80 81       	ld	r24, Z
    2c00:	8d 83       	std	Y+5, r24	; 0x05
		*(tmp+4) = SBOX[*(ciphertext+4)];
    2c02:	c8 01       	movw	r24, r16
    2c04:	04 96       	adiw	r24, 0x04	; 4
    2c06:	fc 01       	movw	r30, r24
    2c08:	80 81       	ld	r24, Z
    2c0a:	88 2f       	mov	r24, r24
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	80 50       	subi	r24, 0x00	; 0
    2c10:	9e 4f       	sbci	r25, 0xFE	; 254
    2c12:	fc 01       	movw	r30, r24
    2c14:	80 81       	ld	r24, Z
    2c16:	8e 83       	std	Y+6, r24	; 0x06
		*(tmp+5) = SBOX[*(ciphertext+5)];
    2c18:	c8 01       	movw	r24, r16
    2c1a:	05 96       	adiw	r24, 0x05	; 5
    2c1c:	fc 01       	movw	r30, r24
    2c1e:	80 81       	ld	r24, Z
    2c20:	88 2f       	mov	r24, r24
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	80 50       	subi	r24, 0x00	; 0
    2c26:	9e 4f       	sbci	r25, 0xFE	; 254
    2c28:	fc 01       	movw	r30, r24
    2c2a:	80 81       	ld	r24, Z
    2c2c:	8f 83       	std	Y+7, r24	; 0x07
		*(tmp+6) = SBOX[*(ciphertext+6)];
    2c2e:	c8 01       	movw	r24, r16
    2c30:	06 96       	adiw	r24, 0x06	; 6
    2c32:	fc 01       	movw	r30, r24
    2c34:	80 81       	ld	r24, Z
    2c36:	88 2f       	mov	r24, r24
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	80 50       	subi	r24, 0x00	; 0
    2c3c:	9e 4f       	sbci	r25, 0xFE	; 254
    2c3e:	fc 01       	movw	r30, r24
    2c40:	80 81       	ld	r24, Z
    2c42:	88 87       	std	Y+8, r24	; 0x08
		*(tmp+7) = SBOX[*(ciphertext+7)];
    2c44:	c8 01       	movw	r24, r16
    2c46:	07 96       	adiw	r24, 0x07	; 7
    2c48:	fc 01       	movw	r30, r24
    2c4a:	80 81       	ld	r24, Z
    2c4c:	88 2f       	mov	r24, r24
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	80 50       	subi	r24, 0x00	; 0
    2c52:	9e 4f       	sbci	r25, 0xFE	; 254
    2c54:	fc 01       	movw	r30, r24
    2c56:	80 81       	ld	r24, Z
    2c58:	89 87       	std	Y+9, r24	; 0x09
		*(tmp+8) = SBOX[*(ciphertext+8)];
    2c5a:	c8 01       	movw	r24, r16
    2c5c:	08 96       	adiw	r24, 0x08	; 8
    2c5e:	fc 01       	movw	r30, r24
    2c60:	80 81       	ld	r24, Z
    2c62:	88 2f       	mov	r24, r24
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	80 50       	subi	r24, 0x00	; 0
    2c68:	9e 4f       	sbci	r25, 0xFE	; 254
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	80 81       	ld	r24, Z
    2c6e:	8a 87       	std	Y+10, r24	; 0x0a
		*(tmp+9) = SBOX[*(ciphertext+9)];
    2c70:	c8 01       	movw	r24, r16
    2c72:	09 96       	adiw	r24, 0x09	; 9
    2c74:	fc 01       	movw	r30, r24
    2c76:	80 81       	ld	r24, Z
    2c78:	88 2f       	mov	r24, r24
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	80 50       	subi	r24, 0x00	; 0
    2c7e:	9e 4f       	sbci	r25, 0xFE	; 254
    2c80:	fc 01       	movw	r30, r24
    2c82:	80 81       	ld	r24, Z
    2c84:	8b 87       	std	Y+11, r24	; 0x0b
		*(tmp+10) = SBOX[*(ciphertext+10)];
    2c86:	c8 01       	movw	r24, r16
    2c88:	0a 96       	adiw	r24, 0x0a	; 10
    2c8a:	fc 01       	movw	r30, r24
    2c8c:	80 81       	ld	r24, Z
    2c8e:	88 2f       	mov	r24, r24
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	80 50       	subi	r24, 0x00	; 0
    2c94:	9e 4f       	sbci	r25, 0xFE	; 254
    2c96:	fc 01       	movw	r30, r24
    2c98:	80 81       	ld	r24, Z
    2c9a:	8c 87       	std	Y+12, r24	; 0x0c
		*(tmp+11) = SBOX[*(ciphertext+11)];
    2c9c:	c8 01       	movw	r24, r16
    2c9e:	0b 96       	adiw	r24, 0x0b	; 11
    2ca0:	fc 01       	movw	r30, r24
    2ca2:	80 81       	ld	r24, Z
    2ca4:	88 2f       	mov	r24, r24
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	80 50       	subi	r24, 0x00	; 0
    2caa:	9e 4f       	sbci	r25, 0xFE	; 254
    2cac:	fc 01       	movw	r30, r24
    2cae:	80 81       	ld	r24, Z
    2cb0:	8d 87       	std	Y+13, r24	; 0x0d
		*(tmp+12) = SBOX[*(ciphertext+12)];
    2cb2:	c8 01       	movw	r24, r16
    2cb4:	0c 96       	adiw	r24, 0x0c	; 12
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	80 81       	ld	r24, Z
    2cba:	88 2f       	mov	r24, r24
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	80 50       	subi	r24, 0x00	; 0
    2cc0:	9e 4f       	sbci	r25, 0xFE	; 254
    2cc2:	fc 01       	movw	r30, r24
    2cc4:	80 81       	ld	r24, Z
    2cc6:	8e 87       	std	Y+14, r24	; 0x0e
		*(tmp+13) = SBOX[*(ciphertext+13)];
    2cc8:	c8 01       	movw	r24, r16
    2cca:	0d 96       	adiw	r24, 0x0d	; 13
    2ccc:	fc 01       	movw	r30, r24
    2cce:	80 81       	ld	r24, Z
    2cd0:	88 2f       	mov	r24, r24
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	80 50       	subi	r24, 0x00	; 0
    2cd6:	9e 4f       	sbci	r25, 0xFE	; 254
    2cd8:	fc 01       	movw	r30, r24
    2cda:	80 81       	ld	r24, Z
    2cdc:	8f 87       	std	Y+15, r24	; 0x0f
		*(tmp+14) = SBOX[*(ciphertext+14)];
    2cde:	c8 01       	movw	r24, r16
    2ce0:	0e 96       	adiw	r24, 0x0e	; 14
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	80 81       	ld	r24, Z
    2ce6:	88 2f       	mov	r24, r24
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	80 50       	subi	r24, 0x00	; 0
    2cec:	9e 4f       	sbci	r25, 0xFE	; 254
    2cee:	fc 01       	movw	r30, r24
    2cf0:	80 81       	ld	r24, Z
    2cf2:	88 8b       	std	Y+16, r24	; 0x10
		*(tmp+15) = SBOX[*(ciphertext+15)];
    2cf4:	c8 01       	movw	r24, r16
    2cf6:	0f 96       	adiw	r24, 0x0f	; 15
    2cf8:	fc 01       	movw	r30, r24
    2cfa:	80 81       	ld	r24, Z
    2cfc:	88 2f       	mov	r24, r24
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	80 50       	subi	r24, 0x00	; 0
    2d02:	9e 4f       	sbci	r25, 0xFE	; 254
    2d04:	fc 01       	movw	r30, r24
    2d06:	80 81       	ld	r24, Z
    2d08:	89 8b       	std	Y+17, r24	; 0x11
        shift_rows(tmp);
    2d0a:	ce 01       	movw	r24, r28
    2d0c:	02 96       	adiw	r24, 0x02	; 2
    2d0e:	0e 94 18 09 	call	0x1230	; 0x1230 <shift_rows>
		
		t = tmp[0] ^ tmp[1] ^ tmp[2] ^ tmp[3];
    2d12:	9a 81       	ldd	r25, Y+2	; 0x02
    2d14:	8b 81       	ldd	r24, Y+3	; 0x03
    2d16:	98 27       	eor	r25, r24
    2d18:	8c 81       	ldd	r24, Y+4	; 0x04
    2d1a:	98 27       	eor	r25, r24
    2d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1e:	89 27       	eor	r24, r25
    2d20:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[0] = mul2(tmp[0]   ^ tmp[1]) ^ tmp[0]   ^ t;
    2d22:	9a 81       	ldd	r25, Y+2	; 0x02
    2d24:	8b 81       	ldd	r24, Y+3	; 0x03
    2d26:	89 27       	eor	r24, r25
    2d28:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2d2c:	98 2f       	mov	r25, r24
    2d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d30:	98 27       	eor	r25, r24
    2d32:	89 81       	ldd	r24, Y+1	; 0x01
    2d34:	89 27       	eor	r24, r25
    2d36:	f8 01       	movw	r30, r16
    2d38:	80 83       	st	Z, r24
        ciphertext[1] = mul2(tmp[1] ^ tmp[2]) ^ tmp[1] ^ t;
    2d3a:	68 01       	movw	r12, r16
    2d3c:	ff ef       	ldi	r31, 0xFF	; 255
    2d3e:	cf 1a       	sub	r12, r31
    2d40:	df 0a       	sbc	r13, r31
    2d42:	9b 81       	ldd	r25, Y+3	; 0x03
    2d44:	8c 81       	ldd	r24, Y+4	; 0x04
    2d46:	89 27       	eor	r24, r25
    2d48:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2d4c:	98 2f       	mov	r25, r24
    2d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d50:	98 27       	eor	r25, r24
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	89 27       	eor	r24, r25
    2d56:	f6 01       	movw	r30, r12
    2d58:	80 83       	st	Z, r24
        ciphertext[2] = mul2(tmp[2] ^ tmp[3]) ^ tmp[2] ^ t;
    2d5a:	68 01       	movw	r12, r16
    2d5c:	f2 e0       	ldi	r31, 0x02	; 2
    2d5e:	cf 0e       	add	r12, r31
    2d60:	d1 1c       	adc	r13, r1
    2d62:	9c 81       	ldd	r25, Y+4	; 0x04
    2d64:	8d 81       	ldd	r24, Y+5	; 0x05
    2d66:	89 27       	eor	r24, r25
    2d68:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2d6c:	98 2f       	mov	r25, r24
    2d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d70:	98 27       	eor	r25, r24
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	89 27       	eor	r24, r25
    2d76:	f6 01       	movw	r30, r12
    2d78:	80 83       	st	Z, r24
        ciphertext[3] = mul2(tmp[3] ^ tmp[0]  ) ^ tmp[3] ^ t;
    2d7a:	68 01       	movw	r12, r16
    2d7c:	f3 e0       	ldi	r31, 0x03	; 3
    2d7e:	cf 0e       	add	r12, r31
    2d80:	d1 1c       	adc	r13, r1
    2d82:	9d 81       	ldd	r25, Y+5	; 0x05
    2d84:	8a 81       	ldd	r24, Y+2	; 0x02
    2d86:	89 27       	eor	r24, r25
    2d88:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2d8c:	98 2f       	mov	r25, r24
    2d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d90:	98 27       	eor	r25, r24
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	89 27       	eor	r24, r25
    2d96:	f6 01       	movw	r30, r12
    2d98:	80 83       	st	Z, r24
			
		t = tmp[4] ^ tmp[5] ^ tmp[6] ^ tmp[7];
    2d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d9c:	8f 81       	ldd	r24, Y+7	; 0x07
    2d9e:	98 27       	eor	r25, r24
    2da0:	88 85       	ldd	r24, Y+8	; 0x08
    2da2:	98 27       	eor	r25, r24
    2da4:	89 85       	ldd	r24, Y+9	; 0x09
    2da6:	89 27       	eor	r24, r25
    2da8:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[4]   = mul2(tmp[4]   ^ tmp[5]) ^ tmp[4]   ^ t;
    2daa:	68 01       	movw	r12, r16
    2dac:	f4 e0       	ldi	r31, 0x04	; 4
    2dae:	cf 0e       	add	r12, r31
    2db0:	d1 1c       	adc	r13, r1
    2db2:	9e 81       	ldd	r25, Y+6	; 0x06
    2db4:	8f 81       	ldd	r24, Y+7	; 0x07
    2db6:	89 27       	eor	r24, r25
    2db8:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2dbc:	98 2f       	mov	r25, r24
    2dbe:	8e 81       	ldd	r24, Y+6	; 0x06
    2dc0:	98 27       	eor	r25, r24
    2dc2:	89 81       	ldd	r24, Y+1	; 0x01
    2dc4:	89 27       	eor	r24, r25
    2dc6:	f6 01       	movw	r30, r12
    2dc8:	80 83       	st	Z, r24
        ciphertext[5] = mul2(tmp[5] ^ tmp[6]) ^ tmp[5] ^ t;
    2dca:	68 01       	movw	r12, r16
    2dcc:	f5 e0       	ldi	r31, 0x05	; 5
    2dce:	cf 0e       	add	r12, r31
    2dd0:	d1 1c       	adc	r13, r1
    2dd2:	9f 81       	ldd	r25, Y+7	; 0x07
    2dd4:	88 85       	ldd	r24, Y+8	; 0x08
    2dd6:	89 27       	eor	r24, r25
    2dd8:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2ddc:	98 2f       	mov	r25, r24
    2dde:	8f 81       	ldd	r24, Y+7	; 0x07
    2de0:	98 27       	eor	r25, r24
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	89 27       	eor	r24, r25
    2de6:	f6 01       	movw	r30, r12
    2de8:	80 83       	st	Z, r24
        ciphertext[6] = mul2(tmp[6] ^ tmp[7]) ^ tmp[6] ^ t;
    2dea:	68 01       	movw	r12, r16
    2dec:	f6 e0       	ldi	r31, 0x06	; 6
    2dee:	cf 0e       	add	r12, r31
    2df0:	d1 1c       	adc	r13, r1
    2df2:	98 85       	ldd	r25, Y+8	; 0x08
    2df4:	89 85       	ldd	r24, Y+9	; 0x09
    2df6:	89 27       	eor	r24, r25
    2df8:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2dfc:	98 2f       	mov	r25, r24
    2dfe:	88 85       	ldd	r24, Y+8	; 0x08
    2e00:	98 27       	eor	r25, r24
    2e02:	89 81       	ldd	r24, Y+1	; 0x01
    2e04:	89 27       	eor	r24, r25
    2e06:	f6 01       	movw	r30, r12
    2e08:	80 83       	st	Z, r24
        ciphertext[7] = mul2(tmp[7] ^ tmp[4]  ) ^ tmp[7] ^ t;
    2e0a:	68 01       	movw	r12, r16
    2e0c:	f7 e0       	ldi	r31, 0x07	; 7
    2e0e:	cf 0e       	add	r12, r31
    2e10:	d1 1c       	adc	r13, r1
    2e12:	99 85       	ldd	r25, Y+9	; 0x09
    2e14:	8e 81       	ldd	r24, Y+6	; 0x06
    2e16:	89 27       	eor	r24, r25
    2e18:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2e1c:	98 2f       	mov	r25, r24
    2e1e:	89 85       	ldd	r24, Y+9	; 0x09
    2e20:	98 27       	eor	r25, r24
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	89 27       	eor	r24, r25
    2e26:	f6 01       	movw	r30, r12
    2e28:	80 83       	st	Z, r24
			
		t = tmp[8] ^ tmp[9] ^ tmp[10] ^ tmp[11];
    2e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e2c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e2e:	98 27       	eor	r25, r24
    2e30:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e32:	98 27       	eor	r25, r24
    2e34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e36:	89 27       	eor	r24, r25
    2e38:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[8]  = mul2(tmp[8]   ^ tmp[9]) ^ tmp[8]   ^ t;
    2e3a:	68 01       	movw	r12, r16
    2e3c:	f8 e0       	ldi	r31, 0x08	; 8
    2e3e:	cf 0e       	add	r12, r31
    2e40:	d1 1c       	adc	r13, r1
    2e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e44:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e46:	89 27       	eor	r24, r25
    2e48:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2e4c:	98 2f       	mov	r25, r24
    2e4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e50:	98 27       	eor	r25, r24
    2e52:	89 81       	ldd	r24, Y+1	; 0x01
    2e54:	89 27       	eor	r24, r25
    2e56:	f6 01       	movw	r30, r12
    2e58:	80 83       	st	Z, r24
        ciphertext[9]  = mul2(tmp[9] ^ tmp[10]) ^ tmp[9] ^ t;
    2e5a:	68 01       	movw	r12, r16
    2e5c:	f9 e0       	ldi	r31, 0x09	; 9
    2e5e:	cf 0e       	add	r12, r31
    2e60:	d1 1c       	adc	r13, r1
    2e62:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e64:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e66:	89 27       	eor	r24, r25
    2e68:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2e6c:	98 2f       	mov	r25, r24
    2e6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e70:	98 27       	eor	r25, r24
    2e72:	89 81       	ldd	r24, Y+1	; 0x01
    2e74:	89 27       	eor	r24, r25
    2e76:	f6 01       	movw	r30, r12
    2e78:	80 83       	st	Z, r24
        ciphertext[10] = mul2(tmp[10] ^ tmp[11]) ^ tmp[10] ^ t;
    2e7a:	68 01       	movw	r12, r16
    2e7c:	fa e0       	ldi	r31, 0x0A	; 10
    2e7e:	cf 0e       	add	r12, r31
    2e80:	d1 1c       	adc	r13, r1
    2e82:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e84:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e86:	89 27       	eor	r24, r25
    2e88:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2e8c:	98 2f       	mov	r25, r24
    2e8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e90:	98 27       	eor	r25, r24
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	89 27       	eor	r24, r25
    2e96:	f6 01       	movw	r30, r12
    2e98:	80 83       	st	Z, r24
        ciphertext[11] = mul2(tmp[11] ^ tmp[8]  ) ^ tmp[11] ^ t;
    2e9a:	68 01       	movw	r12, r16
    2e9c:	fb e0       	ldi	r31, 0x0B	; 11
    2e9e:	cf 0e       	add	r12, r31
    2ea0:	d1 1c       	adc	r13, r1
    2ea2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ea4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ea6:	89 27       	eor	r24, r25
    2ea8:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2eac:	98 2f       	mov	r25, r24
    2eae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb0:	98 27       	eor	r25, r24
    2eb2:	89 81       	ldd	r24, Y+1	; 0x01
    2eb4:	89 27       	eor	r24, r25
    2eb6:	f6 01       	movw	r30, r12
    2eb8:	80 83       	st	Z, r24
			
		t = tmp[12] ^ tmp[13] ^ tmp[14] ^ tmp[15];
    2eba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ebc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ebe:	98 27       	eor	r25, r24
    2ec0:	88 89       	ldd	r24, Y+16	; 0x10
    2ec2:	98 27       	eor	r25, r24
    2ec4:	89 89       	ldd	r24, Y+17	; 0x11
    2ec6:	89 27       	eor	r24, r25
    2ec8:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[12] = mul2(tmp[12]   ^ tmp[13]) ^ tmp[12]   ^ t;
    2eca:	68 01       	movw	r12, r16
    2ecc:	fc e0       	ldi	r31, 0x0C	; 12
    2ece:	cf 0e       	add	r12, r31
    2ed0:	d1 1c       	adc	r13, r1
    2ed2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ed6:	89 27       	eor	r24, r25
    2ed8:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2edc:	98 2f       	mov	r25, r24
    2ede:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ee0:	98 27       	eor	r25, r24
    2ee2:	89 81       	ldd	r24, Y+1	; 0x01
    2ee4:	89 27       	eor	r24, r25
    2ee6:	f6 01       	movw	r30, r12
    2ee8:	80 83       	st	Z, r24
        ciphertext[13] = mul2(tmp[13] ^ tmp[14]) ^ tmp[13] ^ t;
    2eea:	68 01       	movw	r12, r16
    2eec:	fd e0       	ldi	r31, 0x0D	; 13
    2eee:	cf 0e       	add	r12, r31
    2ef0:	d1 1c       	adc	r13, r1
    2ef2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ef4:	88 89       	ldd	r24, Y+16	; 0x10
    2ef6:	89 27       	eor	r24, r25
    2ef8:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2efc:	98 2f       	mov	r25, r24
    2efe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f00:	98 27       	eor	r25, r24
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	89 27       	eor	r24, r25
    2f06:	f6 01       	movw	r30, r12
    2f08:	80 83       	st	Z, r24
        ciphertext[14] = mul2(tmp[14] ^ tmp[15]) ^ tmp[14] ^ t;
    2f0a:	68 01       	movw	r12, r16
    2f0c:	fe e0       	ldi	r31, 0x0E	; 14
    2f0e:	cf 0e       	add	r12, r31
    2f10:	d1 1c       	adc	r13, r1
    2f12:	98 89       	ldd	r25, Y+16	; 0x10
    2f14:	89 89       	ldd	r24, Y+17	; 0x11
    2f16:	89 27       	eor	r24, r25
    2f18:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2f1c:	98 2f       	mov	r25, r24
    2f1e:	88 89       	ldd	r24, Y+16	; 0x10
    2f20:	98 27       	eor	r25, r24
    2f22:	89 81       	ldd	r24, Y+1	; 0x01
    2f24:	89 27       	eor	r24, r25
    2f26:	f6 01       	movw	r30, r12
    2f28:	80 83       	st	Z, r24
        ciphertext[15] = mul2(tmp[15] ^ tmp[12]  ) ^ tmp[15] ^ t;
    2f2a:	68 01       	movw	r12, r16
    2f2c:	ff e0       	ldi	r31, 0x0F	; 15
    2f2e:	cf 0e       	add	r12, r31
    2f30:	d1 1c       	adc	r13, r1
    2f32:	99 89       	ldd	r25, Y+17	; 0x11
    2f34:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f36:	89 27       	eor	r24, r25
    2f38:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    2f3c:	98 2f       	mov	r25, r24
    2f3e:	89 89       	ldd	r24, Y+17	; 0x11
    2f40:	98 27       	eor	r25, r24
    2f42:	89 81       	ldd	r24, Y+1	; 0x01
    2f44:	89 27       	eor	r24, r25
    2f46:	f6 01       	movw	r30, r12
    2f48:	80 83       	st	Z, r24
		
		*(ciphertext+0) ^= *roundkeys++;
    2f4a:	c7 01       	movw	r24, r14
    2f4c:	7c 01       	movw	r14, r24
    2f4e:	ff ef       	ldi	r31, 0xFF	; 255
    2f50:	ef 1a       	sub	r14, r31
    2f52:	ff 0a       	sbc	r15, r31
    2f54:	fc 01       	movw	r30, r24
    2f56:	80 81       	ld	r24, Z
    2f58:	f8 01       	movw	r30, r16
    2f5a:	90 81       	ld	r25, Z
    2f5c:	89 27       	eor	r24, r25
    2f5e:	f8 01       	movw	r30, r16
    2f60:	80 83       	st	Z, r24
		*(ciphertext+1) ^= *roundkeys++;
    2f62:	c7 01       	movw	r24, r14
    2f64:	7c 01       	movw	r14, r24
    2f66:	ff ef       	ldi	r31, 0xFF	; 255
    2f68:	ef 1a       	sub	r14, r31
    2f6a:	ff 0a       	sbc	r15, r31
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	40 81       	ld	r20, Z
    2f70:	c8 01       	movw	r24, r16
    2f72:	01 96       	adiw	r24, 0x01	; 1
    2f74:	98 01       	movw	r18, r16
    2f76:	2f 5f       	subi	r18, 0xFF	; 255
    2f78:	3f 4f       	sbci	r19, 0xFF	; 255
    2f7a:	f9 01       	movw	r30, r18
    2f7c:	20 81       	ld	r18, Z
    2f7e:	24 27       	eor	r18, r20
    2f80:	fc 01       	movw	r30, r24
    2f82:	20 83       	st	Z, r18
		*(ciphertext+2) ^= *roundkeys++;
    2f84:	c7 01       	movw	r24, r14
    2f86:	7c 01       	movw	r14, r24
    2f88:	ff ef       	ldi	r31, 0xFF	; 255
    2f8a:	ef 1a       	sub	r14, r31
    2f8c:	ff 0a       	sbc	r15, r31
    2f8e:	fc 01       	movw	r30, r24
    2f90:	40 81       	ld	r20, Z
    2f92:	c8 01       	movw	r24, r16
    2f94:	02 96       	adiw	r24, 0x02	; 2
    2f96:	98 01       	movw	r18, r16
    2f98:	2e 5f       	subi	r18, 0xFE	; 254
    2f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f9c:	f9 01       	movw	r30, r18
    2f9e:	20 81       	ld	r18, Z
    2fa0:	24 27       	eor	r18, r20
    2fa2:	fc 01       	movw	r30, r24
    2fa4:	20 83       	st	Z, r18
		*(ciphertext+3) ^= *roundkeys++;
    2fa6:	c7 01       	movw	r24, r14
    2fa8:	7c 01       	movw	r14, r24
    2faa:	ff ef       	ldi	r31, 0xFF	; 255
    2fac:	ef 1a       	sub	r14, r31
    2fae:	ff 0a       	sbc	r15, r31
    2fb0:	fc 01       	movw	r30, r24
    2fb2:	40 81       	ld	r20, Z
    2fb4:	c8 01       	movw	r24, r16
    2fb6:	03 96       	adiw	r24, 0x03	; 3
    2fb8:	98 01       	movw	r18, r16
    2fba:	2d 5f       	subi	r18, 0xFD	; 253
    2fbc:	3f 4f       	sbci	r19, 0xFF	; 255
    2fbe:	f9 01       	movw	r30, r18
    2fc0:	20 81       	ld	r18, Z
    2fc2:	24 27       	eor	r18, r20
    2fc4:	fc 01       	movw	r30, r24
    2fc6:	20 83       	st	Z, r18
		*(ciphertext+4) ^= *roundkeys++;
    2fc8:	c7 01       	movw	r24, r14
    2fca:	7c 01       	movw	r14, r24
    2fcc:	ff ef       	ldi	r31, 0xFF	; 255
    2fce:	ef 1a       	sub	r14, r31
    2fd0:	ff 0a       	sbc	r15, r31
    2fd2:	fc 01       	movw	r30, r24
    2fd4:	40 81       	ld	r20, Z
    2fd6:	c8 01       	movw	r24, r16
    2fd8:	04 96       	adiw	r24, 0x04	; 4
    2fda:	98 01       	movw	r18, r16
    2fdc:	2c 5f       	subi	r18, 0xFC	; 252
    2fde:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe0:	f9 01       	movw	r30, r18
    2fe2:	20 81       	ld	r18, Z
    2fe4:	24 27       	eor	r18, r20
    2fe6:	fc 01       	movw	r30, r24
    2fe8:	20 83       	st	Z, r18
		*(ciphertext+5) ^= *roundkeys++;
    2fea:	c7 01       	movw	r24, r14
    2fec:	7c 01       	movw	r14, r24
    2fee:	ff ef       	ldi	r31, 0xFF	; 255
    2ff0:	ef 1a       	sub	r14, r31
    2ff2:	ff 0a       	sbc	r15, r31
    2ff4:	fc 01       	movw	r30, r24
    2ff6:	40 81       	ld	r20, Z
    2ff8:	c8 01       	movw	r24, r16
    2ffa:	05 96       	adiw	r24, 0x05	; 5
    2ffc:	98 01       	movw	r18, r16
    2ffe:	2b 5f       	subi	r18, 0xFB	; 251
    3000:	3f 4f       	sbci	r19, 0xFF	; 255
    3002:	f9 01       	movw	r30, r18
    3004:	20 81       	ld	r18, Z
    3006:	24 27       	eor	r18, r20
    3008:	fc 01       	movw	r30, r24
    300a:	20 83       	st	Z, r18
		*(ciphertext+6) ^= *roundkeys++;
    300c:	c7 01       	movw	r24, r14
    300e:	7c 01       	movw	r14, r24
    3010:	ff ef       	ldi	r31, 0xFF	; 255
    3012:	ef 1a       	sub	r14, r31
    3014:	ff 0a       	sbc	r15, r31
    3016:	fc 01       	movw	r30, r24
    3018:	40 81       	ld	r20, Z
    301a:	c8 01       	movw	r24, r16
    301c:	06 96       	adiw	r24, 0x06	; 6
    301e:	98 01       	movw	r18, r16
    3020:	2a 5f       	subi	r18, 0xFA	; 250
    3022:	3f 4f       	sbci	r19, 0xFF	; 255
    3024:	f9 01       	movw	r30, r18
    3026:	20 81       	ld	r18, Z
    3028:	24 27       	eor	r18, r20
    302a:	fc 01       	movw	r30, r24
    302c:	20 83       	st	Z, r18
		*(ciphertext+7) ^= *roundkeys++;
    302e:	c7 01       	movw	r24, r14
    3030:	7c 01       	movw	r14, r24
    3032:	ff ef       	ldi	r31, 0xFF	; 255
    3034:	ef 1a       	sub	r14, r31
    3036:	ff 0a       	sbc	r15, r31
    3038:	fc 01       	movw	r30, r24
    303a:	40 81       	ld	r20, Z
    303c:	c8 01       	movw	r24, r16
    303e:	07 96       	adiw	r24, 0x07	; 7
    3040:	98 01       	movw	r18, r16
    3042:	29 5f       	subi	r18, 0xF9	; 249
    3044:	3f 4f       	sbci	r19, 0xFF	; 255
    3046:	f9 01       	movw	r30, r18
    3048:	20 81       	ld	r18, Z
    304a:	24 27       	eor	r18, r20
    304c:	fc 01       	movw	r30, r24
    304e:	20 83       	st	Z, r18
		*(ciphertext+8) ^= *roundkeys++;
    3050:	c7 01       	movw	r24, r14
    3052:	7c 01       	movw	r14, r24
    3054:	ff ef       	ldi	r31, 0xFF	; 255
    3056:	ef 1a       	sub	r14, r31
    3058:	ff 0a       	sbc	r15, r31
    305a:	fc 01       	movw	r30, r24
    305c:	40 81       	ld	r20, Z
    305e:	c8 01       	movw	r24, r16
    3060:	08 96       	adiw	r24, 0x08	; 8
    3062:	98 01       	movw	r18, r16
    3064:	28 5f       	subi	r18, 0xF8	; 248
    3066:	3f 4f       	sbci	r19, 0xFF	; 255
    3068:	f9 01       	movw	r30, r18
    306a:	20 81       	ld	r18, Z
    306c:	24 27       	eor	r18, r20
    306e:	fc 01       	movw	r30, r24
    3070:	20 83       	st	Z, r18
		*(ciphertext+9) ^= *roundkeys++;
    3072:	c7 01       	movw	r24, r14
    3074:	7c 01       	movw	r14, r24
    3076:	ff ef       	ldi	r31, 0xFF	; 255
    3078:	ef 1a       	sub	r14, r31
    307a:	ff 0a       	sbc	r15, r31
    307c:	fc 01       	movw	r30, r24
    307e:	40 81       	ld	r20, Z
    3080:	c8 01       	movw	r24, r16
    3082:	09 96       	adiw	r24, 0x09	; 9
    3084:	98 01       	movw	r18, r16
    3086:	27 5f       	subi	r18, 0xF7	; 247
    3088:	3f 4f       	sbci	r19, 0xFF	; 255
    308a:	f9 01       	movw	r30, r18
    308c:	20 81       	ld	r18, Z
    308e:	24 27       	eor	r18, r20
    3090:	fc 01       	movw	r30, r24
    3092:	20 83       	st	Z, r18
		*(ciphertext+10) ^= *roundkeys++;
    3094:	c7 01       	movw	r24, r14
    3096:	7c 01       	movw	r14, r24
    3098:	ff ef       	ldi	r31, 0xFF	; 255
    309a:	ef 1a       	sub	r14, r31
    309c:	ff 0a       	sbc	r15, r31
    309e:	fc 01       	movw	r30, r24
    30a0:	40 81       	ld	r20, Z
    30a2:	c8 01       	movw	r24, r16
    30a4:	0a 96       	adiw	r24, 0x0a	; 10
    30a6:	98 01       	movw	r18, r16
    30a8:	26 5f       	subi	r18, 0xF6	; 246
    30aa:	3f 4f       	sbci	r19, 0xFF	; 255
    30ac:	f9 01       	movw	r30, r18
    30ae:	20 81       	ld	r18, Z
    30b0:	24 27       	eor	r18, r20
    30b2:	fc 01       	movw	r30, r24
    30b4:	20 83       	st	Z, r18
		*(ciphertext+11) ^= *roundkeys++;
    30b6:	c7 01       	movw	r24, r14
    30b8:	7c 01       	movw	r14, r24
    30ba:	ff ef       	ldi	r31, 0xFF	; 255
    30bc:	ef 1a       	sub	r14, r31
    30be:	ff 0a       	sbc	r15, r31
    30c0:	fc 01       	movw	r30, r24
    30c2:	40 81       	ld	r20, Z
    30c4:	c8 01       	movw	r24, r16
    30c6:	0b 96       	adiw	r24, 0x0b	; 11
    30c8:	98 01       	movw	r18, r16
    30ca:	25 5f       	subi	r18, 0xF5	; 245
    30cc:	3f 4f       	sbci	r19, 0xFF	; 255
    30ce:	f9 01       	movw	r30, r18
    30d0:	20 81       	ld	r18, Z
    30d2:	24 27       	eor	r18, r20
    30d4:	fc 01       	movw	r30, r24
    30d6:	20 83       	st	Z, r18
		*(ciphertext+12) ^= *roundkeys++;
    30d8:	c7 01       	movw	r24, r14
    30da:	7c 01       	movw	r14, r24
    30dc:	ff ef       	ldi	r31, 0xFF	; 255
    30de:	ef 1a       	sub	r14, r31
    30e0:	ff 0a       	sbc	r15, r31
    30e2:	fc 01       	movw	r30, r24
    30e4:	40 81       	ld	r20, Z
    30e6:	c8 01       	movw	r24, r16
    30e8:	0c 96       	adiw	r24, 0x0c	; 12
    30ea:	98 01       	movw	r18, r16
    30ec:	24 5f       	subi	r18, 0xF4	; 244
    30ee:	3f 4f       	sbci	r19, 0xFF	; 255
    30f0:	f9 01       	movw	r30, r18
    30f2:	20 81       	ld	r18, Z
    30f4:	24 27       	eor	r18, r20
    30f6:	fc 01       	movw	r30, r24
    30f8:	20 83       	st	Z, r18
		*(ciphertext+13) ^= *roundkeys++;
    30fa:	c7 01       	movw	r24, r14
    30fc:	7c 01       	movw	r14, r24
    30fe:	ff ef       	ldi	r31, 0xFF	; 255
    3100:	ef 1a       	sub	r14, r31
    3102:	ff 0a       	sbc	r15, r31
    3104:	fc 01       	movw	r30, r24
    3106:	40 81       	ld	r20, Z
    3108:	c8 01       	movw	r24, r16
    310a:	0d 96       	adiw	r24, 0x0d	; 13
    310c:	98 01       	movw	r18, r16
    310e:	23 5f       	subi	r18, 0xF3	; 243
    3110:	3f 4f       	sbci	r19, 0xFF	; 255
    3112:	f9 01       	movw	r30, r18
    3114:	20 81       	ld	r18, Z
    3116:	24 27       	eor	r18, r20
    3118:	fc 01       	movw	r30, r24
    311a:	20 83       	st	Z, r18
		*(ciphertext+14) ^= *roundkeys++;
    311c:	c7 01       	movw	r24, r14
    311e:	7c 01       	movw	r14, r24
    3120:	ff ef       	ldi	r31, 0xFF	; 255
    3122:	ef 1a       	sub	r14, r31
    3124:	ff 0a       	sbc	r15, r31
    3126:	fc 01       	movw	r30, r24
    3128:	40 81       	ld	r20, Z
    312a:	c8 01       	movw	r24, r16
    312c:	0e 96       	adiw	r24, 0x0e	; 14
    312e:	98 01       	movw	r18, r16
    3130:	22 5f       	subi	r18, 0xF2	; 242
    3132:	3f 4f       	sbci	r19, 0xFF	; 255
    3134:	f9 01       	movw	r30, r18
    3136:	20 81       	ld	r18, Z
    3138:	24 27       	eor	r18, r20
    313a:	fc 01       	movw	r30, r24
    313c:	20 83       	st	Z, r18
		*(ciphertext+15) ^= *roundkeys++;
    313e:	c7 01       	movw	r24, r14
    3140:	7c 01       	movw	r14, r24
    3142:	ff ef       	ldi	r31, 0xFF	; 255
    3144:	ef 1a       	sub	r14, r31
    3146:	ff 0a       	sbc	r15, r31
    3148:	fc 01       	movw	r30, r24
    314a:	40 81       	ld	r20, Z
    314c:	c8 01       	movw	r24, r16
    314e:	0f 96       	adiw	r24, 0x0f	; 15
    3150:	98 01       	movw	r18, r16
    3152:	21 5f       	subi	r18, 0xF1	; 241
    3154:	3f 4f       	sbci	r19, 0xFF	; 255
    3156:	f9 01       	movw	r30, r18
    3158:	20 81       	ld	r18, Z
    315a:	24 27       	eor	r18, r20
    315c:	fc 01       	movw	r30, r24
    315e:	20 83       	st	Z, r18
		
		*(tmp+0) = SBOX[*(ciphertext+0)];
    3160:	f8 01       	movw	r30, r16
    3162:	80 81       	ld	r24, Z
    3164:	88 2f       	mov	r24, r24
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	80 50       	subi	r24, 0x00	; 0
    316a:	9e 4f       	sbci	r25, 0xFE	; 254
    316c:	fc 01       	movw	r30, r24
    316e:	80 81       	ld	r24, Z
    3170:	8a 83       	std	Y+2, r24	; 0x02
		*(tmp+1) = SBOX[*(ciphertext+1)];
    3172:	c8 01       	movw	r24, r16
    3174:	01 96       	adiw	r24, 0x01	; 1
    3176:	fc 01       	movw	r30, r24
    3178:	80 81       	ld	r24, Z
    317a:	88 2f       	mov	r24, r24
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	80 50       	subi	r24, 0x00	; 0
    3180:	9e 4f       	sbci	r25, 0xFE	; 254
    3182:	fc 01       	movw	r30, r24
    3184:	80 81       	ld	r24, Z
    3186:	8b 83       	std	Y+3, r24	; 0x03
		*(tmp+2) = SBOX[*(ciphertext+2)];
    3188:	c8 01       	movw	r24, r16
    318a:	02 96       	adiw	r24, 0x02	; 2
    318c:	fc 01       	movw	r30, r24
    318e:	80 81       	ld	r24, Z
    3190:	88 2f       	mov	r24, r24
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	80 50       	subi	r24, 0x00	; 0
    3196:	9e 4f       	sbci	r25, 0xFE	; 254
    3198:	fc 01       	movw	r30, r24
    319a:	80 81       	ld	r24, Z
    319c:	8c 83       	std	Y+4, r24	; 0x04
		*(tmp+3) = SBOX[*(ciphertext+3)];
    319e:	c8 01       	movw	r24, r16
    31a0:	03 96       	adiw	r24, 0x03	; 3
    31a2:	fc 01       	movw	r30, r24
    31a4:	80 81       	ld	r24, Z
    31a6:	88 2f       	mov	r24, r24
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	80 50       	subi	r24, 0x00	; 0
    31ac:	9e 4f       	sbci	r25, 0xFE	; 254
    31ae:	fc 01       	movw	r30, r24
    31b0:	80 81       	ld	r24, Z
    31b2:	8d 83       	std	Y+5, r24	; 0x05
		*(tmp+4) = SBOX[*(ciphertext+4)];
    31b4:	c8 01       	movw	r24, r16
    31b6:	04 96       	adiw	r24, 0x04	; 4
    31b8:	fc 01       	movw	r30, r24
    31ba:	80 81       	ld	r24, Z
    31bc:	88 2f       	mov	r24, r24
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	80 50       	subi	r24, 0x00	; 0
    31c2:	9e 4f       	sbci	r25, 0xFE	; 254
    31c4:	fc 01       	movw	r30, r24
    31c6:	80 81       	ld	r24, Z
    31c8:	8e 83       	std	Y+6, r24	; 0x06
		*(tmp+5) = SBOX[*(ciphertext+5)];
    31ca:	c8 01       	movw	r24, r16
    31cc:	05 96       	adiw	r24, 0x05	; 5
    31ce:	fc 01       	movw	r30, r24
    31d0:	80 81       	ld	r24, Z
    31d2:	88 2f       	mov	r24, r24
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	80 50       	subi	r24, 0x00	; 0
    31d8:	9e 4f       	sbci	r25, 0xFE	; 254
    31da:	fc 01       	movw	r30, r24
    31dc:	80 81       	ld	r24, Z
    31de:	8f 83       	std	Y+7, r24	; 0x07
		*(tmp+6) = SBOX[*(ciphertext+6)];
    31e0:	c8 01       	movw	r24, r16
    31e2:	06 96       	adiw	r24, 0x06	; 6
    31e4:	fc 01       	movw	r30, r24
    31e6:	80 81       	ld	r24, Z
    31e8:	88 2f       	mov	r24, r24
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	80 50       	subi	r24, 0x00	; 0
    31ee:	9e 4f       	sbci	r25, 0xFE	; 254
    31f0:	fc 01       	movw	r30, r24
    31f2:	80 81       	ld	r24, Z
    31f4:	88 87       	std	Y+8, r24	; 0x08
		*(tmp+7) = SBOX[*(ciphertext+7)];
    31f6:	c8 01       	movw	r24, r16
    31f8:	07 96       	adiw	r24, 0x07	; 7
    31fa:	fc 01       	movw	r30, r24
    31fc:	80 81       	ld	r24, Z
    31fe:	88 2f       	mov	r24, r24
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	80 50       	subi	r24, 0x00	; 0
    3204:	9e 4f       	sbci	r25, 0xFE	; 254
    3206:	fc 01       	movw	r30, r24
    3208:	80 81       	ld	r24, Z
    320a:	89 87       	std	Y+9, r24	; 0x09
		*(tmp+8) = SBOX[*(ciphertext+8)];
    320c:	c8 01       	movw	r24, r16
    320e:	08 96       	adiw	r24, 0x08	; 8
    3210:	fc 01       	movw	r30, r24
    3212:	80 81       	ld	r24, Z
    3214:	88 2f       	mov	r24, r24
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	80 50       	subi	r24, 0x00	; 0
    321a:	9e 4f       	sbci	r25, 0xFE	; 254
    321c:	fc 01       	movw	r30, r24
    321e:	80 81       	ld	r24, Z
    3220:	8a 87       	std	Y+10, r24	; 0x0a
		*(tmp+9) = SBOX[*(ciphertext+9)];
    3222:	c8 01       	movw	r24, r16
    3224:	09 96       	adiw	r24, 0x09	; 9
    3226:	fc 01       	movw	r30, r24
    3228:	80 81       	ld	r24, Z
    322a:	88 2f       	mov	r24, r24
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	80 50       	subi	r24, 0x00	; 0
    3230:	9e 4f       	sbci	r25, 0xFE	; 254
    3232:	fc 01       	movw	r30, r24
    3234:	80 81       	ld	r24, Z
    3236:	8b 87       	std	Y+11, r24	; 0x0b
		*(tmp+10) = SBOX[*(ciphertext+10)];
    3238:	c8 01       	movw	r24, r16
    323a:	0a 96       	adiw	r24, 0x0a	; 10
    323c:	fc 01       	movw	r30, r24
    323e:	80 81       	ld	r24, Z
    3240:	88 2f       	mov	r24, r24
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	80 50       	subi	r24, 0x00	; 0
    3246:	9e 4f       	sbci	r25, 0xFE	; 254
    3248:	fc 01       	movw	r30, r24
    324a:	80 81       	ld	r24, Z
    324c:	8c 87       	std	Y+12, r24	; 0x0c
		*(tmp+11) = SBOX[*(ciphertext+11)];
    324e:	c8 01       	movw	r24, r16
    3250:	0b 96       	adiw	r24, 0x0b	; 11
    3252:	fc 01       	movw	r30, r24
    3254:	80 81       	ld	r24, Z
    3256:	88 2f       	mov	r24, r24
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	80 50       	subi	r24, 0x00	; 0
    325c:	9e 4f       	sbci	r25, 0xFE	; 254
    325e:	fc 01       	movw	r30, r24
    3260:	80 81       	ld	r24, Z
    3262:	8d 87       	std	Y+13, r24	; 0x0d
		*(tmp+12) = SBOX[*(ciphertext+12)];
    3264:	c8 01       	movw	r24, r16
    3266:	0c 96       	adiw	r24, 0x0c	; 12
    3268:	fc 01       	movw	r30, r24
    326a:	80 81       	ld	r24, Z
    326c:	88 2f       	mov	r24, r24
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	80 50       	subi	r24, 0x00	; 0
    3272:	9e 4f       	sbci	r25, 0xFE	; 254
    3274:	fc 01       	movw	r30, r24
    3276:	80 81       	ld	r24, Z
    3278:	8e 87       	std	Y+14, r24	; 0x0e
		*(tmp+13) = SBOX[*(ciphertext+13)];
    327a:	c8 01       	movw	r24, r16
    327c:	0d 96       	adiw	r24, 0x0d	; 13
    327e:	fc 01       	movw	r30, r24
    3280:	80 81       	ld	r24, Z
    3282:	88 2f       	mov	r24, r24
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	80 50       	subi	r24, 0x00	; 0
    3288:	9e 4f       	sbci	r25, 0xFE	; 254
    328a:	fc 01       	movw	r30, r24
    328c:	80 81       	ld	r24, Z
    328e:	8f 87       	std	Y+15, r24	; 0x0f
		*(tmp+14) = SBOX[*(ciphertext+14)];
    3290:	c8 01       	movw	r24, r16
    3292:	0e 96       	adiw	r24, 0x0e	; 14
    3294:	fc 01       	movw	r30, r24
    3296:	80 81       	ld	r24, Z
    3298:	88 2f       	mov	r24, r24
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	80 50       	subi	r24, 0x00	; 0
    329e:	9e 4f       	sbci	r25, 0xFE	; 254
    32a0:	fc 01       	movw	r30, r24
    32a2:	80 81       	ld	r24, Z
    32a4:	88 8b       	std	Y+16, r24	; 0x10
		*(tmp+15) = SBOX[*(ciphertext+15)];
    32a6:	c8 01       	movw	r24, r16
    32a8:	0f 96       	adiw	r24, 0x0f	; 15
    32aa:	fc 01       	movw	r30, r24
    32ac:	80 81       	ld	r24, Z
    32ae:	88 2f       	mov	r24, r24
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	80 50       	subi	r24, 0x00	; 0
    32b4:	9e 4f       	sbci	r25, 0xFE	; 254
    32b6:	fc 01       	movw	r30, r24
    32b8:	80 81       	ld	r24, Z
    32ba:	89 8b       	std	Y+17, r24	; 0x11
        shift_rows(tmp);
    32bc:	ce 01       	movw	r24, r28
    32be:	02 96       	adiw	r24, 0x02	; 2
    32c0:	0e 94 18 09 	call	0x1230	; 0x1230 <shift_rows>
		
		t = tmp[0] ^ tmp[1] ^ tmp[2] ^ tmp[3];
    32c4:	9a 81       	ldd	r25, Y+2	; 0x02
    32c6:	8b 81       	ldd	r24, Y+3	; 0x03
    32c8:	98 27       	eor	r25, r24
    32ca:	8c 81       	ldd	r24, Y+4	; 0x04
    32cc:	98 27       	eor	r25, r24
    32ce:	8d 81       	ldd	r24, Y+5	; 0x05
    32d0:	89 27       	eor	r24, r25
    32d2:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[0] = mul2(tmp[0]   ^ tmp[1]) ^ tmp[0]   ^ t;
    32d4:	9a 81       	ldd	r25, Y+2	; 0x02
    32d6:	8b 81       	ldd	r24, Y+3	; 0x03
    32d8:	89 27       	eor	r24, r25
    32da:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    32de:	98 2f       	mov	r25, r24
    32e0:	8a 81       	ldd	r24, Y+2	; 0x02
    32e2:	98 27       	eor	r25, r24
    32e4:	89 81       	ldd	r24, Y+1	; 0x01
    32e6:	89 27       	eor	r24, r25
    32e8:	f8 01       	movw	r30, r16
    32ea:	80 83       	st	Z, r24
        ciphertext[1] = mul2(tmp[1] ^ tmp[2]) ^ tmp[1] ^ t;
    32ec:	68 01       	movw	r12, r16
    32ee:	ff ef       	ldi	r31, 0xFF	; 255
    32f0:	cf 1a       	sub	r12, r31
    32f2:	df 0a       	sbc	r13, r31
    32f4:	9b 81       	ldd	r25, Y+3	; 0x03
    32f6:	8c 81       	ldd	r24, Y+4	; 0x04
    32f8:	89 27       	eor	r24, r25
    32fa:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    32fe:	98 2f       	mov	r25, r24
    3300:	8b 81       	ldd	r24, Y+3	; 0x03
    3302:	98 27       	eor	r25, r24
    3304:	89 81       	ldd	r24, Y+1	; 0x01
    3306:	89 27       	eor	r24, r25
    3308:	f6 01       	movw	r30, r12
    330a:	80 83       	st	Z, r24
        ciphertext[2] = mul2(tmp[2] ^ tmp[3]) ^ tmp[2] ^ t;
    330c:	68 01       	movw	r12, r16
    330e:	f2 e0       	ldi	r31, 0x02	; 2
    3310:	cf 0e       	add	r12, r31
    3312:	d1 1c       	adc	r13, r1
    3314:	9c 81       	ldd	r25, Y+4	; 0x04
    3316:	8d 81       	ldd	r24, Y+5	; 0x05
    3318:	89 27       	eor	r24, r25
    331a:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    331e:	98 2f       	mov	r25, r24
    3320:	8c 81       	ldd	r24, Y+4	; 0x04
    3322:	98 27       	eor	r25, r24
    3324:	89 81       	ldd	r24, Y+1	; 0x01
    3326:	89 27       	eor	r24, r25
    3328:	f6 01       	movw	r30, r12
    332a:	80 83       	st	Z, r24
        ciphertext[3] = mul2(tmp[3] ^ tmp[0]  ) ^ tmp[3] ^ t;
    332c:	68 01       	movw	r12, r16
    332e:	f3 e0       	ldi	r31, 0x03	; 3
    3330:	cf 0e       	add	r12, r31
    3332:	d1 1c       	adc	r13, r1
    3334:	9d 81       	ldd	r25, Y+5	; 0x05
    3336:	8a 81       	ldd	r24, Y+2	; 0x02
    3338:	89 27       	eor	r24, r25
    333a:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    333e:	98 2f       	mov	r25, r24
    3340:	8d 81       	ldd	r24, Y+5	; 0x05
    3342:	98 27       	eor	r25, r24
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	89 27       	eor	r24, r25
    3348:	f6 01       	movw	r30, r12
    334a:	80 83       	st	Z, r24
			
		t = tmp[4] ^ tmp[5] ^ tmp[6] ^ tmp[7];
    334c:	9e 81       	ldd	r25, Y+6	; 0x06
    334e:	8f 81       	ldd	r24, Y+7	; 0x07
    3350:	98 27       	eor	r25, r24
    3352:	88 85       	ldd	r24, Y+8	; 0x08
    3354:	98 27       	eor	r25, r24
    3356:	89 85       	ldd	r24, Y+9	; 0x09
    3358:	89 27       	eor	r24, r25
    335a:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[4] = mul2(tmp[4]   ^ tmp[5]) ^ tmp[4]   ^ t;
    335c:	68 01       	movw	r12, r16
    335e:	f4 e0       	ldi	r31, 0x04	; 4
    3360:	cf 0e       	add	r12, r31
    3362:	d1 1c       	adc	r13, r1
    3364:	9e 81       	ldd	r25, Y+6	; 0x06
    3366:	8f 81       	ldd	r24, Y+7	; 0x07
    3368:	89 27       	eor	r24, r25
    336a:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    336e:	98 2f       	mov	r25, r24
    3370:	8e 81       	ldd	r24, Y+6	; 0x06
    3372:	98 27       	eor	r25, r24
    3374:	89 81       	ldd	r24, Y+1	; 0x01
    3376:	89 27       	eor	r24, r25
    3378:	f6 01       	movw	r30, r12
    337a:	80 83       	st	Z, r24
        ciphertext[5] = mul2(tmp[5] ^ tmp[6]) ^ tmp[5] ^ t;
    337c:	68 01       	movw	r12, r16
    337e:	f5 e0       	ldi	r31, 0x05	; 5
    3380:	cf 0e       	add	r12, r31
    3382:	d1 1c       	adc	r13, r1
    3384:	9f 81       	ldd	r25, Y+7	; 0x07
    3386:	88 85       	ldd	r24, Y+8	; 0x08
    3388:	89 27       	eor	r24, r25
    338a:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    338e:	98 2f       	mov	r25, r24
    3390:	8f 81       	ldd	r24, Y+7	; 0x07
    3392:	98 27       	eor	r25, r24
    3394:	89 81       	ldd	r24, Y+1	; 0x01
    3396:	89 27       	eor	r24, r25
    3398:	f6 01       	movw	r30, r12
    339a:	80 83       	st	Z, r24
        ciphertext[6] = mul2(tmp[6] ^ tmp[7]) ^ tmp[6] ^ t;
    339c:	68 01       	movw	r12, r16
    339e:	f6 e0       	ldi	r31, 0x06	; 6
    33a0:	cf 0e       	add	r12, r31
    33a2:	d1 1c       	adc	r13, r1
    33a4:	98 85       	ldd	r25, Y+8	; 0x08
    33a6:	89 85       	ldd	r24, Y+9	; 0x09
    33a8:	89 27       	eor	r24, r25
    33aa:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    33ae:	98 2f       	mov	r25, r24
    33b0:	88 85       	ldd	r24, Y+8	; 0x08
    33b2:	98 27       	eor	r25, r24
    33b4:	89 81       	ldd	r24, Y+1	; 0x01
    33b6:	89 27       	eor	r24, r25
    33b8:	f6 01       	movw	r30, r12
    33ba:	80 83       	st	Z, r24
        ciphertext[7] = mul2(tmp[7] ^ tmp[4]  ) ^ tmp[7] ^ t;
    33bc:	68 01       	movw	r12, r16
    33be:	f7 e0       	ldi	r31, 0x07	; 7
    33c0:	cf 0e       	add	r12, r31
    33c2:	d1 1c       	adc	r13, r1
    33c4:	99 85       	ldd	r25, Y+9	; 0x09
    33c6:	8e 81       	ldd	r24, Y+6	; 0x06
    33c8:	89 27       	eor	r24, r25
    33ca:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    33ce:	98 2f       	mov	r25, r24
    33d0:	89 85       	ldd	r24, Y+9	; 0x09
    33d2:	98 27       	eor	r25, r24
    33d4:	89 81       	ldd	r24, Y+1	; 0x01
    33d6:	89 27       	eor	r24, r25
    33d8:	f6 01       	movw	r30, r12
    33da:	80 83       	st	Z, r24
			
		t = tmp[8] ^ tmp[9] ^ tmp[10] ^ tmp[11];
    33dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    33de:	8b 85       	ldd	r24, Y+11	; 0x0b
    33e0:	98 27       	eor	r25, r24
    33e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    33e4:	98 27       	eor	r25, r24
    33e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e8:	89 27       	eor	r24, r25
    33ea:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[8]  = mul2(tmp[8]   ^ tmp[9]) ^ tmp[8]   ^ t;
    33ec:	68 01       	movw	r12, r16
    33ee:	f8 e0       	ldi	r31, 0x08	; 8
    33f0:	cf 0e       	add	r12, r31
    33f2:	d1 1c       	adc	r13, r1
    33f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    33f8:	89 27       	eor	r24, r25
    33fa:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    33fe:	98 2f       	mov	r25, r24
    3400:	8a 85       	ldd	r24, Y+10	; 0x0a
    3402:	98 27       	eor	r25, r24
    3404:	89 81       	ldd	r24, Y+1	; 0x01
    3406:	89 27       	eor	r24, r25
    3408:	f6 01       	movw	r30, r12
    340a:	80 83       	st	Z, r24
        ciphertext[9]  = mul2(tmp[9] ^ tmp[10]) ^ tmp[9] ^ t;
    340c:	68 01       	movw	r12, r16
    340e:	f9 e0       	ldi	r31, 0x09	; 9
    3410:	cf 0e       	add	r12, r31
    3412:	d1 1c       	adc	r13, r1
    3414:	9b 85       	ldd	r25, Y+11	; 0x0b
    3416:	8c 85       	ldd	r24, Y+12	; 0x0c
    3418:	89 27       	eor	r24, r25
    341a:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    341e:	98 2f       	mov	r25, r24
    3420:	8b 85       	ldd	r24, Y+11	; 0x0b
    3422:	98 27       	eor	r25, r24
    3424:	89 81       	ldd	r24, Y+1	; 0x01
    3426:	89 27       	eor	r24, r25
    3428:	f6 01       	movw	r30, r12
    342a:	80 83       	st	Z, r24
        ciphertext[10] = mul2(tmp[10] ^ tmp[11]) ^ tmp[10] ^ t;
    342c:	68 01       	movw	r12, r16
    342e:	fa e0       	ldi	r31, 0x0A	; 10
    3430:	cf 0e       	add	r12, r31
    3432:	d1 1c       	adc	r13, r1
    3434:	9c 85       	ldd	r25, Y+12	; 0x0c
    3436:	8d 85       	ldd	r24, Y+13	; 0x0d
    3438:	89 27       	eor	r24, r25
    343a:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    343e:	98 2f       	mov	r25, r24
    3440:	8c 85       	ldd	r24, Y+12	; 0x0c
    3442:	98 27       	eor	r25, r24
    3444:	89 81       	ldd	r24, Y+1	; 0x01
    3446:	89 27       	eor	r24, r25
    3448:	f6 01       	movw	r30, r12
    344a:	80 83       	st	Z, r24
        ciphertext[11] = mul2(tmp[11] ^ tmp[8]  ) ^ tmp[11] ^ t;
    344c:	68 01       	movw	r12, r16
    344e:	fb e0       	ldi	r31, 0x0B	; 11
    3450:	cf 0e       	add	r12, r31
    3452:	d1 1c       	adc	r13, r1
    3454:	9d 85       	ldd	r25, Y+13	; 0x0d
    3456:	8a 85       	ldd	r24, Y+10	; 0x0a
    3458:	89 27       	eor	r24, r25
    345a:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    345e:	98 2f       	mov	r25, r24
    3460:	8d 85       	ldd	r24, Y+13	; 0x0d
    3462:	98 27       	eor	r25, r24
    3464:	89 81       	ldd	r24, Y+1	; 0x01
    3466:	89 27       	eor	r24, r25
    3468:	f6 01       	movw	r30, r12
    346a:	80 83       	st	Z, r24
			
		t = tmp[12] ^ tmp[13] ^ tmp[14] ^ tmp[15];
    346c:	9e 85       	ldd	r25, Y+14	; 0x0e
    346e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3470:	98 27       	eor	r25, r24
    3472:	88 89       	ldd	r24, Y+16	; 0x10
    3474:	98 27       	eor	r25, r24
    3476:	89 89       	ldd	r24, Y+17	; 0x11
    3478:	89 27       	eor	r24, r25
    347a:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[12] = mul2(tmp[12]   ^ tmp[13]) ^ tmp[12]   ^ t;
    347c:	68 01       	movw	r12, r16
    347e:	fc e0       	ldi	r31, 0x0C	; 12
    3480:	cf 0e       	add	r12, r31
    3482:	d1 1c       	adc	r13, r1
    3484:	9e 85       	ldd	r25, Y+14	; 0x0e
    3486:	8f 85       	ldd	r24, Y+15	; 0x0f
    3488:	89 27       	eor	r24, r25
    348a:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    348e:	98 2f       	mov	r25, r24
    3490:	8e 85       	ldd	r24, Y+14	; 0x0e
    3492:	98 27       	eor	r25, r24
    3494:	89 81       	ldd	r24, Y+1	; 0x01
    3496:	89 27       	eor	r24, r25
    3498:	f6 01       	movw	r30, r12
    349a:	80 83       	st	Z, r24
        ciphertext[13] = mul2(tmp[13] ^ tmp[14]) ^ tmp[13] ^ t;
    349c:	68 01       	movw	r12, r16
    349e:	fd e0       	ldi	r31, 0x0D	; 13
    34a0:	cf 0e       	add	r12, r31
    34a2:	d1 1c       	adc	r13, r1
    34a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    34a6:	88 89       	ldd	r24, Y+16	; 0x10
    34a8:	89 27       	eor	r24, r25
    34aa:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    34ae:	98 2f       	mov	r25, r24
    34b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    34b2:	98 27       	eor	r25, r24
    34b4:	89 81       	ldd	r24, Y+1	; 0x01
    34b6:	89 27       	eor	r24, r25
    34b8:	f6 01       	movw	r30, r12
    34ba:	80 83       	st	Z, r24
        ciphertext[14] = mul2(tmp[14] ^ tmp[15]) ^ tmp[14] ^ t;
    34bc:	68 01       	movw	r12, r16
    34be:	fe e0       	ldi	r31, 0x0E	; 14
    34c0:	cf 0e       	add	r12, r31
    34c2:	d1 1c       	adc	r13, r1
    34c4:	98 89       	ldd	r25, Y+16	; 0x10
    34c6:	89 89       	ldd	r24, Y+17	; 0x11
    34c8:	89 27       	eor	r24, r25
    34ca:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    34ce:	98 2f       	mov	r25, r24
    34d0:	88 89       	ldd	r24, Y+16	; 0x10
    34d2:	98 27       	eor	r25, r24
    34d4:	89 81       	ldd	r24, Y+1	; 0x01
    34d6:	89 27       	eor	r24, r25
    34d8:	f6 01       	movw	r30, r12
    34da:	80 83       	st	Z, r24
        ciphertext[15] = mul2(tmp[15] ^ tmp[12]  ) ^ tmp[15] ^ t;
    34dc:	68 01       	movw	r12, r16
    34de:	ff e0       	ldi	r31, 0x0F	; 15
    34e0:	cf 0e       	add	r12, r31
    34e2:	d1 1c       	adc	r13, r1
    34e4:	99 89       	ldd	r25, Y+17	; 0x11
    34e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    34e8:	89 27       	eor	r24, r25
    34ea:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    34ee:	98 2f       	mov	r25, r24
    34f0:	89 89       	ldd	r24, Y+17	; 0x11
    34f2:	98 27       	eor	r25, r24
    34f4:	89 81       	ldd	r24, Y+1	; 0x01
    34f6:	89 27       	eor	r24, r25
    34f8:	f6 01       	movw	r30, r12
    34fa:	80 83       	st	Z, r24
		
		*(ciphertext+0) ^= *roundkeys++;
    34fc:	c7 01       	movw	r24, r14
    34fe:	7c 01       	movw	r14, r24
    3500:	ff ef       	ldi	r31, 0xFF	; 255
    3502:	ef 1a       	sub	r14, r31
    3504:	ff 0a       	sbc	r15, r31
    3506:	fc 01       	movw	r30, r24
    3508:	80 81       	ld	r24, Z
    350a:	f8 01       	movw	r30, r16
    350c:	90 81       	ld	r25, Z
    350e:	89 27       	eor	r24, r25
    3510:	f8 01       	movw	r30, r16
    3512:	80 83       	st	Z, r24
		*(ciphertext+1) ^= *roundkeys++;
    3514:	c7 01       	movw	r24, r14
    3516:	7c 01       	movw	r14, r24
    3518:	ff ef       	ldi	r31, 0xFF	; 255
    351a:	ef 1a       	sub	r14, r31
    351c:	ff 0a       	sbc	r15, r31
    351e:	fc 01       	movw	r30, r24
    3520:	40 81       	ld	r20, Z
    3522:	c8 01       	movw	r24, r16
    3524:	01 96       	adiw	r24, 0x01	; 1
    3526:	98 01       	movw	r18, r16
    3528:	2f 5f       	subi	r18, 0xFF	; 255
    352a:	3f 4f       	sbci	r19, 0xFF	; 255
    352c:	f9 01       	movw	r30, r18
    352e:	20 81       	ld	r18, Z
    3530:	24 27       	eor	r18, r20
    3532:	fc 01       	movw	r30, r24
    3534:	20 83       	st	Z, r18
		*(ciphertext+2) ^= *roundkeys++;
    3536:	c7 01       	movw	r24, r14
    3538:	7c 01       	movw	r14, r24
    353a:	ff ef       	ldi	r31, 0xFF	; 255
    353c:	ef 1a       	sub	r14, r31
    353e:	ff 0a       	sbc	r15, r31
    3540:	fc 01       	movw	r30, r24
    3542:	40 81       	ld	r20, Z
    3544:	c8 01       	movw	r24, r16
    3546:	02 96       	adiw	r24, 0x02	; 2
    3548:	98 01       	movw	r18, r16
    354a:	2e 5f       	subi	r18, 0xFE	; 254
    354c:	3f 4f       	sbci	r19, 0xFF	; 255
    354e:	f9 01       	movw	r30, r18
    3550:	20 81       	ld	r18, Z
    3552:	24 27       	eor	r18, r20
    3554:	fc 01       	movw	r30, r24
    3556:	20 83       	st	Z, r18
		*(ciphertext+3) ^= *roundkeys++;
    3558:	c7 01       	movw	r24, r14
    355a:	7c 01       	movw	r14, r24
    355c:	ff ef       	ldi	r31, 0xFF	; 255
    355e:	ef 1a       	sub	r14, r31
    3560:	ff 0a       	sbc	r15, r31
    3562:	fc 01       	movw	r30, r24
    3564:	40 81       	ld	r20, Z
    3566:	c8 01       	movw	r24, r16
    3568:	03 96       	adiw	r24, 0x03	; 3
    356a:	98 01       	movw	r18, r16
    356c:	2d 5f       	subi	r18, 0xFD	; 253
    356e:	3f 4f       	sbci	r19, 0xFF	; 255
    3570:	f9 01       	movw	r30, r18
    3572:	20 81       	ld	r18, Z
    3574:	24 27       	eor	r18, r20
    3576:	fc 01       	movw	r30, r24
    3578:	20 83       	st	Z, r18
		*(ciphertext+4) ^= *roundkeys++;
    357a:	c7 01       	movw	r24, r14
    357c:	7c 01       	movw	r14, r24
    357e:	ff ef       	ldi	r31, 0xFF	; 255
    3580:	ef 1a       	sub	r14, r31
    3582:	ff 0a       	sbc	r15, r31
    3584:	fc 01       	movw	r30, r24
    3586:	40 81       	ld	r20, Z
    3588:	c8 01       	movw	r24, r16
    358a:	04 96       	adiw	r24, 0x04	; 4
    358c:	98 01       	movw	r18, r16
    358e:	2c 5f       	subi	r18, 0xFC	; 252
    3590:	3f 4f       	sbci	r19, 0xFF	; 255
    3592:	f9 01       	movw	r30, r18
    3594:	20 81       	ld	r18, Z
    3596:	24 27       	eor	r18, r20
    3598:	fc 01       	movw	r30, r24
    359a:	20 83       	st	Z, r18
		*(ciphertext+5) ^= *roundkeys++;
    359c:	c7 01       	movw	r24, r14
    359e:	7c 01       	movw	r14, r24
    35a0:	ff ef       	ldi	r31, 0xFF	; 255
    35a2:	ef 1a       	sub	r14, r31
    35a4:	ff 0a       	sbc	r15, r31
    35a6:	fc 01       	movw	r30, r24
    35a8:	40 81       	ld	r20, Z
    35aa:	c8 01       	movw	r24, r16
    35ac:	05 96       	adiw	r24, 0x05	; 5
    35ae:	98 01       	movw	r18, r16
    35b0:	2b 5f       	subi	r18, 0xFB	; 251
    35b2:	3f 4f       	sbci	r19, 0xFF	; 255
    35b4:	f9 01       	movw	r30, r18
    35b6:	20 81       	ld	r18, Z
    35b8:	24 27       	eor	r18, r20
    35ba:	fc 01       	movw	r30, r24
    35bc:	20 83       	st	Z, r18
		*(ciphertext+6) ^= *roundkeys++;
    35be:	c7 01       	movw	r24, r14
    35c0:	7c 01       	movw	r14, r24
    35c2:	ff ef       	ldi	r31, 0xFF	; 255
    35c4:	ef 1a       	sub	r14, r31
    35c6:	ff 0a       	sbc	r15, r31
    35c8:	fc 01       	movw	r30, r24
    35ca:	40 81       	ld	r20, Z
    35cc:	c8 01       	movw	r24, r16
    35ce:	06 96       	adiw	r24, 0x06	; 6
    35d0:	98 01       	movw	r18, r16
    35d2:	2a 5f       	subi	r18, 0xFA	; 250
    35d4:	3f 4f       	sbci	r19, 0xFF	; 255
    35d6:	f9 01       	movw	r30, r18
    35d8:	20 81       	ld	r18, Z
    35da:	24 27       	eor	r18, r20
    35dc:	fc 01       	movw	r30, r24
    35de:	20 83       	st	Z, r18
		*(ciphertext+7) ^= *roundkeys++;
    35e0:	c7 01       	movw	r24, r14
    35e2:	7c 01       	movw	r14, r24
    35e4:	ff ef       	ldi	r31, 0xFF	; 255
    35e6:	ef 1a       	sub	r14, r31
    35e8:	ff 0a       	sbc	r15, r31
    35ea:	fc 01       	movw	r30, r24
    35ec:	40 81       	ld	r20, Z
    35ee:	c8 01       	movw	r24, r16
    35f0:	07 96       	adiw	r24, 0x07	; 7
    35f2:	98 01       	movw	r18, r16
    35f4:	29 5f       	subi	r18, 0xF9	; 249
    35f6:	3f 4f       	sbci	r19, 0xFF	; 255
    35f8:	f9 01       	movw	r30, r18
    35fa:	20 81       	ld	r18, Z
    35fc:	24 27       	eor	r18, r20
    35fe:	fc 01       	movw	r30, r24
    3600:	20 83       	st	Z, r18
		*(ciphertext+8) ^= *roundkeys++;
    3602:	c7 01       	movw	r24, r14
    3604:	7c 01       	movw	r14, r24
    3606:	ff ef       	ldi	r31, 0xFF	; 255
    3608:	ef 1a       	sub	r14, r31
    360a:	ff 0a       	sbc	r15, r31
    360c:	fc 01       	movw	r30, r24
    360e:	40 81       	ld	r20, Z
    3610:	c8 01       	movw	r24, r16
    3612:	08 96       	adiw	r24, 0x08	; 8
    3614:	98 01       	movw	r18, r16
    3616:	28 5f       	subi	r18, 0xF8	; 248
    3618:	3f 4f       	sbci	r19, 0xFF	; 255
    361a:	f9 01       	movw	r30, r18
    361c:	20 81       	ld	r18, Z
    361e:	24 27       	eor	r18, r20
    3620:	fc 01       	movw	r30, r24
    3622:	20 83       	st	Z, r18
		*(ciphertext+9) ^= *roundkeys++;
    3624:	c7 01       	movw	r24, r14
    3626:	7c 01       	movw	r14, r24
    3628:	ff ef       	ldi	r31, 0xFF	; 255
    362a:	ef 1a       	sub	r14, r31
    362c:	ff 0a       	sbc	r15, r31
    362e:	fc 01       	movw	r30, r24
    3630:	40 81       	ld	r20, Z
    3632:	c8 01       	movw	r24, r16
    3634:	09 96       	adiw	r24, 0x09	; 9
    3636:	98 01       	movw	r18, r16
    3638:	27 5f       	subi	r18, 0xF7	; 247
    363a:	3f 4f       	sbci	r19, 0xFF	; 255
    363c:	f9 01       	movw	r30, r18
    363e:	20 81       	ld	r18, Z
    3640:	24 27       	eor	r18, r20
    3642:	fc 01       	movw	r30, r24
    3644:	20 83       	st	Z, r18
		*(ciphertext+10) ^= *roundkeys++;
    3646:	c7 01       	movw	r24, r14
    3648:	7c 01       	movw	r14, r24
    364a:	ff ef       	ldi	r31, 0xFF	; 255
    364c:	ef 1a       	sub	r14, r31
    364e:	ff 0a       	sbc	r15, r31
    3650:	fc 01       	movw	r30, r24
    3652:	40 81       	ld	r20, Z
    3654:	c8 01       	movw	r24, r16
    3656:	0a 96       	adiw	r24, 0x0a	; 10
    3658:	98 01       	movw	r18, r16
    365a:	26 5f       	subi	r18, 0xF6	; 246
    365c:	3f 4f       	sbci	r19, 0xFF	; 255
    365e:	f9 01       	movw	r30, r18
    3660:	20 81       	ld	r18, Z
    3662:	24 27       	eor	r18, r20
    3664:	fc 01       	movw	r30, r24
    3666:	20 83       	st	Z, r18
		*(ciphertext+11) ^= *roundkeys++;
    3668:	c7 01       	movw	r24, r14
    366a:	7c 01       	movw	r14, r24
    366c:	ff ef       	ldi	r31, 0xFF	; 255
    366e:	ef 1a       	sub	r14, r31
    3670:	ff 0a       	sbc	r15, r31
    3672:	fc 01       	movw	r30, r24
    3674:	40 81       	ld	r20, Z
    3676:	c8 01       	movw	r24, r16
    3678:	0b 96       	adiw	r24, 0x0b	; 11
    367a:	98 01       	movw	r18, r16
    367c:	25 5f       	subi	r18, 0xF5	; 245
    367e:	3f 4f       	sbci	r19, 0xFF	; 255
    3680:	f9 01       	movw	r30, r18
    3682:	20 81       	ld	r18, Z
    3684:	24 27       	eor	r18, r20
    3686:	fc 01       	movw	r30, r24
    3688:	20 83       	st	Z, r18
		*(ciphertext+12) ^= *roundkeys++;
    368a:	c7 01       	movw	r24, r14
    368c:	7c 01       	movw	r14, r24
    368e:	ff ef       	ldi	r31, 0xFF	; 255
    3690:	ef 1a       	sub	r14, r31
    3692:	ff 0a       	sbc	r15, r31
    3694:	fc 01       	movw	r30, r24
    3696:	40 81       	ld	r20, Z
    3698:	c8 01       	movw	r24, r16
    369a:	0c 96       	adiw	r24, 0x0c	; 12
    369c:	98 01       	movw	r18, r16
    369e:	24 5f       	subi	r18, 0xF4	; 244
    36a0:	3f 4f       	sbci	r19, 0xFF	; 255
    36a2:	f9 01       	movw	r30, r18
    36a4:	20 81       	ld	r18, Z
    36a6:	24 27       	eor	r18, r20
    36a8:	fc 01       	movw	r30, r24
    36aa:	20 83       	st	Z, r18
		*(ciphertext+13) ^= *roundkeys++;
    36ac:	c7 01       	movw	r24, r14
    36ae:	7c 01       	movw	r14, r24
    36b0:	ff ef       	ldi	r31, 0xFF	; 255
    36b2:	ef 1a       	sub	r14, r31
    36b4:	ff 0a       	sbc	r15, r31
    36b6:	fc 01       	movw	r30, r24
    36b8:	40 81       	ld	r20, Z
    36ba:	c8 01       	movw	r24, r16
    36bc:	0d 96       	adiw	r24, 0x0d	; 13
    36be:	98 01       	movw	r18, r16
    36c0:	23 5f       	subi	r18, 0xF3	; 243
    36c2:	3f 4f       	sbci	r19, 0xFF	; 255
    36c4:	f9 01       	movw	r30, r18
    36c6:	20 81       	ld	r18, Z
    36c8:	24 27       	eor	r18, r20
    36ca:	fc 01       	movw	r30, r24
    36cc:	20 83       	st	Z, r18
		*(ciphertext+14) ^= *roundkeys++;
    36ce:	c7 01       	movw	r24, r14
    36d0:	7c 01       	movw	r14, r24
    36d2:	ff ef       	ldi	r31, 0xFF	; 255
    36d4:	ef 1a       	sub	r14, r31
    36d6:	ff 0a       	sbc	r15, r31
    36d8:	fc 01       	movw	r30, r24
    36da:	40 81       	ld	r20, Z
    36dc:	c8 01       	movw	r24, r16
    36de:	0e 96       	adiw	r24, 0x0e	; 14
    36e0:	98 01       	movw	r18, r16
    36e2:	22 5f       	subi	r18, 0xF2	; 242
    36e4:	3f 4f       	sbci	r19, 0xFF	; 255
    36e6:	f9 01       	movw	r30, r18
    36e8:	20 81       	ld	r18, Z
    36ea:	24 27       	eor	r18, r20
    36ec:	fc 01       	movw	r30, r24
    36ee:	20 83       	st	Z, r18
		*(ciphertext+15) ^= *roundkeys++;
    36f0:	c7 01       	movw	r24, r14
    36f2:	7c 01       	movw	r14, r24
    36f4:	ff ef       	ldi	r31, 0xFF	; 255
    36f6:	ef 1a       	sub	r14, r31
    36f8:	ff 0a       	sbc	r15, r31
    36fa:	fc 01       	movw	r30, r24
    36fc:	40 81       	ld	r20, Z
    36fe:	c8 01       	movw	r24, r16
    3700:	0f 96       	adiw	r24, 0x0f	; 15
    3702:	98 01       	movw	r18, r16
    3704:	21 5f       	subi	r18, 0xF1	; 241
    3706:	3f 4f       	sbci	r19, 0xFF	; 255
    3708:	f9 01       	movw	r30, r18
    370a:	20 81       	ld	r18, Z
    370c:	24 27       	eor	r18, r20
    370e:	fc 01       	movw	r30, r24
    3710:	20 83       	st	Z, r18
		
		*(tmp+0) = SBOX[*(ciphertext+0)];
    3712:	f8 01       	movw	r30, r16
    3714:	80 81       	ld	r24, Z
    3716:	88 2f       	mov	r24, r24
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	80 50       	subi	r24, 0x00	; 0
    371c:	9e 4f       	sbci	r25, 0xFE	; 254
    371e:	fc 01       	movw	r30, r24
    3720:	80 81       	ld	r24, Z
    3722:	8a 83       	std	Y+2, r24	; 0x02
		*(tmp+1) = SBOX[*(ciphertext+1)];
    3724:	c8 01       	movw	r24, r16
    3726:	01 96       	adiw	r24, 0x01	; 1
    3728:	fc 01       	movw	r30, r24
    372a:	80 81       	ld	r24, Z
    372c:	88 2f       	mov	r24, r24
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	80 50       	subi	r24, 0x00	; 0
    3732:	9e 4f       	sbci	r25, 0xFE	; 254
    3734:	fc 01       	movw	r30, r24
    3736:	80 81       	ld	r24, Z
    3738:	8b 83       	std	Y+3, r24	; 0x03
		*(tmp+2) = SBOX[*(ciphertext+2)];
    373a:	c8 01       	movw	r24, r16
    373c:	02 96       	adiw	r24, 0x02	; 2
    373e:	fc 01       	movw	r30, r24
    3740:	80 81       	ld	r24, Z
    3742:	88 2f       	mov	r24, r24
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	80 50       	subi	r24, 0x00	; 0
    3748:	9e 4f       	sbci	r25, 0xFE	; 254
    374a:	fc 01       	movw	r30, r24
    374c:	80 81       	ld	r24, Z
    374e:	8c 83       	std	Y+4, r24	; 0x04
		*(tmp+3) = SBOX[*(ciphertext+3)];
    3750:	c8 01       	movw	r24, r16
    3752:	03 96       	adiw	r24, 0x03	; 3
    3754:	fc 01       	movw	r30, r24
    3756:	80 81       	ld	r24, Z
    3758:	88 2f       	mov	r24, r24
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	80 50       	subi	r24, 0x00	; 0
    375e:	9e 4f       	sbci	r25, 0xFE	; 254
    3760:	fc 01       	movw	r30, r24
    3762:	80 81       	ld	r24, Z
    3764:	8d 83       	std	Y+5, r24	; 0x05
		*(tmp+4) = SBOX[*(ciphertext+4)];
    3766:	c8 01       	movw	r24, r16
    3768:	04 96       	adiw	r24, 0x04	; 4
    376a:	fc 01       	movw	r30, r24
    376c:	80 81       	ld	r24, Z
    376e:	88 2f       	mov	r24, r24
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	80 50       	subi	r24, 0x00	; 0
    3774:	9e 4f       	sbci	r25, 0xFE	; 254
    3776:	fc 01       	movw	r30, r24
    3778:	80 81       	ld	r24, Z
    377a:	8e 83       	std	Y+6, r24	; 0x06
		*(tmp+5) = SBOX[*(ciphertext+5)];
    377c:	c8 01       	movw	r24, r16
    377e:	05 96       	adiw	r24, 0x05	; 5
    3780:	fc 01       	movw	r30, r24
    3782:	80 81       	ld	r24, Z
    3784:	88 2f       	mov	r24, r24
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	80 50       	subi	r24, 0x00	; 0
    378a:	9e 4f       	sbci	r25, 0xFE	; 254
    378c:	fc 01       	movw	r30, r24
    378e:	80 81       	ld	r24, Z
    3790:	8f 83       	std	Y+7, r24	; 0x07
		*(tmp+6) = SBOX[*(ciphertext+6)];
    3792:	c8 01       	movw	r24, r16
    3794:	06 96       	adiw	r24, 0x06	; 6
    3796:	fc 01       	movw	r30, r24
    3798:	80 81       	ld	r24, Z
    379a:	88 2f       	mov	r24, r24
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	80 50       	subi	r24, 0x00	; 0
    37a0:	9e 4f       	sbci	r25, 0xFE	; 254
    37a2:	fc 01       	movw	r30, r24
    37a4:	80 81       	ld	r24, Z
    37a6:	88 87       	std	Y+8, r24	; 0x08
		*(tmp+7) = SBOX[*(ciphertext+7)];
    37a8:	c8 01       	movw	r24, r16
    37aa:	07 96       	adiw	r24, 0x07	; 7
    37ac:	fc 01       	movw	r30, r24
    37ae:	80 81       	ld	r24, Z
    37b0:	88 2f       	mov	r24, r24
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	80 50       	subi	r24, 0x00	; 0
    37b6:	9e 4f       	sbci	r25, 0xFE	; 254
    37b8:	fc 01       	movw	r30, r24
    37ba:	80 81       	ld	r24, Z
    37bc:	89 87       	std	Y+9, r24	; 0x09
		*(tmp+8) = SBOX[*(ciphertext+8)];
    37be:	c8 01       	movw	r24, r16
    37c0:	08 96       	adiw	r24, 0x08	; 8
    37c2:	fc 01       	movw	r30, r24
    37c4:	80 81       	ld	r24, Z
    37c6:	88 2f       	mov	r24, r24
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	80 50       	subi	r24, 0x00	; 0
    37cc:	9e 4f       	sbci	r25, 0xFE	; 254
    37ce:	fc 01       	movw	r30, r24
    37d0:	80 81       	ld	r24, Z
    37d2:	8a 87       	std	Y+10, r24	; 0x0a
		*(tmp+9) = SBOX[*(ciphertext+9)];
    37d4:	c8 01       	movw	r24, r16
    37d6:	09 96       	adiw	r24, 0x09	; 9
    37d8:	fc 01       	movw	r30, r24
    37da:	80 81       	ld	r24, Z
    37dc:	88 2f       	mov	r24, r24
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	80 50       	subi	r24, 0x00	; 0
    37e2:	9e 4f       	sbci	r25, 0xFE	; 254
    37e4:	fc 01       	movw	r30, r24
    37e6:	80 81       	ld	r24, Z
    37e8:	8b 87       	std	Y+11, r24	; 0x0b
		*(tmp+10) = SBOX[*(ciphertext+10)];
    37ea:	c8 01       	movw	r24, r16
    37ec:	0a 96       	adiw	r24, 0x0a	; 10
    37ee:	fc 01       	movw	r30, r24
    37f0:	80 81       	ld	r24, Z
    37f2:	88 2f       	mov	r24, r24
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	80 50       	subi	r24, 0x00	; 0
    37f8:	9e 4f       	sbci	r25, 0xFE	; 254
    37fa:	fc 01       	movw	r30, r24
    37fc:	80 81       	ld	r24, Z
    37fe:	8c 87       	std	Y+12, r24	; 0x0c
		*(tmp+11) = SBOX[*(ciphertext+11)];
    3800:	c8 01       	movw	r24, r16
    3802:	0b 96       	adiw	r24, 0x0b	; 11
    3804:	fc 01       	movw	r30, r24
    3806:	80 81       	ld	r24, Z
    3808:	88 2f       	mov	r24, r24
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	80 50       	subi	r24, 0x00	; 0
    380e:	9e 4f       	sbci	r25, 0xFE	; 254
    3810:	fc 01       	movw	r30, r24
    3812:	80 81       	ld	r24, Z
    3814:	8d 87       	std	Y+13, r24	; 0x0d
		*(tmp+12) = SBOX[*(ciphertext+12)];
    3816:	c8 01       	movw	r24, r16
    3818:	0c 96       	adiw	r24, 0x0c	; 12
    381a:	fc 01       	movw	r30, r24
    381c:	80 81       	ld	r24, Z
    381e:	88 2f       	mov	r24, r24
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	80 50       	subi	r24, 0x00	; 0
    3824:	9e 4f       	sbci	r25, 0xFE	; 254
    3826:	fc 01       	movw	r30, r24
    3828:	80 81       	ld	r24, Z
    382a:	8e 87       	std	Y+14, r24	; 0x0e
		*(tmp+13) = SBOX[*(ciphertext+13)];
    382c:	c8 01       	movw	r24, r16
    382e:	0d 96       	adiw	r24, 0x0d	; 13
    3830:	fc 01       	movw	r30, r24
    3832:	80 81       	ld	r24, Z
    3834:	88 2f       	mov	r24, r24
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	80 50       	subi	r24, 0x00	; 0
    383a:	9e 4f       	sbci	r25, 0xFE	; 254
    383c:	fc 01       	movw	r30, r24
    383e:	80 81       	ld	r24, Z
    3840:	8f 87       	std	Y+15, r24	; 0x0f
		*(tmp+14) = SBOX[*(ciphertext+14)];
    3842:	c8 01       	movw	r24, r16
    3844:	0e 96       	adiw	r24, 0x0e	; 14
    3846:	fc 01       	movw	r30, r24
    3848:	80 81       	ld	r24, Z
    384a:	88 2f       	mov	r24, r24
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	80 50       	subi	r24, 0x00	; 0
    3850:	9e 4f       	sbci	r25, 0xFE	; 254
    3852:	fc 01       	movw	r30, r24
    3854:	80 81       	ld	r24, Z
    3856:	88 8b       	std	Y+16, r24	; 0x10
		*(tmp+15) = SBOX[*(ciphertext+15)];
    3858:	c8 01       	movw	r24, r16
    385a:	0f 96       	adiw	r24, 0x0f	; 15
    385c:	fc 01       	movw	r30, r24
    385e:	80 81       	ld	r24, Z
    3860:	88 2f       	mov	r24, r24
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	80 50       	subi	r24, 0x00	; 0
    3866:	9e 4f       	sbci	r25, 0xFE	; 254
    3868:	fc 01       	movw	r30, r24
    386a:	80 81       	ld	r24, Z
    386c:	89 8b       	std	Y+17, r24	; 0x11
        shift_rows(tmp);
    386e:	ce 01       	movw	r24, r28
    3870:	02 96       	adiw	r24, 0x02	; 2
    3872:	0e 94 18 09 	call	0x1230	; 0x1230 <shift_rows>
		
		t = tmp[0] ^ tmp[1] ^ tmp[2] ^ tmp[3];
    3876:	9a 81       	ldd	r25, Y+2	; 0x02
    3878:	8b 81       	ldd	r24, Y+3	; 0x03
    387a:	98 27       	eor	r25, r24
    387c:	8c 81       	ldd	r24, Y+4	; 0x04
    387e:	98 27       	eor	r25, r24
    3880:	8d 81       	ldd	r24, Y+5	; 0x05
    3882:	89 27       	eor	r24, r25
    3884:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[0] = mul2(tmp[0]   ^ tmp[1]) ^ tmp[0]   ^ t;
    3886:	9a 81       	ldd	r25, Y+2	; 0x02
    3888:	8b 81       	ldd	r24, Y+3	; 0x03
    388a:	89 27       	eor	r24, r25
    388c:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    3890:	98 2f       	mov	r25, r24
    3892:	8a 81       	ldd	r24, Y+2	; 0x02
    3894:	98 27       	eor	r25, r24
    3896:	89 81       	ldd	r24, Y+1	; 0x01
    3898:	89 27       	eor	r24, r25
    389a:	f8 01       	movw	r30, r16
    389c:	80 83       	st	Z, r24
        ciphertext[1] = mul2(tmp[1] ^ tmp[2]) ^ tmp[1] ^ t;
    389e:	68 01       	movw	r12, r16
    38a0:	ff ef       	ldi	r31, 0xFF	; 255
    38a2:	cf 1a       	sub	r12, r31
    38a4:	df 0a       	sbc	r13, r31
    38a6:	9b 81       	ldd	r25, Y+3	; 0x03
    38a8:	8c 81       	ldd	r24, Y+4	; 0x04
    38aa:	89 27       	eor	r24, r25
    38ac:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    38b0:	98 2f       	mov	r25, r24
    38b2:	8b 81       	ldd	r24, Y+3	; 0x03
    38b4:	98 27       	eor	r25, r24
    38b6:	89 81       	ldd	r24, Y+1	; 0x01
    38b8:	89 27       	eor	r24, r25
    38ba:	f6 01       	movw	r30, r12
    38bc:	80 83       	st	Z, r24
        ciphertext[2] = mul2(tmp[2] ^ tmp[3]) ^ tmp[2] ^ t;
    38be:	68 01       	movw	r12, r16
    38c0:	f2 e0       	ldi	r31, 0x02	; 2
    38c2:	cf 0e       	add	r12, r31
    38c4:	d1 1c       	adc	r13, r1
    38c6:	9c 81       	ldd	r25, Y+4	; 0x04
    38c8:	8d 81       	ldd	r24, Y+5	; 0x05
    38ca:	89 27       	eor	r24, r25
    38cc:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    38d0:	98 2f       	mov	r25, r24
    38d2:	8c 81       	ldd	r24, Y+4	; 0x04
    38d4:	98 27       	eor	r25, r24
    38d6:	89 81       	ldd	r24, Y+1	; 0x01
    38d8:	89 27       	eor	r24, r25
    38da:	f6 01       	movw	r30, r12
    38dc:	80 83       	st	Z, r24
        ciphertext[3] = mul2(tmp[3] ^ tmp[0]  ) ^ tmp[3] ^ t;
    38de:	68 01       	movw	r12, r16
    38e0:	f3 e0       	ldi	r31, 0x03	; 3
    38e2:	cf 0e       	add	r12, r31
    38e4:	d1 1c       	adc	r13, r1
    38e6:	9d 81       	ldd	r25, Y+5	; 0x05
    38e8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ea:	89 27       	eor	r24, r25
    38ec:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    38f0:	98 2f       	mov	r25, r24
    38f2:	8d 81       	ldd	r24, Y+5	; 0x05
    38f4:	98 27       	eor	r25, r24
    38f6:	89 81       	ldd	r24, Y+1	; 0x01
    38f8:	89 27       	eor	r24, r25
    38fa:	f6 01       	movw	r30, r12
    38fc:	80 83       	st	Z, r24
			
		t = tmp[4] ^ tmp[5] ^ tmp[6] ^ tmp[7];
    38fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3900:	8f 81       	ldd	r24, Y+7	; 0x07
    3902:	98 27       	eor	r25, r24
    3904:	88 85       	ldd	r24, Y+8	; 0x08
    3906:	98 27       	eor	r25, r24
    3908:	89 85       	ldd	r24, Y+9	; 0x09
    390a:	89 27       	eor	r24, r25
    390c:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[4] = mul2(tmp[4]   ^ tmp[5]) ^ tmp[4]   ^ t;
    390e:	68 01       	movw	r12, r16
    3910:	f4 e0       	ldi	r31, 0x04	; 4
    3912:	cf 0e       	add	r12, r31
    3914:	d1 1c       	adc	r13, r1
    3916:	9e 81       	ldd	r25, Y+6	; 0x06
    3918:	8f 81       	ldd	r24, Y+7	; 0x07
    391a:	89 27       	eor	r24, r25
    391c:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    3920:	98 2f       	mov	r25, r24
    3922:	8e 81       	ldd	r24, Y+6	; 0x06
    3924:	98 27       	eor	r25, r24
    3926:	89 81       	ldd	r24, Y+1	; 0x01
    3928:	89 27       	eor	r24, r25
    392a:	f6 01       	movw	r30, r12
    392c:	80 83       	st	Z, r24
        ciphertext[5] = mul2(tmp[5] ^ tmp[6]) ^ tmp[5] ^ t;
    392e:	68 01       	movw	r12, r16
    3930:	f5 e0       	ldi	r31, 0x05	; 5
    3932:	cf 0e       	add	r12, r31
    3934:	d1 1c       	adc	r13, r1
    3936:	9f 81       	ldd	r25, Y+7	; 0x07
    3938:	88 85       	ldd	r24, Y+8	; 0x08
    393a:	89 27       	eor	r24, r25
    393c:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    3940:	98 2f       	mov	r25, r24
    3942:	8f 81       	ldd	r24, Y+7	; 0x07
    3944:	98 27       	eor	r25, r24
    3946:	89 81       	ldd	r24, Y+1	; 0x01
    3948:	89 27       	eor	r24, r25
    394a:	f6 01       	movw	r30, r12
    394c:	80 83       	st	Z, r24
        ciphertext[6] = mul2(tmp[6] ^ tmp[7]) ^ tmp[6] ^ t;
    394e:	68 01       	movw	r12, r16
    3950:	f6 e0       	ldi	r31, 0x06	; 6
    3952:	cf 0e       	add	r12, r31
    3954:	d1 1c       	adc	r13, r1
    3956:	98 85       	ldd	r25, Y+8	; 0x08
    3958:	89 85       	ldd	r24, Y+9	; 0x09
    395a:	89 27       	eor	r24, r25
    395c:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    3960:	98 2f       	mov	r25, r24
    3962:	88 85       	ldd	r24, Y+8	; 0x08
    3964:	98 27       	eor	r25, r24
    3966:	89 81       	ldd	r24, Y+1	; 0x01
    3968:	89 27       	eor	r24, r25
    396a:	f6 01       	movw	r30, r12
    396c:	80 83       	st	Z, r24
        ciphertext[7] = mul2(tmp[7] ^ tmp[4]  ) ^ tmp[7] ^ t;
    396e:	68 01       	movw	r12, r16
    3970:	f7 e0       	ldi	r31, 0x07	; 7
    3972:	cf 0e       	add	r12, r31
    3974:	d1 1c       	adc	r13, r1
    3976:	99 85       	ldd	r25, Y+9	; 0x09
    3978:	8e 81       	ldd	r24, Y+6	; 0x06
    397a:	89 27       	eor	r24, r25
    397c:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    3980:	98 2f       	mov	r25, r24
    3982:	89 85       	ldd	r24, Y+9	; 0x09
    3984:	98 27       	eor	r25, r24
    3986:	89 81       	ldd	r24, Y+1	; 0x01
    3988:	89 27       	eor	r24, r25
    398a:	f6 01       	movw	r30, r12
    398c:	80 83       	st	Z, r24
			
		t = tmp[8] ^ tmp[9] ^ tmp[10] ^ tmp[11];
    398e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3990:	8b 85       	ldd	r24, Y+11	; 0x0b
    3992:	98 27       	eor	r25, r24
    3994:	8c 85       	ldd	r24, Y+12	; 0x0c
    3996:	98 27       	eor	r25, r24
    3998:	8d 85       	ldd	r24, Y+13	; 0x0d
    399a:	89 27       	eor	r24, r25
    399c:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[8]  = mul2(tmp[8]   ^ tmp[9]) ^ tmp[8]   ^ t;
    399e:	68 01       	movw	r12, r16
    39a0:	f8 e0       	ldi	r31, 0x08	; 8
    39a2:	cf 0e       	add	r12, r31
    39a4:	d1 1c       	adc	r13, r1
    39a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    39a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    39aa:	89 27       	eor	r24, r25
    39ac:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    39b0:	98 2f       	mov	r25, r24
    39b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    39b4:	98 27       	eor	r25, r24
    39b6:	89 81       	ldd	r24, Y+1	; 0x01
    39b8:	89 27       	eor	r24, r25
    39ba:	f6 01       	movw	r30, r12
    39bc:	80 83       	st	Z, r24
        ciphertext[9]  = mul2(tmp[9] ^ tmp[10]) ^ tmp[9] ^ t;
    39be:	68 01       	movw	r12, r16
    39c0:	f9 e0       	ldi	r31, 0x09	; 9
    39c2:	cf 0e       	add	r12, r31
    39c4:	d1 1c       	adc	r13, r1
    39c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    39c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    39ca:	89 27       	eor	r24, r25
    39cc:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    39d0:	98 2f       	mov	r25, r24
    39d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    39d4:	98 27       	eor	r25, r24
    39d6:	89 81       	ldd	r24, Y+1	; 0x01
    39d8:	89 27       	eor	r24, r25
    39da:	f6 01       	movw	r30, r12
    39dc:	80 83       	st	Z, r24
        ciphertext[10] = mul2(tmp[10] ^ tmp[11]) ^ tmp[10] ^ t;
    39de:	68 01       	movw	r12, r16
    39e0:	fa e0       	ldi	r31, 0x0A	; 10
    39e2:	cf 0e       	add	r12, r31
    39e4:	d1 1c       	adc	r13, r1
    39e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    39e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    39ea:	89 27       	eor	r24, r25
    39ec:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    39f0:	98 2f       	mov	r25, r24
    39f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    39f4:	98 27       	eor	r25, r24
    39f6:	89 81       	ldd	r24, Y+1	; 0x01
    39f8:	89 27       	eor	r24, r25
    39fa:	f6 01       	movw	r30, r12
    39fc:	80 83       	st	Z, r24
        ciphertext[11] = mul2(tmp[11] ^ tmp[8]  ) ^ tmp[11] ^ t;
    39fe:	68 01       	movw	r12, r16
    3a00:	fb e0       	ldi	r31, 0x0B	; 11
    3a02:	cf 0e       	add	r12, r31
    3a04:	d1 1c       	adc	r13, r1
    3a06:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a08:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a0a:	89 27       	eor	r24, r25
    3a0c:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    3a10:	98 2f       	mov	r25, r24
    3a12:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a14:	98 27       	eor	r25, r24
    3a16:	89 81       	ldd	r24, Y+1	; 0x01
    3a18:	89 27       	eor	r24, r25
    3a1a:	f6 01       	movw	r30, r12
    3a1c:	80 83       	st	Z, r24
			
		t = tmp[12] ^ tmp[13] ^ tmp[14] ^ tmp[15];
    3a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a20:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a22:	98 27       	eor	r25, r24
    3a24:	88 89       	ldd	r24, Y+16	; 0x10
    3a26:	98 27       	eor	r25, r24
    3a28:	89 89       	ldd	r24, Y+17	; 0x11
    3a2a:	89 27       	eor	r24, r25
    3a2c:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[12] = mul2(tmp[12]   ^ tmp[13]) ^ tmp[12]   ^ t;
    3a2e:	68 01       	movw	r12, r16
    3a30:	fc e0       	ldi	r31, 0x0C	; 12
    3a32:	cf 0e       	add	r12, r31
    3a34:	d1 1c       	adc	r13, r1
    3a36:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a38:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a3a:	89 27       	eor	r24, r25
    3a3c:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    3a40:	98 2f       	mov	r25, r24
    3a42:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a44:	98 27       	eor	r25, r24
    3a46:	89 81       	ldd	r24, Y+1	; 0x01
    3a48:	89 27       	eor	r24, r25
    3a4a:	f6 01       	movw	r30, r12
    3a4c:	80 83       	st	Z, r24
        ciphertext[13] = mul2(tmp[13] ^ tmp[14]) ^ tmp[13] ^ t;
    3a4e:	68 01       	movw	r12, r16
    3a50:	fd e0       	ldi	r31, 0x0D	; 13
    3a52:	cf 0e       	add	r12, r31
    3a54:	d1 1c       	adc	r13, r1
    3a56:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a58:	88 89       	ldd	r24, Y+16	; 0x10
    3a5a:	89 27       	eor	r24, r25
    3a5c:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    3a60:	98 2f       	mov	r25, r24
    3a62:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a64:	98 27       	eor	r25, r24
    3a66:	89 81       	ldd	r24, Y+1	; 0x01
    3a68:	89 27       	eor	r24, r25
    3a6a:	f6 01       	movw	r30, r12
    3a6c:	80 83       	st	Z, r24
        ciphertext[14] = mul2(tmp[14] ^ tmp[15]) ^ tmp[14] ^ t;
    3a6e:	68 01       	movw	r12, r16
    3a70:	fe e0       	ldi	r31, 0x0E	; 14
    3a72:	cf 0e       	add	r12, r31
    3a74:	d1 1c       	adc	r13, r1
    3a76:	98 89       	ldd	r25, Y+16	; 0x10
    3a78:	89 89       	ldd	r24, Y+17	; 0x11
    3a7a:	89 27       	eor	r24, r25
    3a7c:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    3a80:	98 2f       	mov	r25, r24
    3a82:	88 89       	ldd	r24, Y+16	; 0x10
    3a84:	98 27       	eor	r25, r24
    3a86:	89 81       	ldd	r24, Y+1	; 0x01
    3a88:	89 27       	eor	r24, r25
    3a8a:	f6 01       	movw	r30, r12
    3a8c:	80 83       	st	Z, r24
        ciphertext[15] = mul2(tmp[15] ^ tmp[12]  ) ^ tmp[15] ^ t;
    3a8e:	68 01       	movw	r12, r16
    3a90:	ff e0       	ldi	r31, 0x0F	; 15
    3a92:	cf 0e       	add	r12, r31
    3a94:	d1 1c       	adc	r13, r1
    3a96:	99 89       	ldd	r25, Y+17	; 0x11
    3a98:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a9a:	89 27       	eor	r24, r25
    3a9c:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    3aa0:	98 2f       	mov	r25, r24
    3aa2:	89 89       	ldd	r24, Y+17	; 0x11
    3aa4:	98 27       	eor	r25, r24
    3aa6:	89 81       	ldd	r24, Y+1	; 0x01
    3aa8:	89 27       	eor	r24, r25
    3aaa:	f6 01       	movw	r30, r12
    3aac:	80 83       	st	Z, r24
		
		*(ciphertext+0) ^= *roundkeys++;
    3aae:	c7 01       	movw	r24, r14
    3ab0:	7c 01       	movw	r14, r24
    3ab2:	ff ef       	ldi	r31, 0xFF	; 255
    3ab4:	ef 1a       	sub	r14, r31
    3ab6:	ff 0a       	sbc	r15, r31
    3ab8:	fc 01       	movw	r30, r24
    3aba:	80 81       	ld	r24, Z
    3abc:	f8 01       	movw	r30, r16
    3abe:	90 81       	ld	r25, Z
    3ac0:	89 27       	eor	r24, r25
    3ac2:	f8 01       	movw	r30, r16
    3ac4:	80 83       	st	Z, r24
		*(ciphertext+1) ^= *roundkeys++;
    3ac6:	c7 01       	movw	r24, r14
    3ac8:	7c 01       	movw	r14, r24
    3aca:	ff ef       	ldi	r31, 0xFF	; 255
    3acc:	ef 1a       	sub	r14, r31
    3ace:	ff 0a       	sbc	r15, r31
    3ad0:	fc 01       	movw	r30, r24
    3ad2:	40 81       	ld	r20, Z
    3ad4:	c8 01       	movw	r24, r16
    3ad6:	01 96       	adiw	r24, 0x01	; 1
    3ad8:	98 01       	movw	r18, r16
    3ada:	2f 5f       	subi	r18, 0xFF	; 255
    3adc:	3f 4f       	sbci	r19, 0xFF	; 255
    3ade:	f9 01       	movw	r30, r18
    3ae0:	20 81       	ld	r18, Z
    3ae2:	24 27       	eor	r18, r20
    3ae4:	fc 01       	movw	r30, r24
    3ae6:	20 83       	st	Z, r18
		*(ciphertext+2) ^= *roundkeys++;
    3ae8:	c7 01       	movw	r24, r14
    3aea:	7c 01       	movw	r14, r24
    3aec:	ff ef       	ldi	r31, 0xFF	; 255
    3aee:	ef 1a       	sub	r14, r31
    3af0:	ff 0a       	sbc	r15, r31
    3af2:	fc 01       	movw	r30, r24
    3af4:	40 81       	ld	r20, Z
    3af6:	c8 01       	movw	r24, r16
    3af8:	02 96       	adiw	r24, 0x02	; 2
    3afa:	98 01       	movw	r18, r16
    3afc:	2e 5f       	subi	r18, 0xFE	; 254
    3afe:	3f 4f       	sbci	r19, 0xFF	; 255
    3b00:	f9 01       	movw	r30, r18
    3b02:	20 81       	ld	r18, Z
    3b04:	24 27       	eor	r18, r20
    3b06:	fc 01       	movw	r30, r24
    3b08:	20 83       	st	Z, r18
		*(ciphertext+3) ^= *roundkeys++;
    3b0a:	c7 01       	movw	r24, r14
    3b0c:	7c 01       	movw	r14, r24
    3b0e:	ff ef       	ldi	r31, 0xFF	; 255
    3b10:	ef 1a       	sub	r14, r31
    3b12:	ff 0a       	sbc	r15, r31
    3b14:	fc 01       	movw	r30, r24
    3b16:	40 81       	ld	r20, Z
    3b18:	c8 01       	movw	r24, r16
    3b1a:	03 96       	adiw	r24, 0x03	; 3
    3b1c:	98 01       	movw	r18, r16
    3b1e:	2d 5f       	subi	r18, 0xFD	; 253
    3b20:	3f 4f       	sbci	r19, 0xFF	; 255
    3b22:	f9 01       	movw	r30, r18
    3b24:	20 81       	ld	r18, Z
    3b26:	24 27       	eor	r18, r20
    3b28:	fc 01       	movw	r30, r24
    3b2a:	20 83       	st	Z, r18
		*(ciphertext+4) ^= *roundkeys++;
    3b2c:	c7 01       	movw	r24, r14
    3b2e:	7c 01       	movw	r14, r24
    3b30:	ff ef       	ldi	r31, 0xFF	; 255
    3b32:	ef 1a       	sub	r14, r31
    3b34:	ff 0a       	sbc	r15, r31
    3b36:	fc 01       	movw	r30, r24
    3b38:	40 81       	ld	r20, Z
    3b3a:	c8 01       	movw	r24, r16
    3b3c:	04 96       	adiw	r24, 0x04	; 4
    3b3e:	98 01       	movw	r18, r16
    3b40:	2c 5f       	subi	r18, 0xFC	; 252
    3b42:	3f 4f       	sbci	r19, 0xFF	; 255
    3b44:	f9 01       	movw	r30, r18
    3b46:	20 81       	ld	r18, Z
    3b48:	24 27       	eor	r18, r20
    3b4a:	fc 01       	movw	r30, r24
    3b4c:	20 83       	st	Z, r18
		*(ciphertext+5) ^= *roundkeys++;
    3b4e:	c7 01       	movw	r24, r14
    3b50:	7c 01       	movw	r14, r24
    3b52:	ff ef       	ldi	r31, 0xFF	; 255
    3b54:	ef 1a       	sub	r14, r31
    3b56:	ff 0a       	sbc	r15, r31
    3b58:	fc 01       	movw	r30, r24
    3b5a:	40 81       	ld	r20, Z
    3b5c:	c8 01       	movw	r24, r16
    3b5e:	05 96       	adiw	r24, 0x05	; 5
    3b60:	98 01       	movw	r18, r16
    3b62:	2b 5f       	subi	r18, 0xFB	; 251
    3b64:	3f 4f       	sbci	r19, 0xFF	; 255
    3b66:	f9 01       	movw	r30, r18
    3b68:	20 81       	ld	r18, Z
    3b6a:	24 27       	eor	r18, r20
    3b6c:	fc 01       	movw	r30, r24
    3b6e:	20 83       	st	Z, r18
		*(ciphertext+6) ^= *roundkeys++;
    3b70:	c7 01       	movw	r24, r14
    3b72:	7c 01       	movw	r14, r24
    3b74:	ff ef       	ldi	r31, 0xFF	; 255
    3b76:	ef 1a       	sub	r14, r31
    3b78:	ff 0a       	sbc	r15, r31
    3b7a:	fc 01       	movw	r30, r24
    3b7c:	40 81       	ld	r20, Z
    3b7e:	c8 01       	movw	r24, r16
    3b80:	06 96       	adiw	r24, 0x06	; 6
    3b82:	98 01       	movw	r18, r16
    3b84:	2a 5f       	subi	r18, 0xFA	; 250
    3b86:	3f 4f       	sbci	r19, 0xFF	; 255
    3b88:	f9 01       	movw	r30, r18
    3b8a:	20 81       	ld	r18, Z
    3b8c:	24 27       	eor	r18, r20
    3b8e:	fc 01       	movw	r30, r24
    3b90:	20 83       	st	Z, r18
		*(ciphertext+7) ^= *roundkeys++;
    3b92:	c7 01       	movw	r24, r14
    3b94:	7c 01       	movw	r14, r24
    3b96:	ff ef       	ldi	r31, 0xFF	; 255
    3b98:	ef 1a       	sub	r14, r31
    3b9a:	ff 0a       	sbc	r15, r31
    3b9c:	fc 01       	movw	r30, r24
    3b9e:	40 81       	ld	r20, Z
    3ba0:	c8 01       	movw	r24, r16
    3ba2:	07 96       	adiw	r24, 0x07	; 7
    3ba4:	98 01       	movw	r18, r16
    3ba6:	29 5f       	subi	r18, 0xF9	; 249
    3ba8:	3f 4f       	sbci	r19, 0xFF	; 255
    3baa:	f9 01       	movw	r30, r18
    3bac:	20 81       	ld	r18, Z
    3bae:	24 27       	eor	r18, r20
    3bb0:	fc 01       	movw	r30, r24
    3bb2:	20 83       	st	Z, r18
		*(ciphertext+8) ^= *roundkeys++;
    3bb4:	c7 01       	movw	r24, r14
    3bb6:	7c 01       	movw	r14, r24
    3bb8:	ff ef       	ldi	r31, 0xFF	; 255
    3bba:	ef 1a       	sub	r14, r31
    3bbc:	ff 0a       	sbc	r15, r31
    3bbe:	fc 01       	movw	r30, r24
    3bc0:	40 81       	ld	r20, Z
    3bc2:	c8 01       	movw	r24, r16
    3bc4:	08 96       	adiw	r24, 0x08	; 8
    3bc6:	98 01       	movw	r18, r16
    3bc8:	28 5f       	subi	r18, 0xF8	; 248
    3bca:	3f 4f       	sbci	r19, 0xFF	; 255
    3bcc:	f9 01       	movw	r30, r18
    3bce:	20 81       	ld	r18, Z
    3bd0:	24 27       	eor	r18, r20
    3bd2:	fc 01       	movw	r30, r24
    3bd4:	20 83       	st	Z, r18
		*(ciphertext+9) ^= *roundkeys++;
    3bd6:	c7 01       	movw	r24, r14
    3bd8:	7c 01       	movw	r14, r24
    3bda:	ff ef       	ldi	r31, 0xFF	; 255
    3bdc:	ef 1a       	sub	r14, r31
    3bde:	ff 0a       	sbc	r15, r31
    3be0:	fc 01       	movw	r30, r24
    3be2:	40 81       	ld	r20, Z
    3be4:	c8 01       	movw	r24, r16
    3be6:	09 96       	adiw	r24, 0x09	; 9
    3be8:	98 01       	movw	r18, r16
    3bea:	27 5f       	subi	r18, 0xF7	; 247
    3bec:	3f 4f       	sbci	r19, 0xFF	; 255
    3bee:	f9 01       	movw	r30, r18
    3bf0:	20 81       	ld	r18, Z
    3bf2:	24 27       	eor	r18, r20
    3bf4:	fc 01       	movw	r30, r24
    3bf6:	20 83       	st	Z, r18
		*(ciphertext+10) ^= *roundkeys++;
    3bf8:	c7 01       	movw	r24, r14
    3bfa:	7c 01       	movw	r14, r24
    3bfc:	ff ef       	ldi	r31, 0xFF	; 255
    3bfe:	ef 1a       	sub	r14, r31
    3c00:	ff 0a       	sbc	r15, r31
    3c02:	fc 01       	movw	r30, r24
    3c04:	40 81       	ld	r20, Z
    3c06:	c8 01       	movw	r24, r16
    3c08:	0a 96       	adiw	r24, 0x0a	; 10
    3c0a:	98 01       	movw	r18, r16
    3c0c:	26 5f       	subi	r18, 0xF6	; 246
    3c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c10:	f9 01       	movw	r30, r18
    3c12:	20 81       	ld	r18, Z
    3c14:	24 27       	eor	r18, r20
    3c16:	fc 01       	movw	r30, r24
    3c18:	20 83       	st	Z, r18
		*(ciphertext+11) ^= *roundkeys++;
    3c1a:	c7 01       	movw	r24, r14
    3c1c:	7c 01       	movw	r14, r24
    3c1e:	ff ef       	ldi	r31, 0xFF	; 255
    3c20:	ef 1a       	sub	r14, r31
    3c22:	ff 0a       	sbc	r15, r31
    3c24:	fc 01       	movw	r30, r24
    3c26:	40 81       	ld	r20, Z
    3c28:	c8 01       	movw	r24, r16
    3c2a:	0b 96       	adiw	r24, 0x0b	; 11
    3c2c:	98 01       	movw	r18, r16
    3c2e:	25 5f       	subi	r18, 0xF5	; 245
    3c30:	3f 4f       	sbci	r19, 0xFF	; 255
    3c32:	f9 01       	movw	r30, r18
    3c34:	20 81       	ld	r18, Z
    3c36:	24 27       	eor	r18, r20
    3c38:	fc 01       	movw	r30, r24
    3c3a:	20 83       	st	Z, r18
		*(ciphertext+12) ^= *roundkeys++;
    3c3c:	c7 01       	movw	r24, r14
    3c3e:	7c 01       	movw	r14, r24
    3c40:	ff ef       	ldi	r31, 0xFF	; 255
    3c42:	ef 1a       	sub	r14, r31
    3c44:	ff 0a       	sbc	r15, r31
    3c46:	fc 01       	movw	r30, r24
    3c48:	40 81       	ld	r20, Z
    3c4a:	c8 01       	movw	r24, r16
    3c4c:	0c 96       	adiw	r24, 0x0c	; 12
    3c4e:	98 01       	movw	r18, r16
    3c50:	24 5f       	subi	r18, 0xF4	; 244
    3c52:	3f 4f       	sbci	r19, 0xFF	; 255
    3c54:	f9 01       	movw	r30, r18
    3c56:	20 81       	ld	r18, Z
    3c58:	24 27       	eor	r18, r20
    3c5a:	fc 01       	movw	r30, r24
    3c5c:	20 83       	st	Z, r18
		*(ciphertext+13) ^= *roundkeys++;
    3c5e:	c7 01       	movw	r24, r14
    3c60:	7c 01       	movw	r14, r24
    3c62:	ff ef       	ldi	r31, 0xFF	; 255
    3c64:	ef 1a       	sub	r14, r31
    3c66:	ff 0a       	sbc	r15, r31
    3c68:	fc 01       	movw	r30, r24
    3c6a:	40 81       	ld	r20, Z
    3c6c:	c8 01       	movw	r24, r16
    3c6e:	0d 96       	adiw	r24, 0x0d	; 13
    3c70:	98 01       	movw	r18, r16
    3c72:	23 5f       	subi	r18, 0xF3	; 243
    3c74:	3f 4f       	sbci	r19, 0xFF	; 255
    3c76:	f9 01       	movw	r30, r18
    3c78:	20 81       	ld	r18, Z
    3c7a:	24 27       	eor	r18, r20
    3c7c:	fc 01       	movw	r30, r24
    3c7e:	20 83       	st	Z, r18
		*(ciphertext+14) ^= *roundkeys++;
    3c80:	c7 01       	movw	r24, r14
    3c82:	7c 01       	movw	r14, r24
    3c84:	ff ef       	ldi	r31, 0xFF	; 255
    3c86:	ef 1a       	sub	r14, r31
    3c88:	ff 0a       	sbc	r15, r31
    3c8a:	fc 01       	movw	r30, r24
    3c8c:	40 81       	ld	r20, Z
    3c8e:	c8 01       	movw	r24, r16
    3c90:	0e 96       	adiw	r24, 0x0e	; 14
    3c92:	98 01       	movw	r18, r16
    3c94:	22 5f       	subi	r18, 0xF2	; 242
    3c96:	3f 4f       	sbci	r19, 0xFF	; 255
    3c98:	f9 01       	movw	r30, r18
    3c9a:	20 81       	ld	r18, Z
    3c9c:	24 27       	eor	r18, r20
    3c9e:	fc 01       	movw	r30, r24
    3ca0:	20 83       	st	Z, r18
		*(ciphertext+15) ^= *roundkeys++;
    3ca2:	c7 01       	movw	r24, r14
    3ca4:	7c 01       	movw	r14, r24
    3ca6:	ff ef       	ldi	r31, 0xFF	; 255
    3ca8:	ef 1a       	sub	r14, r31
    3caa:	ff 0a       	sbc	r15, r31
    3cac:	fc 01       	movw	r30, r24
    3cae:	40 81       	ld	r20, Z
    3cb0:	c8 01       	movw	r24, r16
    3cb2:	0f 96       	adiw	r24, 0x0f	; 15
    3cb4:	98 01       	movw	r18, r16
    3cb6:	21 5f       	subi	r18, 0xF1	; 241
    3cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cba:	f9 01       	movw	r30, r18
    3cbc:	20 81       	ld	r18, Z
    3cbe:	24 27       	eor	r18, r20
    3cc0:	fc 01       	movw	r30, r24
    3cc2:	20 83       	st	Z, r18
		
		*(tmp+0) = SBOX[*(ciphertext+0)];
    3cc4:	f8 01       	movw	r30, r16
    3cc6:	80 81       	ld	r24, Z
    3cc8:	88 2f       	mov	r24, r24
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	80 50       	subi	r24, 0x00	; 0
    3cce:	9e 4f       	sbci	r25, 0xFE	; 254
    3cd0:	fc 01       	movw	r30, r24
    3cd2:	80 81       	ld	r24, Z
    3cd4:	8a 83       	std	Y+2, r24	; 0x02
		*(tmp+1) = SBOX[*(ciphertext+1)];
    3cd6:	c8 01       	movw	r24, r16
    3cd8:	01 96       	adiw	r24, 0x01	; 1
    3cda:	fc 01       	movw	r30, r24
    3cdc:	80 81       	ld	r24, Z
    3cde:	88 2f       	mov	r24, r24
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	80 50       	subi	r24, 0x00	; 0
    3ce4:	9e 4f       	sbci	r25, 0xFE	; 254
    3ce6:	fc 01       	movw	r30, r24
    3ce8:	80 81       	ld	r24, Z
    3cea:	8b 83       	std	Y+3, r24	; 0x03
		*(tmp+2) = SBOX[*(ciphertext+2)];
    3cec:	c8 01       	movw	r24, r16
    3cee:	02 96       	adiw	r24, 0x02	; 2
    3cf0:	fc 01       	movw	r30, r24
    3cf2:	80 81       	ld	r24, Z
    3cf4:	88 2f       	mov	r24, r24
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	80 50       	subi	r24, 0x00	; 0
    3cfa:	9e 4f       	sbci	r25, 0xFE	; 254
    3cfc:	fc 01       	movw	r30, r24
    3cfe:	80 81       	ld	r24, Z
    3d00:	8c 83       	std	Y+4, r24	; 0x04
		*(tmp+3) = SBOX[*(ciphertext+3)];
    3d02:	c8 01       	movw	r24, r16
    3d04:	03 96       	adiw	r24, 0x03	; 3
    3d06:	fc 01       	movw	r30, r24
    3d08:	80 81       	ld	r24, Z
    3d0a:	88 2f       	mov	r24, r24
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	80 50       	subi	r24, 0x00	; 0
    3d10:	9e 4f       	sbci	r25, 0xFE	; 254
    3d12:	fc 01       	movw	r30, r24
    3d14:	80 81       	ld	r24, Z
    3d16:	8d 83       	std	Y+5, r24	; 0x05
		*(tmp+4) = SBOX[*(ciphertext+4)];
    3d18:	c8 01       	movw	r24, r16
    3d1a:	04 96       	adiw	r24, 0x04	; 4
    3d1c:	fc 01       	movw	r30, r24
    3d1e:	80 81       	ld	r24, Z
    3d20:	88 2f       	mov	r24, r24
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	80 50       	subi	r24, 0x00	; 0
    3d26:	9e 4f       	sbci	r25, 0xFE	; 254
    3d28:	fc 01       	movw	r30, r24
    3d2a:	80 81       	ld	r24, Z
    3d2c:	8e 83       	std	Y+6, r24	; 0x06
		*(tmp+5) = SBOX[*(ciphertext+5)];
    3d2e:	c8 01       	movw	r24, r16
    3d30:	05 96       	adiw	r24, 0x05	; 5
    3d32:	fc 01       	movw	r30, r24
    3d34:	80 81       	ld	r24, Z
    3d36:	88 2f       	mov	r24, r24
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	80 50       	subi	r24, 0x00	; 0
    3d3c:	9e 4f       	sbci	r25, 0xFE	; 254
    3d3e:	fc 01       	movw	r30, r24
    3d40:	80 81       	ld	r24, Z
    3d42:	8f 83       	std	Y+7, r24	; 0x07
		*(tmp+6) = SBOX[*(ciphertext+6)];
    3d44:	c8 01       	movw	r24, r16
    3d46:	06 96       	adiw	r24, 0x06	; 6
    3d48:	fc 01       	movw	r30, r24
    3d4a:	80 81       	ld	r24, Z
    3d4c:	88 2f       	mov	r24, r24
    3d4e:	90 e0       	ldi	r25, 0x00	; 0
    3d50:	80 50       	subi	r24, 0x00	; 0
    3d52:	9e 4f       	sbci	r25, 0xFE	; 254
    3d54:	fc 01       	movw	r30, r24
    3d56:	80 81       	ld	r24, Z
    3d58:	88 87       	std	Y+8, r24	; 0x08
		*(tmp+7) = SBOX[*(ciphertext+7)];
    3d5a:	c8 01       	movw	r24, r16
    3d5c:	07 96       	adiw	r24, 0x07	; 7
    3d5e:	fc 01       	movw	r30, r24
    3d60:	80 81       	ld	r24, Z
    3d62:	88 2f       	mov	r24, r24
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	80 50       	subi	r24, 0x00	; 0
    3d68:	9e 4f       	sbci	r25, 0xFE	; 254
    3d6a:	fc 01       	movw	r30, r24
    3d6c:	80 81       	ld	r24, Z
    3d6e:	89 87       	std	Y+9, r24	; 0x09
		*(tmp+8) = SBOX[*(ciphertext+8)];
    3d70:	c8 01       	movw	r24, r16
    3d72:	08 96       	adiw	r24, 0x08	; 8
    3d74:	fc 01       	movw	r30, r24
    3d76:	80 81       	ld	r24, Z
    3d78:	88 2f       	mov	r24, r24
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	80 50       	subi	r24, 0x00	; 0
    3d7e:	9e 4f       	sbci	r25, 0xFE	; 254
    3d80:	fc 01       	movw	r30, r24
    3d82:	80 81       	ld	r24, Z
    3d84:	8a 87       	std	Y+10, r24	; 0x0a
		*(tmp+9) = SBOX[*(ciphertext+9)];
    3d86:	c8 01       	movw	r24, r16
    3d88:	09 96       	adiw	r24, 0x09	; 9
    3d8a:	fc 01       	movw	r30, r24
    3d8c:	80 81       	ld	r24, Z
    3d8e:	88 2f       	mov	r24, r24
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	80 50       	subi	r24, 0x00	; 0
    3d94:	9e 4f       	sbci	r25, 0xFE	; 254
    3d96:	fc 01       	movw	r30, r24
    3d98:	80 81       	ld	r24, Z
    3d9a:	8b 87       	std	Y+11, r24	; 0x0b
		*(tmp+10) = SBOX[*(ciphertext+10)];
    3d9c:	c8 01       	movw	r24, r16
    3d9e:	0a 96       	adiw	r24, 0x0a	; 10
    3da0:	fc 01       	movw	r30, r24
    3da2:	80 81       	ld	r24, Z
    3da4:	88 2f       	mov	r24, r24
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    3da8:	80 50       	subi	r24, 0x00	; 0
    3daa:	9e 4f       	sbci	r25, 0xFE	; 254
    3dac:	fc 01       	movw	r30, r24
    3dae:	80 81       	ld	r24, Z
    3db0:	8c 87       	std	Y+12, r24	; 0x0c
		*(tmp+11) = SBOX[*(ciphertext+11)];
    3db2:	c8 01       	movw	r24, r16
    3db4:	0b 96       	adiw	r24, 0x0b	; 11
    3db6:	fc 01       	movw	r30, r24
    3db8:	80 81       	ld	r24, Z
    3dba:	88 2f       	mov	r24, r24
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	80 50       	subi	r24, 0x00	; 0
    3dc0:	9e 4f       	sbci	r25, 0xFE	; 254
    3dc2:	fc 01       	movw	r30, r24
    3dc4:	80 81       	ld	r24, Z
    3dc6:	8d 87       	std	Y+13, r24	; 0x0d
		*(tmp+12) = SBOX[*(ciphertext+12)];
    3dc8:	c8 01       	movw	r24, r16
    3dca:	0c 96       	adiw	r24, 0x0c	; 12
    3dcc:	fc 01       	movw	r30, r24
    3dce:	80 81       	ld	r24, Z
    3dd0:	88 2f       	mov	r24, r24
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	80 50       	subi	r24, 0x00	; 0
    3dd6:	9e 4f       	sbci	r25, 0xFE	; 254
    3dd8:	fc 01       	movw	r30, r24
    3dda:	80 81       	ld	r24, Z
    3ddc:	8e 87       	std	Y+14, r24	; 0x0e
		*(tmp+13) = SBOX[*(ciphertext+13)];
    3dde:	c8 01       	movw	r24, r16
    3de0:	0d 96       	adiw	r24, 0x0d	; 13
    3de2:	fc 01       	movw	r30, r24
    3de4:	80 81       	ld	r24, Z
    3de6:	88 2f       	mov	r24, r24
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	80 50       	subi	r24, 0x00	; 0
    3dec:	9e 4f       	sbci	r25, 0xFE	; 254
    3dee:	fc 01       	movw	r30, r24
    3df0:	80 81       	ld	r24, Z
    3df2:	8f 87       	std	Y+15, r24	; 0x0f
		*(tmp+14) = SBOX[*(ciphertext+14)];
    3df4:	c8 01       	movw	r24, r16
    3df6:	0e 96       	adiw	r24, 0x0e	; 14
    3df8:	fc 01       	movw	r30, r24
    3dfa:	80 81       	ld	r24, Z
    3dfc:	88 2f       	mov	r24, r24
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	80 50       	subi	r24, 0x00	; 0
    3e02:	9e 4f       	sbci	r25, 0xFE	; 254
    3e04:	fc 01       	movw	r30, r24
    3e06:	80 81       	ld	r24, Z
    3e08:	88 8b       	std	Y+16, r24	; 0x10
		*(tmp+15) = SBOX[*(ciphertext+15)];
    3e0a:	c8 01       	movw	r24, r16
    3e0c:	0f 96       	adiw	r24, 0x0f	; 15
    3e0e:	fc 01       	movw	r30, r24
    3e10:	80 81       	ld	r24, Z
    3e12:	88 2f       	mov	r24, r24
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	80 50       	subi	r24, 0x00	; 0
    3e18:	9e 4f       	sbci	r25, 0xFE	; 254
    3e1a:	fc 01       	movw	r30, r24
    3e1c:	80 81       	ld	r24, Z
    3e1e:	89 8b       	std	Y+17, r24	; 0x11
        shift_rows(tmp);
    3e20:	ce 01       	movw	r24, r28
    3e22:	02 96       	adiw	r24, 0x02	; 2
    3e24:	0e 94 18 09 	call	0x1230	; 0x1230 <shift_rows>
		
		t = tmp[0] ^ tmp[1] ^ tmp[2] ^ tmp[3];
    3e28:	9a 81       	ldd	r25, Y+2	; 0x02
    3e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e2c:	98 27       	eor	r25, r24
    3e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    3e30:	98 27       	eor	r25, r24
    3e32:	8d 81       	ldd	r24, Y+5	; 0x05
    3e34:	89 27       	eor	r24, r25
    3e36:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[0] = mul2(tmp[0]   ^ tmp[1]) ^ tmp[0]   ^ t;
    3e38:	9a 81       	ldd	r25, Y+2	; 0x02
    3e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3c:	89 27       	eor	r24, r25
    3e3e:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    3e42:	98 2f       	mov	r25, r24
    3e44:	8a 81       	ldd	r24, Y+2	; 0x02
    3e46:	98 27       	eor	r25, r24
    3e48:	89 81       	ldd	r24, Y+1	; 0x01
    3e4a:	89 27       	eor	r24, r25
    3e4c:	f8 01       	movw	r30, r16
    3e4e:	80 83       	st	Z, r24
        ciphertext[1] = mul2(tmp[1] ^ tmp[2]) ^ tmp[1] ^ t;
    3e50:	68 01       	movw	r12, r16
    3e52:	ff ef       	ldi	r31, 0xFF	; 255
    3e54:	cf 1a       	sub	r12, r31
    3e56:	df 0a       	sbc	r13, r31
    3e58:	9b 81       	ldd	r25, Y+3	; 0x03
    3e5a:	8c 81       	ldd	r24, Y+4	; 0x04
    3e5c:	89 27       	eor	r24, r25
    3e5e:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    3e62:	98 2f       	mov	r25, r24
    3e64:	8b 81       	ldd	r24, Y+3	; 0x03
    3e66:	98 27       	eor	r25, r24
    3e68:	89 81       	ldd	r24, Y+1	; 0x01
    3e6a:	89 27       	eor	r24, r25
    3e6c:	f6 01       	movw	r30, r12
    3e6e:	80 83       	st	Z, r24
        ciphertext[2] = mul2(tmp[2] ^ tmp[3]) ^ tmp[2] ^ t;
    3e70:	68 01       	movw	r12, r16
    3e72:	f2 e0       	ldi	r31, 0x02	; 2
    3e74:	cf 0e       	add	r12, r31
    3e76:	d1 1c       	adc	r13, r1
    3e78:	9c 81       	ldd	r25, Y+4	; 0x04
    3e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e7c:	89 27       	eor	r24, r25
    3e7e:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    3e82:	98 2f       	mov	r25, r24
    3e84:	8c 81       	ldd	r24, Y+4	; 0x04
    3e86:	98 27       	eor	r25, r24
    3e88:	89 81       	ldd	r24, Y+1	; 0x01
    3e8a:	89 27       	eor	r24, r25
    3e8c:	f6 01       	movw	r30, r12
    3e8e:	80 83       	st	Z, r24
        ciphertext[3] = mul2(tmp[3] ^ tmp[0]  ) ^ tmp[3] ^ t;
    3e90:	68 01       	movw	r12, r16
    3e92:	f3 e0       	ldi	r31, 0x03	; 3
    3e94:	cf 0e       	add	r12, r31
    3e96:	d1 1c       	adc	r13, r1
    3e98:	9d 81       	ldd	r25, Y+5	; 0x05
    3e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e9c:	89 27       	eor	r24, r25
    3e9e:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    3ea2:	98 2f       	mov	r25, r24
    3ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ea6:	98 27       	eor	r25, r24
    3ea8:	89 81       	ldd	r24, Y+1	; 0x01
    3eaa:	89 27       	eor	r24, r25
    3eac:	f6 01       	movw	r30, r12
    3eae:	80 83       	st	Z, r24
			
		t = tmp[4] ^ tmp[5] ^ tmp[6] ^ tmp[7];
    3eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    3eb2:	8f 81       	ldd	r24, Y+7	; 0x07
    3eb4:	98 27       	eor	r25, r24
    3eb6:	88 85       	ldd	r24, Y+8	; 0x08
    3eb8:	98 27       	eor	r25, r24
    3eba:	89 85       	ldd	r24, Y+9	; 0x09
    3ebc:	89 27       	eor	r24, r25
    3ebe:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[4]   = mul2(tmp[4]   ^ tmp[5]) ^ tmp[4]   ^ t;
    3ec0:	68 01       	movw	r12, r16
    3ec2:	f4 e0       	ldi	r31, 0x04	; 4
    3ec4:	cf 0e       	add	r12, r31
    3ec6:	d1 1c       	adc	r13, r1
    3ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    3eca:	8f 81       	ldd	r24, Y+7	; 0x07
    3ecc:	89 27       	eor	r24, r25
    3ece:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    3ed2:	98 2f       	mov	r25, r24
    3ed4:	8e 81       	ldd	r24, Y+6	; 0x06
    3ed6:	98 27       	eor	r25, r24
    3ed8:	89 81       	ldd	r24, Y+1	; 0x01
    3eda:	89 27       	eor	r24, r25
    3edc:	f6 01       	movw	r30, r12
    3ede:	80 83       	st	Z, r24
        ciphertext[5] = mul2(tmp[5] ^ tmp[6]) ^ tmp[5] ^ t;
    3ee0:	68 01       	movw	r12, r16
    3ee2:	f5 e0       	ldi	r31, 0x05	; 5
    3ee4:	cf 0e       	add	r12, r31
    3ee6:	d1 1c       	adc	r13, r1
    3ee8:	9f 81       	ldd	r25, Y+7	; 0x07
    3eea:	88 85       	ldd	r24, Y+8	; 0x08
    3eec:	89 27       	eor	r24, r25
    3eee:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    3ef2:	98 2f       	mov	r25, r24
    3ef4:	8f 81       	ldd	r24, Y+7	; 0x07
    3ef6:	98 27       	eor	r25, r24
    3ef8:	89 81       	ldd	r24, Y+1	; 0x01
    3efa:	89 27       	eor	r24, r25
    3efc:	f6 01       	movw	r30, r12
    3efe:	80 83       	st	Z, r24
        ciphertext[6] = mul2(tmp[6] ^ tmp[7]) ^ tmp[6] ^ t;
    3f00:	68 01       	movw	r12, r16
    3f02:	f6 e0       	ldi	r31, 0x06	; 6
    3f04:	cf 0e       	add	r12, r31
    3f06:	d1 1c       	adc	r13, r1
    3f08:	98 85       	ldd	r25, Y+8	; 0x08
    3f0a:	89 85       	ldd	r24, Y+9	; 0x09
    3f0c:	89 27       	eor	r24, r25
    3f0e:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    3f12:	98 2f       	mov	r25, r24
    3f14:	88 85       	ldd	r24, Y+8	; 0x08
    3f16:	98 27       	eor	r25, r24
    3f18:	89 81       	ldd	r24, Y+1	; 0x01
    3f1a:	89 27       	eor	r24, r25
    3f1c:	f6 01       	movw	r30, r12
    3f1e:	80 83       	st	Z, r24
        ciphertext[7] = mul2(tmp[7] ^ tmp[4]  ) ^ tmp[7] ^ t;
    3f20:	68 01       	movw	r12, r16
    3f22:	f7 e0       	ldi	r31, 0x07	; 7
    3f24:	cf 0e       	add	r12, r31
    3f26:	d1 1c       	adc	r13, r1
    3f28:	99 85       	ldd	r25, Y+9	; 0x09
    3f2a:	8e 81       	ldd	r24, Y+6	; 0x06
    3f2c:	89 27       	eor	r24, r25
    3f2e:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    3f32:	98 2f       	mov	r25, r24
    3f34:	89 85       	ldd	r24, Y+9	; 0x09
    3f36:	98 27       	eor	r25, r24
    3f38:	89 81       	ldd	r24, Y+1	; 0x01
    3f3a:	89 27       	eor	r24, r25
    3f3c:	f6 01       	movw	r30, r12
    3f3e:	80 83       	st	Z, r24
			
		t = tmp[8] ^ tmp[9] ^ tmp[10] ^ tmp[11];
    3f40:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f42:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f44:	98 27       	eor	r25, r24
    3f46:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f48:	98 27       	eor	r25, r24
    3f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f4c:	89 27       	eor	r24, r25
    3f4e:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[8]   = mul2(tmp[8]   ^ tmp[9]) ^ tmp[8]   ^ t;
    3f50:	68 01       	movw	r12, r16
    3f52:	f8 e0       	ldi	r31, 0x08	; 8
    3f54:	cf 0e       	add	r12, r31
    3f56:	d1 1c       	adc	r13, r1
    3f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f5c:	89 27       	eor	r24, r25
    3f5e:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    3f62:	98 2f       	mov	r25, r24
    3f64:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f66:	98 27       	eor	r25, r24
    3f68:	89 81       	ldd	r24, Y+1	; 0x01
    3f6a:	89 27       	eor	r24, r25
    3f6c:	f6 01       	movw	r30, r12
    3f6e:	80 83       	st	Z, r24
        ciphertext[9] = mul2(tmp[9] ^ tmp[10]) ^ tmp[9] ^ t;
    3f70:	68 01       	movw	r12, r16
    3f72:	f9 e0       	ldi	r31, 0x09	; 9
    3f74:	cf 0e       	add	r12, r31
    3f76:	d1 1c       	adc	r13, r1
    3f78:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f7a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f7c:	89 27       	eor	r24, r25
    3f7e:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    3f82:	98 2f       	mov	r25, r24
    3f84:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f86:	98 27       	eor	r25, r24
    3f88:	89 81       	ldd	r24, Y+1	; 0x01
    3f8a:	89 27       	eor	r24, r25
    3f8c:	f6 01       	movw	r30, r12
    3f8e:	80 83       	st	Z, r24
        ciphertext[10] = mul2(tmp[10] ^ tmp[11]) ^ tmp[10] ^ t;
    3f90:	68 01       	movw	r12, r16
    3f92:	fa e0       	ldi	r31, 0x0A	; 10
    3f94:	cf 0e       	add	r12, r31
    3f96:	d1 1c       	adc	r13, r1
    3f98:	9c 85       	ldd	r25, Y+12	; 0x0c
    3f9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f9c:	89 27       	eor	r24, r25
    3f9e:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    3fa2:	98 2f       	mov	r25, r24
    3fa4:	8c 85       	ldd	r24, Y+12	; 0x0c
    3fa6:	98 27       	eor	r25, r24
    3fa8:	89 81       	ldd	r24, Y+1	; 0x01
    3faa:	89 27       	eor	r24, r25
    3fac:	f6 01       	movw	r30, r12
    3fae:	80 83       	st	Z, r24
        ciphertext[11] = mul2(tmp[11] ^ tmp[8]  ) ^ tmp[11] ^ t;
    3fb0:	68 01       	movw	r12, r16
    3fb2:	fb e0       	ldi	r31, 0x0B	; 11
    3fb4:	cf 0e       	add	r12, r31
    3fb6:	d1 1c       	adc	r13, r1
    3fb8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3fba:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fbc:	89 27       	eor	r24, r25
    3fbe:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    3fc2:	98 2f       	mov	r25, r24
    3fc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fc6:	98 27       	eor	r25, r24
    3fc8:	89 81       	ldd	r24, Y+1	; 0x01
    3fca:	89 27       	eor	r24, r25
    3fcc:	f6 01       	movw	r30, r12
    3fce:	80 83       	st	Z, r24
			
		t = tmp[12] ^ tmp[13] ^ tmp[14] ^ tmp[15];
    3fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fd4:	98 27       	eor	r25, r24
    3fd6:	88 89       	ldd	r24, Y+16	; 0x10
    3fd8:	98 27       	eor	r25, r24
    3fda:	89 89       	ldd	r24, Y+17	; 0x11
    3fdc:	89 27       	eor	r24, r25
    3fde:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[12] = mul2(tmp[12]   ^ tmp[13]) ^ tmp[12]   ^ t;
    3fe0:	68 01       	movw	r12, r16
    3fe2:	fc e0       	ldi	r31, 0x0C	; 12
    3fe4:	cf 0e       	add	r12, r31
    3fe6:	d1 1c       	adc	r13, r1
    3fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fea:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fec:	89 27       	eor	r24, r25
    3fee:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    3ff2:	98 2f       	mov	r25, r24
    3ff4:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ff6:	98 27       	eor	r25, r24
    3ff8:	89 81       	ldd	r24, Y+1	; 0x01
    3ffa:	89 27       	eor	r24, r25
    3ffc:	f6 01       	movw	r30, r12
    3ffe:	80 83       	st	Z, r24
        ciphertext[13] = mul2(tmp[13] ^ tmp[14]) ^ tmp[13] ^ t;
    4000:	68 01       	movw	r12, r16
    4002:	fd e0       	ldi	r31, 0x0D	; 13
    4004:	cf 0e       	add	r12, r31
    4006:	d1 1c       	adc	r13, r1
    4008:	9f 85       	ldd	r25, Y+15	; 0x0f
    400a:	88 89       	ldd	r24, Y+16	; 0x10
    400c:	89 27       	eor	r24, r25
    400e:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    4012:	98 2f       	mov	r25, r24
    4014:	8f 85       	ldd	r24, Y+15	; 0x0f
    4016:	98 27       	eor	r25, r24
    4018:	89 81       	ldd	r24, Y+1	; 0x01
    401a:	89 27       	eor	r24, r25
    401c:	f6 01       	movw	r30, r12
    401e:	80 83       	st	Z, r24
        ciphertext[14] = mul2(tmp[14] ^ tmp[15]) ^ tmp[14] ^ t;
    4020:	68 01       	movw	r12, r16
    4022:	fe e0       	ldi	r31, 0x0E	; 14
    4024:	cf 0e       	add	r12, r31
    4026:	d1 1c       	adc	r13, r1
    4028:	98 89       	ldd	r25, Y+16	; 0x10
    402a:	89 89       	ldd	r24, Y+17	; 0x11
    402c:	89 27       	eor	r24, r25
    402e:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    4032:	98 2f       	mov	r25, r24
    4034:	88 89       	ldd	r24, Y+16	; 0x10
    4036:	98 27       	eor	r25, r24
    4038:	89 81       	ldd	r24, Y+1	; 0x01
    403a:	89 27       	eor	r24, r25
    403c:	f6 01       	movw	r30, r12
    403e:	80 83       	st	Z, r24
        ciphertext[15] = mul2(tmp[15] ^ tmp[12]  ) ^ tmp[15] ^ t;
    4040:	68 01       	movw	r12, r16
    4042:	ff e0       	ldi	r31, 0x0F	; 15
    4044:	cf 0e       	add	r12, r31
    4046:	d1 1c       	adc	r13, r1
    4048:	99 89       	ldd	r25, Y+17	; 0x11
    404a:	8e 85       	ldd	r24, Y+14	; 0x0e
    404c:	89 27       	eor	r24, r25
    404e:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    4052:	98 2f       	mov	r25, r24
    4054:	89 89       	ldd	r24, Y+17	; 0x11
    4056:	98 27       	eor	r25, r24
    4058:	89 81       	ldd	r24, Y+1	; 0x01
    405a:	89 27       	eor	r24, r25
    405c:	f6 01       	movw	r30, r12
    405e:	80 83       	st	Z, r24
		
		*(ciphertext+0) ^= *roundkeys++;
    4060:	c7 01       	movw	r24, r14
    4062:	7c 01       	movw	r14, r24
    4064:	ff ef       	ldi	r31, 0xFF	; 255
    4066:	ef 1a       	sub	r14, r31
    4068:	ff 0a       	sbc	r15, r31
    406a:	fc 01       	movw	r30, r24
    406c:	80 81       	ld	r24, Z
    406e:	f8 01       	movw	r30, r16
    4070:	90 81       	ld	r25, Z
    4072:	89 27       	eor	r24, r25
    4074:	f8 01       	movw	r30, r16
    4076:	80 83       	st	Z, r24
		*(ciphertext+1) ^= *roundkeys++;
    4078:	c7 01       	movw	r24, r14
    407a:	7c 01       	movw	r14, r24
    407c:	ff ef       	ldi	r31, 0xFF	; 255
    407e:	ef 1a       	sub	r14, r31
    4080:	ff 0a       	sbc	r15, r31
    4082:	fc 01       	movw	r30, r24
    4084:	40 81       	ld	r20, Z
    4086:	c8 01       	movw	r24, r16
    4088:	01 96       	adiw	r24, 0x01	; 1
    408a:	98 01       	movw	r18, r16
    408c:	2f 5f       	subi	r18, 0xFF	; 255
    408e:	3f 4f       	sbci	r19, 0xFF	; 255
    4090:	f9 01       	movw	r30, r18
    4092:	20 81       	ld	r18, Z
    4094:	24 27       	eor	r18, r20
    4096:	fc 01       	movw	r30, r24
    4098:	20 83       	st	Z, r18
		*(ciphertext+2) ^= *roundkeys++;
    409a:	c7 01       	movw	r24, r14
    409c:	7c 01       	movw	r14, r24
    409e:	ff ef       	ldi	r31, 0xFF	; 255
    40a0:	ef 1a       	sub	r14, r31
    40a2:	ff 0a       	sbc	r15, r31
    40a4:	fc 01       	movw	r30, r24
    40a6:	40 81       	ld	r20, Z
    40a8:	c8 01       	movw	r24, r16
    40aa:	02 96       	adiw	r24, 0x02	; 2
    40ac:	98 01       	movw	r18, r16
    40ae:	2e 5f       	subi	r18, 0xFE	; 254
    40b0:	3f 4f       	sbci	r19, 0xFF	; 255
    40b2:	f9 01       	movw	r30, r18
    40b4:	20 81       	ld	r18, Z
    40b6:	24 27       	eor	r18, r20
    40b8:	fc 01       	movw	r30, r24
    40ba:	20 83       	st	Z, r18
		*(ciphertext+3) ^= *roundkeys++;
    40bc:	c7 01       	movw	r24, r14
    40be:	7c 01       	movw	r14, r24
    40c0:	ff ef       	ldi	r31, 0xFF	; 255
    40c2:	ef 1a       	sub	r14, r31
    40c4:	ff 0a       	sbc	r15, r31
    40c6:	fc 01       	movw	r30, r24
    40c8:	40 81       	ld	r20, Z
    40ca:	c8 01       	movw	r24, r16
    40cc:	03 96       	adiw	r24, 0x03	; 3
    40ce:	98 01       	movw	r18, r16
    40d0:	2d 5f       	subi	r18, 0xFD	; 253
    40d2:	3f 4f       	sbci	r19, 0xFF	; 255
    40d4:	f9 01       	movw	r30, r18
    40d6:	20 81       	ld	r18, Z
    40d8:	24 27       	eor	r18, r20
    40da:	fc 01       	movw	r30, r24
    40dc:	20 83       	st	Z, r18
		*(ciphertext+4) ^= *roundkeys++;
    40de:	c7 01       	movw	r24, r14
    40e0:	7c 01       	movw	r14, r24
    40e2:	ff ef       	ldi	r31, 0xFF	; 255
    40e4:	ef 1a       	sub	r14, r31
    40e6:	ff 0a       	sbc	r15, r31
    40e8:	fc 01       	movw	r30, r24
    40ea:	40 81       	ld	r20, Z
    40ec:	c8 01       	movw	r24, r16
    40ee:	04 96       	adiw	r24, 0x04	; 4
    40f0:	98 01       	movw	r18, r16
    40f2:	2c 5f       	subi	r18, 0xFC	; 252
    40f4:	3f 4f       	sbci	r19, 0xFF	; 255
    40f6:	f9 01       	movw	r30, r18
    40f8:	20 81       	ld	r18, Z
    40fa:	24 27       	eor	r18, r20
    40fc:	fc 01       	movw	r30, r24
    40fe:	20 83       	st	Z, r18
		*(ciphertext+5) ^= *roundkeys++;
    4100:	c7 01       	movw	r24, r14
    4102:	7c 01       	movw	r14, r24
    4104:	ff ef       	ldi	r31, 0xFF	; 255
    4106:	ef 1a       	sub	r14, r31
    4108:	ff 0a       	sbc	r15, r31
    410a:	fc 01       	movw	r30, r24
    410c:	40 81       	ld	r20, Z
    410e:	c8 01       	movw	r24, r16
    4110:	05 96       	adiw	r24, 0x05	; 5
    4112:	98 01       	movw	r18, r16
    4114:	2b 5f       	subi	r18, 0xFB	; 251
    4116:	3f 4f       	sbci	r19, 0xFF	; 255
    4118:	f9 01       	movw	r30, r18
    411a:	20 81       	ld	r18, Z
    411c:	24 27       	eor	r18, r20
    411e:	fc 01       	movw	r30, r24
    4120:	20 83       	st	Z, r18
		*(ciphertext+6) ^= *roundkeys++;
    4122:	c7 01       	movw	r24, r14
    4124:	7c 01       	movw	r14, r24
    4126:	ff ef       	ldi	r31, 0xFF	; 255
    4128:	ef 1a       	sub	r14, r31
    412a:	ff 0a       	sbc	r15, r31
    412c:	fc 01       	movw	r30, r24
    412e:	40 81       	ld	r20, Z
    4130:	c8 01       	movw	r24, r16
    4132:	06 96       	adiw	r24, 0x06	; 6
    4134:	98 01       	movw	r18, r16
    4136:	2a 5f       	subi	r18, 0xFA	; 250
    4138:	3f 4f       	sbci	r19, 0xFF	; 255
    413a:	f9 01       	movw	r30, r18
    413c:	20 81       	ld	r18, Z
    413e:	24 27       	eor	r18, r20
    4140:	fc 01       	movw	r30, r24
    4142:	20 83       	st	Z, r18
		*(ciphertext+7) ^= *roundkeys++;
    4144:	c7 01       	movw	r24, r14
    4146:	7c 01       	movw	r14, r24
    4148:	ff ef       	ldi	r31, 0xFF	; 255
    414a:	ef 1a       	sub	r14, r31
    414c:	ff 0a       	sbc	r15, r31
    414e:	fc 01       	movw	r30, r24
    4150:	40 81       	ld	r20, Z
    4152:	c8 01       	movw	r24, r16
    4154:	07 96       	adiw	r24, 0x07	; 7
    4156:	98 01       	movw	r18, r16
    4158:	29 5f       	subi	r18, 0xF9	; 249
    415a:	3f 4f       	sbci	r19, 0xFF	; 255
    415c:	f9 01       	movw	r30, r18
    415e:	20 81       	ld	r18, Z
    4160:	24 27       	eor	r18, r20
    4162:	fc 01       	movw	r30, r24
    4164:	20 83       	st	Z, r18
		*(ciphertext+8) ^= *roundkeys++;
    4166:	c7 01       	movw	r24, r14
    4168:	7c 01       	movw	r14, r24
    416a:	ff ef       	ldi	r31, 0xFF	; 255
    416c:	ef 1a       	sub	r14, r31
    416e:	ff 0a       	sbc	r15, r31
    4170:	fc 01       	movw	r30, r24
    4172:	40 81       	ld	r20, Z
    4174:	c8 01       	movw	r24, r16
    4176:	08 96       	adiw	r24, 0x08	; 8
    4178:	98 01       	movw	r18, r16
    417a:	28 5f       	subi	r18, 0xF8	; 248
    417c:	3f 4f       	sbci	r19, 0xFF	; 255
    417e:	f9 01       	movw	r30, r18
    4180:	20 81       	ld	r18, Z
    4182:	24 27       	eor	r18, r20
    4184:	fc 01       	movw	r30, r24
    4186:	20 83       	st	Z, r18
		*(ciphertext+9) ^= *roundkeys++;
    4188:	c7 01       	movw	r24, r14
    418a:	7c 01       	movw	r14, r24
    418c:	ff ef       	ldi	r31, 0xFF	; 255
    418e:	ef 1a       	sub	r14, r31
    4190:	ff 0a       	sbc	r15, r31
    4192:	fc 01       	movw	r30, r24
    4194:	40 81       	ld	r20, Z
    4196:	c8 01       	movw	r24, r16
    4198:	09 96       	adiw	r24, 0x09	; 9
    419a:	98 01       	movw	r18, r16
    419c:	27 5f       	subi	r18, 0xF7	; 247
    419e:	3f 4f       	sbci	r19, 0xFF	; 255
    41a0:	f9 01       	movw	r30, r18
    41a2:	20 81       	ld	r18, Z
    41a4:	24 27       	eor	r18, r20
    41a6:	fc 01       	movw	r30, r24
    41a8:	20 83       	st	Z, r18
		*(ciphertext+10) ^= *roundkeys++;
    41aa:	c7 01       	movw	r24, r14
    41ac:	7c 01       	movw	r14, r24
    41ae:	ff ef       	ldi	r31, 0xFF	; 255
    41b0:	ef 1a       	sub	r14, r31
    41b2:	ff 0a       	sbc	r15, r31
    41b4:	fc 01       	movw	r30, r24
    41b6:	40 81       	ld	r20, Z
    41b8:	c8 01       	movw	r24, r16
    41ba:	0a 96       	adiw	r24, 0x0a	; 10
    41bc:	98 01       	movw	r18, r16
    41be:	26 5f       	subi	r18, 0xF6	; 246
    41c0:	3f 4f       	sbci	r19, 0xFF	; 255
    41c2:	f9 01       	movw	r30, r18
    41c4:	20 81       	ld	r18, Z
    41c6:	24 27       	eor	r18, r20
    41c8:	fc 01       	movw	r30, r24
    41ca:	20 83       	st	Z, r18
		*(ciphertext+11) ^= *roundkeys++;
    41cc:	c7 01       	movw	r24, r14
    41ce:	7c 01       	movw	r14, r24
    41d0:	ff ef       	ldi	r31, 0xFF	; 255
    41d2:	ef 1a       	sub	r14, r31
    41d4:	ff 0a       	sbc	r15, r31
    41d6:	fc 01       	movw	r30, r24
    41d8:	40 81       	ld	r20, Z
    41da:	c8 01       	movw	r24, r16
    41dc:	0b 96       	adiw	r24, 0x0b	; 11
    41de:	98 01       	movw	r18, r16
    41e0:	25 5f       	subi	r18, 0xF5	; 245
    41e2:	3f 4f       	sbci	r19, 0xFF	; 255
    41e4:	f9 01       	movw	r30, r18
    41e6:	20 81       	ld	r18, Z
    41e8:	24 27       	eor	r18, r20
    41ea:	fc 01       	movw	r30, r24
    41ec:	20 83       	st	Z, r18
		*(ciphertext+12) ^= *roundkeys++;
    41ee:	c7 01       	movw	r24, r14
    41f0:	7c 01       	movw	r14, r24
    41f2:	ff ef       	ldi	r31, 0xFF	; 255
    41f4:	ef 1a       	sub	r14, r31
    41f6:	ff 0a       	sbc	r15, r31
    41f8:	fc 01       	movw	r30, r24
    41fa:	40 81       	ld	r20, Z
    41fc:	c8 01       	movw	r24, r16
    41fe:	0c 96       	adiw	r24, 0x0c	; 12
    4200:	98 01       	movw	r18, r16
    4202:	24 5f       	subi	r18, 0xF4	; 244
    4204:	3f 4f       	sbci	r19, 0xFF	; 255
    4206:	f9 01       	movw	r30, r18
    4208:	20 81       	ld	r18, Z
    420a:	24 27       	eor	r18, r20
    420c:	fc 01       	movw	r30, r24
    420e:	20 83       	st	Z, r18
		*(ciphertext+13) ^= *roundkeys++;
    4210:	c7 01       	movw	r24, r14
    4212:	7c 01       	movw	r14, r24
    4214:	ff ef       	ldi	r31, 0xFF	; 255
    4216:	ef 1a       	sub	r14, r31
    4218:	ff 0a       	sbc	r15, r31
    421a:	fc 01       	movw	r30, r24
    421c:	40 81       	ld	r20, Z
    421e:	c8 01       	movw	r24, r16
    4220:	0d 96       	adiw	r24, 0x0d	; 13
    4222:	98 01       	movw	r18, r16
    4224:	23 5f       	subi	r18, 0xF3	; 243
    4226:	3f 4f       	sbci	r19, 0xFF	; 255
    4228:	f9 01       	movw	r30, r18
    422a:	20 81       	ld	r18, Z
    422c:	24 27       	eor	r18, r20
    422e:	fc 01       	movw	r30, r24
    4230:	20 83       	st	Z, r18
		*(ciphertext+14) ^= *roundkeys++;
    4232:	c7 01       	movw	r24, r14
    4234:	7c 01       	movw	r14, r24
    4236:	ff ef       	ldi	r31, 0xFF	; 255
    4238:	ef 1a       	sub	r14, r31
    423a:	ff 0a       	sbc	r15, r31
    423c:	fc 01       	movw	r30, r24
    423e:	40 81       	ld	r20, Z
    4240:	c8 01       	movw	r24, r16
    4242:	0e 96       	adiw	r24, 0x0e	; 14
    4244:	98 01       	movw	r18, r16
    4246:	22 5f       	subi	r18, 0xF2	; 242
    4248:	3f 4f       	sbci	r19, 0xFF	; 255
    424a:	f9 01       	movw	r30, r18
    424c:	20 81       	ld	r18, Z
    424e:	24 27       	eor	r18, r20
    4250:	fc 01       	movw	r30, r24
    4252:	20 83       	st	Z, r18
		*(ciphertext+15) ^= *roundkeys++;
    4254:	c7 01       	movw	r24, r14
    4256:	7c 01       	movw	r14, r24
    4258:	ff ef       	ldi	r31, 0xFF	; 255
    425a:	ef 1a       	sub	r14, r31
    425c:	ff 0a       	sbc	r15, r31
    425e:	fc 01       	movw	r30, r24
    4260:	40 81       	ld	r20, Z
    4262:	c8 01       	movw	r24, r16
    4264:	0f 96       	adiw	r24, 0x0f	; 15
    4266:	98 01       	movw	r18, r16
    4268:	21 5f       	subi	r18, 0xF1	; 241
    426a:	3f 4f       	sbci	r19, 0xFF	; 255
    426c:	f9 01       	movw	r30, r18
    426e:	20 81       	ld	r18, Z
    4270:	24 27       	eor	r18, r20
    4272:	fc 01       	movw	r30, r24
    4274:	20 83       	st	Z, r18
		
		*(tmp+0) = SBOX[*(ciphertext+0)];
    4276:	f8 01       	movw	r30, r16
    4278:	80 81       	ld	r24, Z
    427a:	88 2f       	mov	r24, r24
    427c:	90 e0       	ldi	r25, 0x00	; 0
    427e:	80 50       	subi	r24, 0x00	; 0
    4280:	9e 4f       	sbci	r25, 0xFE	; 254
    4282:	fc 01       	movw	r30, r24
    4284:	80 81       	ld	r24, Z
    4286:	8a 83       	std	Y+2, r24	; 0x02
		*(tmp+1) = SBOX[*(ciphertext+1)];
    4288:	c8 01       	movw	r24, r16
    428a:	01 96       	adiw	r24, 0x01	; 1
    428c:	fc 01       	movw	r30, r24
    428e:	80 81       	ld	r24, Z
    4290:	88 2f       	mov	r24, r24
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	80 50       	subi	r24, 0x00	; 0
    4296:	9e 4f       	sbci	r25, 0xFE	; 254
    4298:	fc 01       	movw	r30, r24
    429a:	80 81       	ld	r24, Z
    429c:	8b 83       	std	Y+3, r24	; 0x03
		*(tmp+2) = SBOX[*(ciphertext+2)];
    429e:	c8 01       	movw	r24, r16
    42a0:	02 96       	adiw	r24, 0x02	; 2
    42a2:	fc 01       	movw	r30, r24
    42a4:	80 81       	ld	r24, Z
    42a6:	88 2f       	mov	r24, r24
    42a8:	90 e0       	ldi	r25, 0x00	; 0
    42aa:	80 50       	subi	r24, 0x00	; 0
    42ac:	9e 4f       	sbci	r25, 0xFE	; 254
    42ae:	fc 01       	movw	r30, r24
    42b0:	80 81       	ld	r24, Z
    42b2:	8c 83       	std	Y+4, r24	; 0x04
		*(tmp+3) = SBOX[*(ciphertext+3)];
    42b4:	c8 01       	movw	r24, r16
    42b6:	03 96       	adiw	r24, 0x03	; 3
    42b8:	fc 01       	movw	r30, r24
    42ba:	80 81       	ld	r24, Z
    42bc:	88 2f       	mov	r24, r24
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	80 50       	subi	r24, 0x00	; 0
    42c2:	9e 4f       	sbci	r25, 0xFE	; 254
    42c4:	fc 01       	movw	r30, r24
    42c6:	80 81       	ld	r24, Z
    42c8:	8d 83       	std	Y+5, r24	; 0x05
		*(tmp+4) = SBOX[*(ciphertext+4)];
    42ca:	c8 01       	movw	r24, r16
    42cc:	04 96       	adiw	r24, 0x04	; 4
    42ce:	fc 01       	movw	r30, r24
    42d0:	80 81       	ld	r24, Z
    42d2:	88 2f       	mov	r24, r24
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	80 50       	subi	r24, 0x00	; 0
    42d8:	9e 4f       	sbci	r25, 0xFE	; 254
    42da:	fc 01       	movw	r30, r24
    42dc:	80 81       	ld	r24, Z
    42de:	8e 83       	std	Y+6, r24	; 0x06
		*(tmp+5) = SBOX[*(ciphertext+5)];
    42e0:	c8 01       	movw	r24, r16
    42e2:	05 96       	adiw	r24, 0x05	; 5
    42e4:	fc 01       	movw	r30, r24
    42e6:	80 81       	ld	r24, Z
    42e8:	88 2f       	mov	r24, r24
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	80 50       	subi	r24, 0x00	; 0
    42ee:	9e 4f       	sbci	r25, 0xFE	; 254
    42f0:	fc 01       	movw	r30, r24
    42f2:	80 81       	ld	r24, Z
    42f4:	8f 83       	std	Y+7, r24	; 0x07
		*(tmp+6) = SBOX[*(ciphertext+6)];
    42f6:	c8 01       	movw	r24, r16
    42f8:	06 96       	adiw	r24, 0x06	; 6
    42fa:	fc 01       	movw	r30, r24
    42fc:	80 81       	ld	r24, Z
    42fe:	88 2f       	mov	r24, r24
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	80 50       	subi	r24, 0x00	; 0
    4304:	9e 4f       	sbci	r25, 0xFE	; 254
    4306:	fc 01       	movw	r30, r24
    4308:	80 81       	ld	r24, Z
    430a:	88 87       	std	Y+8, r24	; 0x08
		*(tmp+7) = SBOX[*(ciphertext+7)];
    430c:	c8 01       	movw	r24, r16
    430e:	07 96       	adiw	r24, 0x07	; 7
    4310:	fc 01       	movw	r30, r24
    4312:	80 81       	ld	r24, Z
    4314:	88 2f       	mov	r24, r24
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	80 50       	subi	r24, 0x00	; 0
    431a:	9e 4f       	sbci	r25, 0xFE	; 254
    431c:	fc 01       	movw	r30, r24
    431e:	80 81       	ld	r24, Z
    4320:	89 87       	std	Y+9, r24	; 0x09
		*(tmp+8) = SBOX[*(ciphertext+8)];
    4322:	c8 01       	movw	r24, r16
    4324:	08 96       	adiw	r24, 0x08	; 8
    4326:	fc 01       	movw	r30, r24
    4328:	80 81       	ld	r24, Z
    432a:	88 2f       	mov	r24, r24
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	80 50       	subi	r24, 0x00	; 0
    4330:	9e 4f       	sbci	r25, 0xFE	; 254
    4332:	fc 01       	movw	r30, r24
    4334:	80 81       	ld	r24, Z
    4336:	8a 87       	std	Y+10, r24	; 0x0a
		*(tmp+9) = SBOX[*(ciphertext+9)];
    4338:	c8 01       	movw	r24, r16
    433a:	09 96       	adiw	r24, 0x09	; 9
    433c:	fc 01       	movw	r30, r24
    433e:	80 81       	ld	r24, Z
    4340:	88 2f       	mov	r24, r24
    4342:	90 e0       	ldi	r25, 0x00	; 0
    4344:	80 50       	subi	r24, 0x00	; 0
    4346:	9e 4f       	sbci	r25, 0xFE	; 254
    4348:	fc 01       	movw	r30, r24
    434a:	80 81       	ld	r24, Z
    434c:	8b 87       	std	Y+11, r24	; 0x0b
		*(tmp+10) = SBOX[*(ciphertext+10)];
    434e:	c8 01       	movw	r24, r16
    4350:	0a 96       	adiw	r24, 0x0a	; 10
    4352:	fc 01       	movw	r30, r24
    4354:	80 81       	ld	r24, Z
    4356:	88 2f       	mov	r24, r24
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	80 50       	subi	r24, 0x00	; 0
    435c:	9e 4f       	sbci	r25, 0xFE	; 254
    435e:	fc 01       	movw	r30, r24
    4360:	80 81       	ld	r24, Z
    4362:	8c 87       	std	Y+12, r24	; 0x0c
		*(tmp+11) = SBOX[*(ciphertext+11)];
    4364:	c8 01       	movw	r24, r16
    4366:	0b 96       	adiw	r24, 0x0b	; 11
    4368:	fc 01       	movw	r30, r24
    436a:	80 81       	ld	r24, Z
    436c:	88 2f       	mov	r24, r24
    436e:	90 e0       	ldi	r25, 0x00	; 0
    4370:	80 50       	subi	r24, 0x00	; 0
    4372:	9e 4f       	sbci	r25, 0xFE	; 254
    4374:	fc 01       	movw	r30, r24
    4376:	80 81       	ld	r24, Z
    4378:	8d 87       	std	Y+13, r24	; 0x0d
		*(tmp+12) = SBOX[*(ciphertext+12)];
    437a:	c8 01       	movw	r24, r16
    437c:	0c 96       	adiw	r24, 0x0c	; 12
    437e:	fc 01       	movw	r30, r24
    4380:	80 81       	ld	r24, Z
    4382:	88 2f       	mov	r24, r24
    4384:	90 e0       	ldi	r25, 0x00	; 0
    4386:	80 50       	subi	r24, 0x00	; 0
    4388:	9e 4f       	sbci	r25, 0xFE	; 254
    438a:	fc 01       	movw	r30, r24
    438c:	80 81       	ld	r24, Z
    438e:	8e 87       	std	Y+14, r24	; 0x0e
		*(tmp+13) = SBOX[*(ciphertext+13)];
    4390:	c8 01       	movw	r24, r16
    4392:	0d 96       	adiw	r24, 0x0d	; 13
    4394:	fc 01       	movw	r30, r24
    4396:	80 81       	ld	r24, Z
    4398:	88 2f       	mov	r24, r24
    439a:	90 e0       	ldi	r25, 0x00	; 0
    439c:	80 50       	subi	r24, 0x00	; 0
    439e:	9e 4f       	sbci	r25, 0xFE	; 254
    43a0:	fc 01       	movw	r30, r24
    43a2:	80 81       	ld	r24, Z
    43a4:	8f 87       	std	Y+15, r24	; 0x0f
		*(tmp+14) = SBOX[*(ciphertext+14)];
    43a6:	c8 01       	movw	r24, r16
    43a8:	0e 96       	adiw	r24, 0x0e	; 14
    43aa:	fc 01       	movw	r30, r24
    43ac:	80 81       	ld	r24, Z
    43ae:	88 2f       	mov	r24, r24
    43b0:	90 e0       	ldi	r25, 0x00	; 0
    43b2:	80 50       	subi	r24, 0x00	; 0
    43b4:	9e 4f       	sbci	r25, 0xFE	; 254
    43b6:	fc 01       	movw	r30, r24
    43b8:	80 81       	ld	r24, Z
    43ba:	88 8b       	std	Y+16, r24	; 0x10
		*(tmp+15) = SBOX[*(ciphertext+15)];
    43bc:	c8 01       	movw	r24, r16
    43be:	0f 96       	adiw	r24, 0x0f	; 15
    43c0:	fc 01       	movw	r30, r24
    43c2:	80 81       	ld	r24, Z
    43c4:	88 2f       	mov	r24, r24
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	80 50       	subi	r24, 0x00	; 0
    43ca:	9e 4f       	sbci	r25, 0xFE	; 254
    43cc:	fc 01       	movw	r30, r24
    43ce:	80 81       	ld	r24, Z
    43d0:	89 8b       	std	Y+17, r24	; 0x11
        shift_rows(tmp);
    43d2:	ce 01       	movw	r24, r28
    43d4:	02 96       	adiw	r24, 0x02	; 2
    43d6:	0e 94 18 09 	call	0x1230	; 0x1230 <shift_rows>
		
		t = tmp[0] ^ tmp[1] ^ tmp[2] ^ tmp[3];
    43da:	9a 81       	ldd	r25, Y+2	; 0x02
    43dc:	8b 81       	ldd	r24, Y+3	; 0x03
    43de:	98 27       	eor	r25, r24
    43e0:	8c 81       	ldd	r24, Y+4	; 0x04
    43e2:	98 27       	eor	r25, r24
    43e4:	8d 81       	ldd	r24, Y+5	; 0x05
    43e6:	89 27       	eor	r24, r25
    43e8:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[0] = mul2(tmp[0]   ^ tmp[1]) ^ tmp[0]   ^ t;
    43ea:	9a 81       	ldd	r25, Y+2	; 0x02
    43ec:	8b 81       	ldd	r24, Y+3	; 0x03
    43ee:	89 27       	eor	r24, r25
    43f0:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    43f4:	98 2f       	mov	r25, r24
    43f6:	8a 81       	ldd	r24, Y+2	; 0x02
    43f8:	98 27       	eor	r25, r24
    43fa:	89 81       	ldd	r24, Y+1	; 0x01
    43fc:	89 27       	eor	r24, r25
    43fe:	f8 01       	movw	r30, r16
    4400:	80 83       	st	Z, r24
        ciphertext[1] = mul2(tmp[1] ^ tmp[2]) ^ tmp[1] ^ t;
    4402:	68 01       	movw	r12, r16
    4404:	ff ef       	ldi	r31, 0xFF	; 255
    4406:	cf 1a       	sub	r12, r31
    4408:	df 0a       	sbc	r13, r31
    440a:	9b 81       	ldd	r25, Y+3	; 0x03
    440c:	8c 81       	ldd	r24, Y+4	; 0x04
    440e:	89 27       	eor	r24, r25
    4410:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    4414:	98 2f       	mov	r25, r24
    4416:	8b 81       	ldd	r24, Y+3	; 0x03
    4418:	98 27       	eor	r25, r24
    441a:	89 81       	ldd	r24, Y+1	; 0x01
    441c:	89 27       	eor	r24, r25
    441e:	f6 01       	movw	r30, r12
    4420:	80 83       	st	Z, r24
        ciphertext[2] = mul2(tmp[2] ^ tmp[3]) ^ tmp[2] ^ t;
    4422:	68 01       	movw	r12, r16
    4424:	f2 e0       	ldi	r31, 0x02	; 2
    4426:	cf 0e       	add	r12, r31
    4428:	d1 1c       	adc	r13, r1
    442a:	9c 81       	ldd	r25, Y+4	; 0x04
    442c:	8d 81       	ldd	r24, Y+5	; 0x05
    442e:	89 27       	eor	r24, r25
    4430:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    4434:	98 2f       	mov	r25, r24
    4436:	8c 81       	ldd	r24, Y+4	; 0x04
    4438:	98 27       	eor	r25, r24
    443a:	89 81       	ldd	r24, Y+1	; 0x01
    443c:	89 27       	eor	r24, r25
    443e:	f6 01       	movw	r30, r12
    4440:	80 83       	st	Z, r24
        ciphertext[3] = mul2(tmp[3] ^ tmp[0]  ) ^ tmp[3] ^ t;
    4442:	68 01       	movw	r12, r16
    4444:	f3 e0       	ldi	r31, 0x03	; 3
    4446:	cf 0e       	add	r12, r31
    4448:	d1 1c       	adc	r13, r1
    444a:	9d 81       	ldd	r25, Y+5	; 0x05
    444c:	8a 81       	ldd	r24, Y+2	; 0x02
    444e:	89 27       	eor	r24, r25
    4450:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    4454:	98 2f       	mov	r25, r24
    4456:	8d 81       	ldd	r24, Y+5	; 0x05
    4458:	98 27       	eor	r25, r24
    445a:	89 81       	ldd	r24, Y+1	; 0x01
    445c:	89 27       	eor	r24, r25
    445e:	f6 01       	movw	r30, r12
    4460:	80 83       	st	Z, r24
			
		t = tmp[4] ^ tmp[5] ^ tmp[6] ^ tmp[7];
    4462:	9e 81       	ldd	r25, Y+6	; 0x06
    4464:	8f 81       	ldd	r24, Y+7	; 0x07
    4466:	98 27       	eor	r25, r24
    4468:	88 85       	ldd	r24, Y+8	; 0x08
    446a:	98 27       	eor	r25, r24
    446c:	89 85       	ldd	r24, Y+9	; 0x09
    446e:	89 27       	eor	r24, r25
    4470:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[4] = mul2(tmp[4]   ^ tmp[5]) ^ tmp[4]   ^ t;
    4472:	68 01       	movw	r12, r16
    4474:	f4 e0       	ldi	r31, 0x04	; 4
    4476:	cf 0e       	add	r12, r31
    4478:	d1 1c       	adc	r13, r1
    447a:	9e 81       	ldd	r25, Y+6	; 0x06
    447c:	8f 81       	ldd	r24, Y+7	; 0x07
    447e:	89 27       	eor	r24, r25
    4480:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    4484:	98 2f       	mov	r25, r24
    4486:	8e 81       	ldd	r24, Y+6	; 0x06
    4488:	98 27       	eor	r25, r24
    448a:	89 81       	ldd	r24, Y+1	; 0x01
    448c:	89 27       	eor	r24, r25
    448e:	f6 01       	movw	r30, r12
    4490:	80 83       	st	Z, r24
        ciphertext[5] = mul2(tmp[5] ^ tmp[6]) ^ tmp[5] ^ t;
    4492:	68 01       	movw	r12, r16
    4494:	f5 e0       	ldi	r31, 0x05	; 5
    4496:	cf 0e       	add	r12, r31
    4498:	d1 1c       	adc	r13, r1
    449a:	9f 81       	ldd	r25, Y+7	; 0x07
    449c:	88 85       	ldd	r24, Y+8	; 0x08
    449e:	89 27       	eor	r24, r25
    44a0:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    44a4:	98 2f       	mov	r25, r24
    44a6:	8f 81       	ldd	r24, Y+7	; 0x07
    44a8:	98 27       	eor	r25, r24
    44aa:	89 81       	ldd	r24, Y+1	; 0x01
    44ac:	89 27       	eor	r24, r25
    44ae:	f6 01       	movw	r30, r12
    44b0:	80 83       	st	Z, r24
        ciphertext[6] = mul2(tmp[6] ^ tmp[7]) ^ tmp[6] ^ t;
    44b2:	68 01       	movw	r12, r16
    44b4:	f6 e0       	ldi	r31, 0x06	; 6
    44b6:	cf 0e       	add	r12, r31
    44b8:	d1 1c       	adc	r13, r1
    44ba:	98 85       	ldd	r25, Y+8	; 0x08
    44bc:	89 85       	ldd	r24, Y+9	; 0x09
    44be:	89 27       	eor	r24, r25
    44c0:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    44c4:	98 2f       	mov	r25, r24
    44c6:	88 85       	ldd	r24, Y+8	; 0x08
    44c8:	98 27       	eor	r25, r24
    44ca:	89 81       	ldd	r24, Y+1	; 0x01
    44cc:	89 27       	eor	r24, r25
    44ce:	f6 01       	movw	r30, r12
    44d0:	80 83       	st	Z, r24
        ciphertext[7] = mul2(tmp[7] ^ tmp[4]  ) ^ tmp[7] ^ t;
    44d2:	68 01       	movw	r12, r16
    44d4:	f7 e0       	ldi	r31, 0x07	; 7
    44d6:	cf 0e       	add	r12, r31
    44d8:	d1 1c       	adc	r13, r1
    44da:	99 85       	ldd	r25, Y+9	; 0x09
    44dc:	8e 81       	ldd	r24, Y+6	; 0x06
    44de:	89 27       	eor	r24, r25
    44e0:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    44e4:	98 2f       	mov	r25, r24
    44e6:	89 85       	ldd	r24, Y+9	; 0x09
    44e8:	98 27       	eor	r25, r24
    44ea:	89 81       	ldd	r24, Y+1	; 0x01
    44ec:	89 27       	eor	r24, r25
    44ee:	f6 01       	movw	r30, r12
    44f0:	80 83       	st	Z, r24
			
		t = tmp[8] ^ tmp[9] ^ tmp[10] ^ tmp[11];
    44f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    44f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    44f6:	98 27       	eor	r25, r24
    44f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    44fa:	98 27       	eor	r25, r24
    44fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    44fe:	89 27       	eor	r24, r25
    4500:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[8]  = mul2(tmp[8]   ^ tmp[9]) ^ tmp[8]   ^ t;
    4502:	68 01       	movw	r12, r16
    4504:	f8 e0       	ldi	r31, 0x08	; 8
    4506:	cf 0e       	add	r12, r31
    4508:	d1 1c       	adc	r13, r1
    450a:	9a 85       	ldd	r25, Y+10	; 0x0a
    450c:	8b 85       	ldd	r24, Y+11	; 0x0b
    450e:	89 27       	eor	r24, r25
    4510:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    4514:	98 2f       	mov	r25, r24
    4516:	8a 85       	ldd	r24, Y+10	; 0x0a
    4518:	98 27       	eor	r25, r24
    451a:	89 81       	ldd	r24, Y+1	; 0x01
    451c:	89 27       	eor	r24, r25
    451e:	f6 01       	movw	r30, r12
    4520:	80 83       	st	Z, r24
        ciphertext[9]  = mul2(tmp[9] ^ tmp[10]) ^ tmp[9] ^ t;
    4522:	68 01       	movw	r12, r16
    4524:	f9 e0       	ldi	r31, 0x09	; 9
    4526:	cf 0e       	add	r12, r31
    4528:	d1 1c       	adc	r13, r1
    452a:	9b 85       	ldd	r25, Y+11	; 0x0b
    452c:	8c 85       	ldd	r24, Y+12	; 0x0c
    452e:	89 27       	eor	r24, r25
    4530:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    4534:	98 2f       	mov	r25, r24
    4536:	8b 85       	ldd	r24, Y+11	; 0x0b
    4538:	98 27       	eor	r25, r24
    453a:	89 81       	ldd	r24, Y+1	; 0x01
    453c:	89 27       	eor	r24, r25
    453e:	f6 01       	movw	r30, r12
    4540:	80 83       	st	Z, r24
        ciphertext[10] = mul2(tmp[10] ^ tmp[11]) ^ tmp[10] ^ t;
    4542:	68 01       	movw	r12, r16
    4544:	fa e0       	ldi	r31, 0x0A	; 10
    4546:	cf 0e       	add	r12, r31
    4548:	d1 1c       	adc	r13, r1
    454a:	9c 85       	ldd	r25, Y+12	; 0x0c
    454c:	8d 85       	ldd	r24, Y+13	; 0x0d
    454e:	89 27       	eor	r24, r25
    4550:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    4554:	98 2f       	mov	r25, r24
    4556:	8c 85       	ldd	r24, Y+12	; 0x0c
    4558:	98 27       	eor	r25, r24
    455a:	89 81       	ldd	r24, Y+1	; 0x01
    455c:	89 27       	eor	r24, r25
    455e:	f6 01       	movw	r30, r12
    4560:	80 83       	st	Z, r24
        ciphertext[11] = mul2(tmp[11] ^ tmp[8]  ) ^ tmp[11] ^ t;
    4562:	68 01       	movw	r12, r16
    4564:	fb e0       	ldi	r31, 0x0B	; 11
    4566:	cf 0e       	add	r12, r31
    4568:	d1 1c       	adc	r13, r1
    456a:	9d 85       	ldd	r25, Y+13	; 0x0d
    456c:	8a 85       	ldd	r24, Y+10	; 0x0a
    456e:	89 27       	eor	r24, r25
    4570:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    4574:	98 2f       	mov	r25, r24
    4576:	8d 85       	ldd	r24, Y+13	; 0x0d
    4578:	98 27       	eor	r25, r24
    457a:	89 81       	ldd	r24, Y+1	; 0x01
    457c:	89 27       	eor	r24, r25
    457e:	f6 01       	movw	r30, r12
    4580:	80 83       	st	Z, r24
			
		t = tmp[12] ^ tmp[13] ^ tmp[14] ^ tmp[15];
    4582:	9e 85       	ldd	r25, Y+14	; 0x0e
    4584:	8f 85       	ldd	r24, Y+15	; 0x0f
    4586:	98 27       	eor	r25, r24
    4588:	88 89       	ldd	r24, Y+16	; 0x10
    458a:	98 27       	eor	r25, r24
    458c:	89 89       	ldd	r24, Y+17	; 0x11
    458e:	89 27       	eor	r24, r25
    4590:	89 83       	std	Y+1, r24	; 0x01
        ciphertext[12] = mul2(tmp[12]   ^ tmp[13]) ^ tmp[12]   ^ t;
    4592:	68 01       	movw	r12, r16
    4594:	fc e0       	ldi	r31, 0x0C	; 12
    4596:	cf 0e       	add	r12, r31
    4598:	d1 1c       	adc	r13, r1
    459a:	9e 85       	ldd	r25, Y+14	; 0x0e
    459c:	8f 85       	ldd	r24, Y+15	; 0x0f
    459e:	89 27       	eor	r24, r25
    45a0:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    45a4:	98 2f       	mov	r25, r24
    45a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    45a8:	98 27       	eor	r25, r24
    45aa:	89 81       	ldd	r24, Y+1	; 0x01
    45ac:	89 27       	eor	r24, r25
    45ae:	f6 01       	movw	r30, r12
    45b0:	80 83       	st	Z, r24
        ciphertext[13] = mul2(tmp[13] ^ tmp[14]) ^ tmp[13] ^ t;
    45b2:	68 01       	movw	r12, r16
    45b4:	fd e0       	ldi	r31, 0x0D	; 13
    45b6:	cf 0e       	add	r12, r31
    45b8:	d1 1c       	adc	r13, r1
    45ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    45bc:	88 89       	ldd	r24, Y+16	; 0x10
    45be:	89 27       	eor	r24, r25
    45c0:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    45c4:	98 2f       	mov	r25, r24
    45c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    45c8:	98 27       	eor	r25, r24
    45ca:	89 81       	ldd	r24, Y+1	; 0x01
    45cc:	89 27       	eor	r24, r25
    45ce:	f6 01       	movw	r30, r12
    45d0:	80 83       	st	Z, r24
        ciphertext[14] = mul2(tmp[14] ^ tmp[15]) ^ tmp[14] ^ t;
    45d2:	68 01       	movw	r12, r16
    45d4:	fe e0       	ldi	r31, 0x0E	; 14
    45d6:	cf 0e       	add	r12, r31
    45d8:	d1 1c       	adc	r13, r1
    45da:	98 89       	ldd	r25, Y+16	; 0x10
    45dc:	89 89       	ldd	r24, Y+17	; 0x11
    45de:	89 27       	eor	r24, r25
    45e0:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    45e4:	98 2f       	mov	r25, r24
    45e6:	88 89       	ldd	r24, Y+16	; 0x10
    45e8:	98 27       	eor	r25, r24
    45ea:	89 81       	ldd	r24, Y+1	; 0x01
    45ec:	89 27       	eor	r24, r25
    45ee:	f6 01       	movw	r30, r12
    45f0:	80 83       	st	Z, r24
        ciphertext[15] = mul2(tmp[15] ^ tmp[12]  ) ^ tmp[15] ^ t;
    45f2:	68 01       	movw	r12, r16
    45f4:	ff e0       	ldi	r31, 0x0F	; 15
    45f6:	cf 0e       	add	r12, r31
    45f8:	d1 1c       	adc	r13, r1
    45fa:	99 89       	ldd	r25, Y+17	; 0x11
    45fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    45fe:	89 27       	eor	r24, r25
    4600:	0e 94 05 09 	call	0x120a	; 0x120a <mul2>
    4604:	98 2f       	mov	r25, r24
    4606:	89 89       	ldd	r24, Y+17	; 0x11
    4608:	98 27       	eor	r25, r24
    460a:	89 81       	ldd	r24, Y+1	; 0x01
    460c:	89 27       	eor	r24, r25
    460e:	f6 01       	movw	r30, r12
    4610:	80 83       	st	Z, r24
		
		*(ciphertext+0) ^= *roundkeys++;
    4612:	c7 01       	movw	r24, r14
    4614:	7c 01       	movw	r14, r24
    4616:	ff ef       	ldi	r31, 0xFF	; 255
    4618:	ef 1a       	sub	r14, r31
    461a:	ff 0a       	sbc	r15, r31
    461c:	fc 01       	movw	r30, r24
    461e:	80 81       	ld	r24, Z
    4620:	f8 01       	movw	r30, r16
    4622:	90 81       	ld	r25, Z
    4624:	89 27       	eor	r24, r25
    4626:	f8 01       	movw	r30, r16
    4628:	80 83       	st	Z, r24
		*(ciphertext+1) ^= *roundkeys++;
    462a:	c7 01       	movw	r24, r14
    462c:	7c 01       	movw	r14, r24
    462e:	ff ef       	ldi	r31, 0xFF	; 255
    4630:	ef 1a       	sub	r14, r31
    4632:	ff 0a       	sbc	r15, r31
    4634:	fc 01       	movw	r30, r24
    4636:	40 81       	ld	r20, Z
    4638:	c8 01       	movw	r24, r16
    463a:	01 96       	adiw	r24, 0x01	; 1
    463c:	98 01       	movw	r18, r16
    463e:	2f 5f       	subi	r18, 0xFF	; 255
    4640:	3f 4f       	sbci	r19, 0xFF	; 255
    4642:	f9 01       	movw	r30, r18
    4644:	20 81       	ld	r18, Z
    4646:	24 27       	eor	r18, r20
    4648:	fc 01       	movw	r30, r24
    464a:	20 83       	st	Z, r18
		*(ciphertext+2) ^= *roundkeys++;
    464c:	c7 01       	movw	r24, r14
    464e:	7c 01       	movw	r14, r24
    4650:	ff ef       	ldi	r31, 0xFF	; 255
    4652:	ef 1a       	sub	r14, r31
    4654:	ff 0a       	sbc	r15, r31
    4656:	fc 01       	movw	r30, r24
    4658:	40 81       	ld	r20, Z
    465a:	c8 01       	movw	r24, r16
    465c:	02 96       	adiw	r24, 0x02	; 2
    465e:	98 01       	movw	r18, r16
    4660:	2e 5f       	subi	r18, 0xFE	; 254
    4662:	3f 4f       	sbci	r19, 0xFF	; 255
    4664:	f9 01       	movw	r30, r18
    4666:	20 81       	ld	r18, Z
    4668:	24 27       	eor	r18, r20
    466a:	fc 01       	movw	r30, r24
    466c:	20 83       	st	Z, r18
		*(ciphertext+3) ^= *roundkeys++;
    466e:	c7 01       	movw	r24, r14
    4670:	7c 01       	movw	r14, r24
    4672:	ff ef       	ldi	r31, 0xFF	; 255
    4674:	ef 1a       	sub	r14, r31
    4676:	ff 0a       	sbc	r15, r31
    4678:	fc 01       	movw	r30, r24
    467a:	40 81       	ld	r20, Z
    467c:	c8 01       	movw	r24, r16
    467e:	03 96       	adiw	r24, 0x03	; 3
    4680:	98 01       	movw	r18, r16
    4682:	2d 5f       	subi	r18, 0xFD	; 253
    4684:	3f 4f       	sbci	r19, 0xFF	; 255
    4686:	f9 01       	movw	r30, r18
    4688:	20 81       	ld	r18, Z
    468a:	24 27       	eor	r18, r20
    468c:	fc 01       	movw	r30, r24
    468e:	20 83       	st	Z, r18
		*(ciphertext+4) ^= *roundkeys++;
    4690:	c7 01       	movw	r24, r14
    4692:	7c 01       	movw	r14, r24
    4694:	ff ef       	ldi	r31, 0xFF	; 255
    4696:	ef 1a       	sub	r14, r31
    4698:	ff 0a       	sbc	r15, r31
    469a:	fc 01       	movw	r30, r24
    469c:	40 81       	ld	r20, Z
    469e:	c8 01       	movw	r24, r16
    46a0:	04 96       	adiw	r24, 0x04	; 4
    46a2:	98 01       	movw	r18, r16
    46a4:	2c 5f       	subi	r18, 0xFC	; 252
    46a6:	3f 4f       	sbci	r19, 0xFF	; 255
    46a8:	f9 01       	movw	r30, r18
    46aa:	20 81       	ld	r18, Z
    46ac:	24 27       	eor	r18, r20
    46ae:	fc 01       	movw	r30, r24
    46b0:	20 83       	st	Z, r18
		*(ciphertext+5) ^= *roundkeys++;
    46b2:	c7 01       	movw	r24, r14
    46b4:	7c 01       	movw	r14, r24
    46b6:	ff ef       	ldi	r31, 0xFF	; 255
    46b8:	ef 1a       	sub	r14, r31
    46ba:	ff 0a       	sbc	r15, r31
    46bc:	fc 01       	movw	r30, r24
    46be:	40 81       	ld	r20, Z
    46c0:	c8 01       	movw	r24, r16
    46c2:	05 96       	adiw	r24, 0x05	; 5
    46c4:	98 01       	movw	r18, r16
    46c6:	2b 5f       	subi	r18, 0xFB	; 251
    46c8:	3f 4f       	sbci	r19, 0xFF	; 255
    46ca:	f9 01       	movw	r30, r18
    46cc:	20 81       	ld	r18, Z
    46ce:	24 27       	eor	r18, r20
    46d0:	fc 01       	movw	r30, r24
    46d2:	20 83       	st	Z, r18
		*(ciphertext+6) ^= *roundkeys++;
    46d4:	c7 01       	movw	r24, r14
    46d6:	7c 01       	movw	r14, r24
    46d8:	ff ef       	ldi	r31, 0xFF	; 255
    46da:	ef 1a       	sub	r14, r31
    46dc:	ff 0a       	sbc	r15, r31
    46de:	fc 01       	movw	r30, r24
    46e0:	40 81       	ld	r20, Z
    46e2:	c8 01       	movw	r24, r16
    46e4:	06 96       	adiw	r24, 0x06	; 6
    46e6:	98 01       	movw	r18, r16
    46e8:	2a 5f       	subi	r18, 0xFA	; 250
    46ea:	3f 4f       	sbci	r19, 0xFF	; 255
    46ec:	f9 01       	movw	r30, r18
    46ee:	20 81       	ld	r18, Z
    46f0:	24 27       	eor	r18, r20
    46f2:	fc 01       	movw	r30, r24
    46f4:	20 83       	st	Z, r18
		*(ciphertext+7) ^= *roundkeys++;
    46f6:	c7 01       	movw	r24, r14
    46f8:	7c 01       	movw	r14, r24
    46fa:	ff ef       	ldi	r31, 0xFF	; 255
    46fc:	ef 1a       	sub	r14, r31
    46fe:	ff 0a       	sbc	r15, r31
    4700:	fc 01       	movw	r30, r24
    4702:	40 81       	ld	r20, Z
    4704:	c8 01       	movw	r24, r16
    4706:	07 96       	adiw	r24, 0x07	; 7
    4708:	98 01       	movw	r18, r16
    470a:	29 5f       	subi	r18, 0xF9	; 249
    470c:	3f 4f       	sbci	r19, 0xFF	; 255
    470e:	f9 01       	movw	r30, r18
    4710:	20 81       	ld	r18, Z
    4712:	24 27       	eor	r18, r20
    4714:	fc 01       	movw	r30, r24
    4716:	20 83       	st	Z, r18
		*(ciphertext+8) ^= *roundkeys++;
    4718:	c7 01       	movw	r24, r14
    471a:	7c 01       	movw	r14, r24
    471c:	ff ef       	ldi	r31, 0xFF	; 255
    471e:	ef 1a       	sub	r14, r31
    4720:	ff 0a       	sbc	r15, r31
    4722:	fc 01       	movw	r30, r24
    4724:	40 81       	ld	r20, Z
    4726:	c8 01       	movw	r24, r16
    4728:	08 96       	adiw	r24, 0x08	; 8
    472a:	98 01       	movw	r18, r16
    472c:	28 5f       	subi	r18, 0xF8	; 248
    472e:	3f 4f       	sbci	r19, 0xFF	; 255
    4730:	f9 01       	movw	r30, r18
    4732:	20 81       	ld	r18, Z
    4734:	24 27       	eor	r18, r20
    4736:	fc 01       	movw	r30, r24
    4738:	20 83       	st	Z, r18
		*(ciphertext+9) ^= *roundkeys++;
    473a:	c7 01       	movw	r24, r14
    473c:	7c 01       	movw	r14, r24
    473e:	ff ef       	ldi	r31, 0xFF	; 255
    4740:	ef 1a       	sub	r14, r31
    4742:	ff 0a       	sbc	r15, r31
    4744:	fc 01       	movw	r30, r24
    4746:	40 81       	ld	r20, Z
    4748:	c8 01       	movw	r24, r16
    474a:	09 96       	adiw	r24, 0x09	; 9
    474c:	98 01       	movw	r18, r16
    474e:	27 5f       	subi	r18, 0xF7	; 247
    4750:	3f 4f       	sbci	r19, 0xFF	; 255
    4752:	f9 01       	movw	r30, r18
    4754:	20 81       	ld	r18, Z
    4756:	24 27       	eor	r18, r20
    4758:	fc 01       	movw	r30, r24
    475a:	20 83       	st	Z, r18
		*(ciphertext+10) ^= *roundkeys++;
    475c:	c7 01       	movw	r24, r14
    475e:	7c 01       	movw	r14, r24
    4760:	ff ef       	ldi	r31, 0xFF	; 255
    4762:	ef 1a       	sub	r14, r31
    4764:	ff 0a       	sbc	r15, r31
    4766:	fc 01       	movw	r30, r24
    4768:	40 81       	ld	r20, Z
    476a:	c8 01       	movw	r24, r16
    476c:	0a 96       	adiw	r24, 0x0a	; 10
    476e:	98 01       	movw	r18, r16
    4770:	26 5f       	subi	r18, 0xF6	; 246
    4772:	3f 4f       	sbci	r19, 0xFF	; 255
    4774:	f9 01       	movw	r30, r18
    4776:	20 81       	ld	r18, Z
    4778:	24 27       	eor	r18, r20
    477a:	fc 01       	movw	r30, r24
    477c:	20 83       	st	Z, r18
		*(ciphertext+11) ^= *roundkeys++;
    477e:	c7 01       	movw	r24, r14
    4780:	7c 01       	movw	r14, r24
    4782:	ff ef       	ldi	r31, 0xFF	; 255
    4784:	ef 1a       	sub	r14, r31
    4786:	ff 0a       	sbc	r15, r31
    4788:	fc 01       	movw	r30, r24
    478a:	40 81       	ld	r20, Z
    478c:	c8 01       	movw	r24, r16
    478e:	0b 96       	adiw	r24, 0x0b	; 11
    4790:	98 01       	movw	r18, r16
    4792:	25 5f       	subi	r18, 0xF5	; 245
    4794:	3f 4f       	sbci	r19, 0xFF	; 255
    4796:	f9 01       	movw	r30, r18
    4798:	20 81       	ld	r18, Z
    479a:	24 27       	eor	r18, r20
    479c:	fc 01       	movw	r30, r24
    479e:	20 83       	st	Z, r18
		*(ciphertext+12) ^= *roundkeys++;
    47a0:	c7 01       	movw	r24, r14
    47a2:	7c 01       	movw	r14, r24
    47a4:	ff ef       	ldi	r31, 0xFF	; 255
    47a6:	ef 1a       	sub	r14, r31
    47a8:	ff 0a       	sbc	r15, r31
    47aa:	fc 01       	movw	r30, r24
    47ac:	40 81       	ld	r20, Z
    47ae:	c8 01       	movw	r24, r16
    47b0:	0c 96       	adiw	r24, 0x0c	; 12
    47b2:	98 01       	movw	r18, r16
    47b4:	24 5f       	subi	r18, 0xF4	; 244
    47b6:	3f 4f       	sbci	r19, 0xFF	; 255
    47b8:	f9 01       	movw	r30, r18
    47ba:	20 81       	ld	r18, Z
    47bc:	24 27       	eor	r18, r20
    47be:	fc 01       	movw	r30, r24
    47c0:	20 83       	st	Z, r18
		*(ciphertext+13) ^= *roundkeys++;
    47c2:	c7 01       	movw	r24, r14
    47c4:	7c 01       	movw	r14, r24
    47c6:	ff ef       	ldi	r31, 0xFF	; 255
    47c8:	ef 1a       	sub	r14, r31
    47ca:	ff 0a       	sbc	r15, r31
    47cc:	fc 01       	movw	r30, r24
    47ce:	40 81       	ld	r20, Z
    47d0:	c8 01       	movw	r24, r16
    47d2:	0d 96       	adiw	r24, 0x0d	; 13
    47d4:	98 01       	movw	r18, r16
    47d6:	23 5f       	subi	r18, 0xF3	; 243
    47d8:	3f 4f       	sbci	r19, 0xFF	; 255
    47da:	f9 01       	movw	r30, r18
    47dc:	20 81       	ld	r18, Z
    47de:	24 27       	eor	r18, r20
    47e0:	fc 01       	movw	r30, r24
    47e2:	20 83       	st	Z, r18
		*(ciphertext+14) ^= *roundkeys++;
    47e4:	c7 01       	movw	r24, r14
    47e6:	7c 01       	movw	r14, r24
    47e8:	ff ef       	ldi	r31, 0xFF	; 255
    47ea:	ef 1a       	sub	r14, r31
    47ec:	ff 0a       	sbc	r15, r31
    47ee:	fc 01       	movw	r30, r24
    47f0:	40 81       	ld	r20, Z
    47f2:	c8 01       	movw	r24, r16
    47f4:	0e 96       	adiw	r24, 0x0e	; 14
    47f6:	98 01       	movw	r18, r16
    47f8:	22 5f       	subi	r18, 0xF2	; 242
    47fa:	3f 4f       	sbci	r19, 0xFF	; 255
    47fc:	f9 01       	movw	r30, r18
    47fe:	20 81       	ld	r18, Z
    4800:	24 27       	eor	r18, r20
    4802:	fc 01       	movw	r30, r24
    4804:	20 83       	st	Z, r18
		*(ciphertext+15) ^= *roundkeys++;
    4806:	c7 01       	movw	r24, r14
    4808:	7c 01       	movw	r14, r24
    480a:	ff ef       	ldi	r31, 0xFF	; 255
    480c:	ef 1a       	sub	r14, r31
    480e:	ff 0a       	sbc	r15, r31
    4810:	fc 01       	movw	r30, r24
    4812:	40 81       	ld	r20, Z
    4814:	c8 01       	movw	r24, r16
    4816:	0f 96       	adiw	r24, 0x0f	; 15
    4818:	98 01       	movw	r18, r16
    481a:	21 5f       	subi	r18, 0xF1	; 241
    481c:	3f 4f       	sbci	r19, 0xFF	; 255
    481e:	f9 01       	movw	r30, r18
    4820:	20 81       	ld	r18, Z
    4822:	24 27       	eor	r18, r20
    4824:	fc 01       	movw	r30, r24
    4826:	20 83       	st	Z, r18
    {
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
    }
	*(ciphertext+i) = SBOX[*(ciphertext+i)];
	*/
	*(ciphertext+0) = SBOX[*(ciphertext+0)];
    4828:	f8 01       	movw	r30, r16
    482a:	80 81       	ld	r24, Z
    482c:	88 2f       	mov	r24, r24
    482e:	90 e0       	ldi	r25, 0x00	; 0
    4830:	80 50       	subi	r24, 0x00	; 0
    4832:	9e 4f       	sbci	r25, 0xFE	; 254
    4834:	fc 01       	movw	r30, r24
    4836:	80 81       	ld	r24, Z
    4838:	f8 01       	movw	r30, r16
    483a:	80 83       	st	Z, r24
	*(ciphertext+1) = SBOX[*(ciphertext+1)];
    483c:	c8 01       	movw	r24, r16
    483e:	01 96       	adiw	r24, 0x01	; 1
    4840:	98 01       	movw	r18, r16
    4842:	2f 5f       	subi	r18, 0xFF	; 255
    4844:	3f 4f       	sbci	r19, 0xFF	; 255
    4846:	f9 01       	movw	r30, r18
    4848:	20 81       	ld	r18, Z
    484a:	22 2f       	mov	r18, r18
    484c:	30 e0       	ldi	r19, 0x00	; 0
    484e:	20 50       	subi	r18, 0x00	; 0
    4850:	3e 4f       	sbci	r19, 0xFE	; 254
    4852:	f9 01       	movw	r30, r18
    4854:	20 81       	ld	r18, Z
    4856:	fc 01       	movw	r30, r24
    4858:	20 83       	st	Z, r18
	*(ciphertext+2) = SBOX[*(ciphertext+2)];
    485a:	c8 01       	movw	r24, r16
    485c:	02 96       	adiw	r24, 0x02	; 2
    485e:	98 01       	movw	r18, r16
    4860:	2e 5f       	subi	r18, 0xFE	; 254
    4862:	3f 4f       	sbci	r19, 0xFF	; 255
    4864:	f9 01       	movw	r30, r18
    4866:	20 81       	ld	r18, Z
    4868:	22 2f       	mov	r18, r18
    486a:	30 e0       	ldi	r19, 0x00	; 0
    486c:	20 50       	subi	r18, 0x00	; 0
    486e:	3e 4f       	sbci	r19, 0xFE	; 254
    4870:	f9 01       	movw	r30, r18
    4872:	20 81       	ld	r18, Z
    4874:	fc 01       	movw	r30, r24
    4876:	20 83       	st	Z, r18
	*(ciphertext+3) = SBOX[*(ciphertext+3)];
    4878:	c8 01       	movw	r24, r16
    487a:	03 96       	adiw	r24, 0x03	; 3
    487c:	98 01       	movw	r18, r16
    487e:	2d 5f       	subi	r18, 0xFD	; 253
    4880:	3f 4f       	sbci	r19, 0xFF	; 255
    4882:	f9 01       	movw	r30, r18
    4884:	20 81       	ld	r18, Z
    4886:	22 2f       	mov	r18, r18
    4888:	30 e0       	ldi	r19, 0x00	; 0
    488a:	20 50       	subi	r18, 0x00	; 0
    488c:	3e 4f       	sbci	r19, 0xFE	; 254
    488e:	f9 01       	movw	r30, r18
    4890:	20 81       	ld	r18, Z
    4892:	fc 01       	movw	r30, r24
    4894:	20 83       	st	Z, r18
	*(ciphertext+4) = SBOX[*(ciphertext+4)];
    4896:	c8 01       	movw	r24, r16
    4898:	04 96       	adiw	r24, 0x04	; 4
    489a:	98 01       	movw	r18, r16
    489c:	2c 5f       	subi	r18, 0xFC	; 252
    489e:	3f 4f       	sbci	r19, 0xFF	; 255
    48a0:	f9 01       	movw	r30, r18
    48a2:	20 81       	ld	r18, Z
    48a4:	22 2f       	mov	r18, r18
    48a6:	30 e0       	ldi	r19, 0x00	; 0
    48a8:	20 50       	subi	r18, 0x00	; 0
    48aa:	3e 4f       	sbci	r19, 0xFE	; 254
    48ac:	f9 01       	movw	r30, r18
    48ae:	20 81       	ld	r18, Z
    48b0:	fc 01       	movw	r30, r24
    48b2:	20 83       	st	Z, r18
	*(ciphertext+5) = SBOX[*(ciphertext+5)];
    48b4:	c8 01       	movw	r24, r16
    48b6:	05 96       	adiw	r24, 0x05	; 5
    48b8:	98 01       	movw	r18, r16
    48ba:	2b 5f       	subi	r18, 0xFB	; 251
    48bc:	3f 4f       	sbci	r19, 0xFF	; 255
    48be:	f9 01       	movw	r30, r18
    48c0:	20 81       	ld	r18, Z
    48c2:	22 2f       	mov	r18, r18
    48c4:	30 e0       	ldi	r19, 0x00	; 0
    48c6:	20 50       	subi	r18, 0x00	; 0
    48c8:	3e 4f       	sbci	r19, 0xFE	; 254
    48ca:	f9 01       	movw	r30, r18
    48cc:	20 81       	ld	r18, Z
    48ce:	fc 01       	movw	r30, r24
    48d0:	20 83       	st	Z, r18
	*(ciphertext+6) = SBOX[*(ciphertext+6)];
    48d2:	c8 01       	movw	r24, r16
    48d4:	06 96       	adiw	r24, 0x06	; 6
    48d6:	98 01       	movw	r18, r16
    48d8:	2a 5f       	subi	r18, 0xFA	; 250
    48da:	3f 4f       	sbci	r19, 0xFF	; 255
    48dc:	f9 01       	movw	r30, r18
    48de:	20 81       	ld	r18, Z
    48e0:	22 2f       	mov	r18, r18
    48e2:	30 e0       	ldi	r19, 0x00	; 0
    48e4:	20 50       	subi	r18, 0x00	; 0
    48e6:	3e 4f       	sbci	r19, 0xFE	; 254
    48e8:	f9 01       	movw	r30, r18
    48ea:	20 81       	ld	r18, Z
    48ec:	fc 01       	movw	r30, r24
    48ee:	20 83       	st	Z, r18
	*(ciphertext+7) = SBOX[*(ciphertext+7)];
    48f0:	c8 01       	movw	r24, r16
    48f2:	07 96       	adiw	r24, 0x07	; 7
    48f4:	98 01       	movw	r18, r16
    48f6:	29 5f       	subi	r18, 0xF9	; 249
    48f8:	3f 4f       	sbci	r19, 0xFF	; 255
    48fa:	f9 01       	movw	r30, r18
    48fc:	20 81       	ld	r18, Z
    48fe:	22 2f       	mov	r18, r18
    4900:	30 e0       	ldi	r19, 0x00	; 0
    4902:	20 50       	subi	r18, 0x00	; 0
    4904:	3e 4f       	sbci	r19, 0xFE	; 254
    4906:	f9 01       	movw	r30, r18
    4908:	20 81       	ld	r18, Z
    490a:	fc 01       	movw	r30, r24
    490c:	20 83       	st	Z, r18
	*(ciphertext+8) = SBOX[*(ciphertext+8)];
    490e:	c8 01       	movw	r24, r16
    4910:	08 96       	adiw	r24, 0x08	; 8
    4912:	98 01       	movw	r18, r16
    4914:	28 5f       	subi	r18, 0xF8	; 248
    4916:	3f 4f       	sbci	r19, 0xFF	; 255
    4918:	f9 01       	movw	r30, r18
    491a:	20 81       	ld	r18, Z
    491c:	22 2f       	mov	r18, r18
    491e:	30 e0       	ldi	r19, 0x00	; 0
    4920:	20 50       	subi	r18, 0x00	; 0
    4922:	3e 4f       	sbci	r19, 0xFE	; 254
    4924:	f9 01       	movw	r30, r18
    4926:	20 81       	ld	r18, Z
    4928:	fc 01       	movw	r30, r24
    492a:	20 83       	st	Z, r18
	*(ciphertext+9) = SBOX[*(ciphertext+9)];
    492c:	c8 01       	movw	r24, r16
    492e:	09 96       	adiw	r24, 0x09	; 9
    4930:	98 01       	movw	r18, r16
    4932:	27 5f       	subi	r18, 0xF7	; 247
    4934:	3f 4f       	sbci	r19, 0xFF	; 255
    4936:	f9 01       	movw	r30, r18
    4938:	20 81       	ld	r18, Z
    493a:	22 2f       	mov	r18, r18
    493c:	30 e0       	ldi	r19, 0x00	; 0
    493e:	20 50       	subi	r18, 0x00	; 0
    4940:	3e 4f       	sbci	r19, 0xFE	; 254
    4942:	f9 01       	movw	r30, r18
    4944:	20 81       	ld	r18, Z
    4946:	fc 01       	movw	r30, r24
    4948:	20 83       	st	Z, r18
	*(ciphertext+10) = SBOX[*(ciphertext+10)];
    494a:	c8 01       	movw	r24, r16
    494c:	0a 96       	adiw	r24, 0x0a	; 10
    494e:	98 01       	movw	r18, r16
    4950:	26 5f       	subi	r18, 0xF6	; 246
    4952:	3f 4f       	sbci	r19, 0xFF	; 255
    4954:	f9 01       	movw	r30, r18
    4956:	20 81       	ld	r18, Z
    4958:	22 2f       	mov	r18, r18
    495a:	30 e0       	ldi	r19, 0x00	; 0
    495c:	20 50       	subi	r18, 0x00	; 0
    495e:	3e 4f       	sbci	r19, 0xFE	; 254
    4960:	f9 01       	movw	r30, r18
    4962:	20 81       	ld	r18, Z
    4964:	fc 01       	movw	r30, r24
    4966:	20 83       	st	Z, r18
	*(ciphertext+11) = SBOX[*(ciphertext+11)];
    4968:	c8 01       	movw	r24, r16
    496a:	0b 96       	adiw	r24, 0x0b	; 11
    496c:	98 01       	movw	r18, r16
    496e:	25 5f       	subi	r18, 0xF5	; 245
    4970:	3f 4f       	sbci	r19, 0xFF	; 255
    4972:	f9 01       	movw	r30, r18
    4974:	20 81       	ld	r18, Z
    4976:	22 2f       	mov	r18, r18
    4978:	30 e0       	ldi	r19, 0x00	; 0
    497a:	20 50       	subi	r18, 0x00	; 0
    497c:	3e 4f       	sbci	r19, 0xFE	; 254
    497e:	f9 01       	movw	r30, r18
    4980:	20 81       	ld	r18, Z
    4982:	fc 01       	movw	r30, r24
    4984:	20 83       	st	Z, r18
	*(ciphertext+12) = SBOX[*(ciphertext+12)];
    4986:	c8 01       	movw	r24, r16
    4988:	0c 96       	adiw	r24, 0x0c	; 12
    498a:	98 01       	movw	r18, r16
    498c:	24 5f       	subi	r18, 0xF4	; 244
    498e:	3f 4f       	sbci	r19, 0xFF	; 255
    4990:	f9 01       	movw	r30, r18
    4992:	20 81       	ld	r18, Z
    4994:	22 2f       	mov	r18, r18
    4996:	30 e0       	ldi	r19, 0x00	; 0
    4998:	20 50       	subi	r18, 0x00	; 0
    499a:	3e 4f       	sbci	r19, 0xFE	; 254
    499c:	f9 01       	movw	r30, r18
    499e:	20 81       	ld	r18, Z
    49a0:	fc 01       	movw	r30, r24
    49a2:	20 83       	st	Z, r18
	*(ciphertext+13) = SBOX[*(ciphertext+13)];
    49a4:	c8 01       	movw	r24, r16
    49a6:	0d 96       	adiw	r24, 0x0d	; 13
    49a8:	98 01       	movw	r18, r16
    49aa:	23 5f       	subi	r18, 0xF3	; 243
    49ac:	3f 4f       	sbci	r19, 0xFF	; 255
    49ae:	f9 01       	movw	r30, r18
    49b0:	20 81       	ld	r18, Z
    49b2:	22 2f       	mov	r18, r18
    49b4:	30 e0       	ldi	r19, 0x00	; 0
    49b6:	20 50       	subi	r18, 0x00	; 0
    49b8:	3e 4f       	sbci	r19, 0xFE	; 254
    49ba:	f9 01       	movw	r30, r18
    49bc:	20 81       	ld	r18, Z
    49be:	fc 01       	movw	r30, r24
    49c0:	20 83       	st	Z, r18
	*(ciphertext+14) = SBOX[*(ciphertext+14)];
    49c2:	c8 01       	movw	r24, r16
    49c4:	0e 96       	adiw	r24, 0x0e	; 14
    49c6:	98 01       	movw	r18, r16
    49c8:	22 5f       	subi	r18, 0xF2	; 242
    49ca:	3f 4f       	sbci	r19, 0xFF	; 255
    49cc:	f9 01       	movw	r30, r18
    49ce:	20 81       	ld	r18, Z
    49d0:	22 2f       	mov	r18, r18
    49d2:	30 e0       	ldi	r19, 0x00	; 0
    49d4:	20 50       	subi	r18, 0x00	; 0
    49d6:	3e 4f       	sbci	r19, 0xFE	; 254
    49d8:	f9 01       	movw	r30, r18
    49da:	20 81       	ld	r18, Z
    49dc:	fc 01       	movw	r30, r24
    49de:	20 83       	st	Z, r18
	*(ciphertext+15) = SBOX[*(ciphertext+15)];
    49e0:	c8 01       	movw	r24, r16
    49e2:	0f 96       	adiw	r24, 0x0f	; 15
    49e4:	98 01       	movw	r18, r16
    49e6:	21 5f       	subi	r18, 0xF1	; 241
    49e8:	3f 4f       	sbci	r19, 0xFF	; 255
    49ea:	f9 01       	movw	r30, r18
    49ec:	20 81       	ld	r18, Z
    49ee:	22 2f       	mov	r18, r18
    49f0:	30 e0       	ldi	r19, 0x00	; 0
    49f2:	20 50       	subi	r18, 0x00	; 0
    49f4:	3e 4f       	sbci	r19, 0xFE	; 254
    49f6:	f9 01       	movw	r30, r18
    49f8:	20 81       	ld	r18, Z
    49fa:	fc 01       	movw	r30, r24
    49fc:	20 83       	st	Z, r18
	
    shift_rows(ciphertext);
    49fe:	c8 01       	movw	r24, r16
    4a00:	0e 94 18 09 	call	0x1230	; 0x1230 <shift_rows>
    {
        *(ciphertext+i) ^= *roundkeys++;
    }
	*(ciphertext+i) ^= *roundkeys++;
	*/
	*(ciphertext+0) ^= *roundkeys++;
    4a04:	c7 01       	movw	r24, r14
    4a06:	7c 01       	movw	r14, r24
    4a08:	ff ef       	ldi	r31, 0xFF	; 255
    4a0a:	ef 1a       	sub	r14, r31
    4a0c:	ff 0a       	sbc	r15, r31
    4a0e:	fc 01       	movw	r30, r24
    4a10:	80 81       	ld	r24, Z
    4a12:	f8 01       	movw	r30, r16
    4a14:	90 81       	ld	r25, Z
    4a16:	89 27       	eor	r24, r25
    4a18:	f8 01       	movw	r30, r16
    4a1a:	80 83       	st	Z, r24
	*(ciphertext+1) ^= *roundkeys++;
    4a1c:	c7 01       	movw	r24, r14
    4a1e:	7c 01       	movw	r14, r24
    4a20:	ff ef       	ldi	r31, 0xFF	; 255
    4a22:	ef 1a       	sub	r14, r31
    4a24:	ff 0a       	sbc	r15, r31
    4a26:	fc 01       	movw	r30, r24
    4a28:	40 81       	ld	r20, Z
    4a2a:	c8 01       	movw	r24, r16
    4a2c:	01 96       	adiw	r24, 0x01	; 1
    4a2e:	98 01       	movw	r18, r16
    4a30:	2f 5f       	subi	r18, 0xFF	; 255
    4a32:	3f 4f       	sbci	r19, 0xFF	; 255
    4a34:	f9 01       	movw	r30, r18
    4a36:	20 81       	ld	r18, Z
    4a38:	24 27       	eor	r18, r20
    4a3a:	fc 01       	movw	r30, r24
    4a3c:	20 83       	st	Z, r18
	*(ciphertext+2) ^= *roundkeys++;
    4a3e:	c7 01       	movw	r24, r14
    4a40:	7c 01       	movw	r14, r24
    4a42:	ff ef       	ldi	r31, 0xFF	; 255
    4a44:	ef 1a       	sub	r14, r31
    4a46:	ff 0a       	sbc	r15, r31
    4a48:	fc 01       	movw	r30, r24
    4a4a:	40 81       	ld	r20, Z
    4a4c:	c8 01       	movw	r24, r16
    4a4e:	02 96       	adiw	r24, 0x02	; 2
    4a50:	98 01       	movw	r18, r16
    4a52:	2e 5f       	subi	r18, 0xFE	; 254
    4a54:	3f 4f       	sbci	r19, 0xFF	; 255
    4a56:	f9 01       	movw	r30, r18
    4a58:	20 81       	ld	r18, Z
    4a5a:	24 27       	eor	r18, r20
    4a5c:	fc 01       	movw	r30, r24
    4a5e:	20 83       	st	Z, r18
	*(ciphertext+3) ^= *roundkeys++;
    4a60:	c7 01       	movw	r24, r14
    4a62:	7c 01       	movw	r14, r24
    4a64:	ff ef       	ldi	r31, 0xFF	; 255
    4a66:	ef 1a       	sub	r14, r31
    4a68:	ff 0a       	sbc	r15, r31
    4a6a:	fc 01       	movw	r30, r24
    4a6c:	40 81       	ld	r20, Z
    4a6e:	c8 01       	movw	r24, r16
    4a70:	03 96       	adiw	r24, 0x03	; 3
    4a72:	98 01       	movw	r18, r16
    4a74:	2d 5f       	subi	r18, 0xFD	; 253
    4a76:	3f 4f       	sbci	r19, 0xFF	; 255
    4a78:	f9 01       	movw	r30, r18
    4a7a:	20 81       	ld	r18, Z
    4a7c:	24 27       	eor	r18, r20
    4a7e:	fc 01       	movw	r30, r24
    4a80:	20 83       	st	Z, r18
	*(ciphertext+4) ^= *roundkeys++;
    4a82:	c7 01       	movw	r24, r14
    4a84:	7c 01       	movw	r14, r24
    4a86:	ff ef       	ldi	r31, 0xFF	; 255
    4a88:	ef 1a       	sub	r14, r31
    4a8a:	ff 0a       	sbc	r15, r31
    4a8c:	fc 01       	movw	r30, r24
    4a8e:	40 81       	ld	r20, Z
    4a90:	c8 01       	movw	r24, r16
    4a92:	04 96       	adiw	r24, 0x04	; 4
    4a94:	98 01       	movw	r18, r16
    4a96:	2c 5f       	subi	r18, 0xFC	; 252
    4a98:	3f 4f       	sbci	r19, 0xFF	; 255
    4a9a:	f9 01       	movw	r30, r18
    4a9c:	20 81       	ld	r18, Z
    4a9e:	24 27       	eor	r18, r20
    4aa0:	fc 01       	movw	r30, r24
    4aa2:	20 83       	st	Z, r18
	*(ciphertext+5) ^= *roundkeys++;
    4aa4:	c7 01       	movw	r24, r14
    4aa6:	7c 01       	movw	r14, r24
    4aa8:	ff ef       	ldi	r31, 0xFF	; 255
    4aaa:	ef 1a       	sub	r14, r31
    4aac:	ff 0a       	sbc	r15, r31
    4aae:	fc 01       	movw	r30, r24
    4ab0:	40 81       	ld	r20, Z
    4ab2:	c8 01       	movw	r24, r16
    4ab4:	05 96       	adiw	r24, 0x05	; 5
    4ab6:	98 01       	movw	r18, r16
    4ab8:	2b 5f       	subi	r18, 0xFB	; 251
    4aba:	3f 4f       	sbci	r19, 0xFF	; 255
    4abc:	f9 01       	movw	r30, r18
    4abe:	20 81       	ld	r18, Z
    4ac0:	24 27       	eor	r18, r20
    4ac2:	fc 01       	movw	r30, r24
    4ac4:	20 83       	st	Z, r18
	*(ciphertext+6) ^= *roundkeys++;
    4ac6:	c7 01       	movw	r24, r14
    4ac8:	7c 01       	movw	r14, r24
    4aca:	ff ef       	ldi	r31, 0xFF	; 255
    4acc:	ef 1a       	sub	r14, r31
    4ace:	ff 0a       	sbc	r15, r31
    4ad0:	fc 01       	movw	r30, r24
    4ad2:	40 81       	ld	r20, Z
    4ad4:	c8 01       	movw	r24, r16
    4ad6:	06 96       	adiw	r24, 0x06	; 6
    4ad8:	98 01       	movw	r18, r16
    4ada:	2a 5f       	subi	r18, 0xFA	; 250
    4adc:	3f 4f       	sbci	r19, 0xFF	; 255
    4ade:	f9 01       	movw	r30, r18
    4ae0:	20 81       	ld	r18, Z
    4ae2:	24 27       	eor	r18, r20
    4ae4:	fc 01       	movw	r30, r24
    4ae6:	20 83       	st	Z, r18
	*(ciphertext+7) ^= *roundkeys++;
    4ae8:	c7 01       	movw	r24, r14
    4aea:	7c 01       	movw	r14, r24
    4aec:	ff ef       	ldi	r31, 0xFF	; 255
    4aee:	ef 1a       	sub	r14, r31
    4af0:	ff 0a       	sbc	r15, r31
    4af2:	fc 01       	movw	r30, r24
    4af4:	40 81       	ld	r20, Z
    4af6:	c8 01       	movw	r24, r16
    4af8:	07 96       	adiw	r24, 0x07	; 7
    4afa:	98 01       	movw	r18, r16
    4afc:	29 5f       	subi	r18, 0xF9	; 249
    4afe:	3f 4f       	sbci	r19, 0xFF	; 255
    4b00:	f9 01       	movw	r30, r18
    4b02:	20 81       	ld	r18, Z
    4b04:	24 27       	eor	r18, r20
    4b06:	fc 01       	movw	r30, r24
    4b08:	20 83       	st	Z, r18
	*(ciphertext+8) ^= *roundkeys++;
    4b0a:	c7 01       	movw	r24, r14
    4b0c:	7c 01       	movw	r14, r24
    4b0e:	ff ef       	ldi	r31, 0xFF	; 255
    4b10:	ef 1a       	sub	r14, r31
    4b12:	ff 0a       	sbc	r15, r31
    4b14:	fc 01       	movw	r30, r24
    4b16:	40 81       	ld	r20, Z
    4b18:	c8 01       	movw	r24, r16
    4b1a:	08 96       	adiw	r24, 0x08	; 8
    4b1c:	98 01       	movw	r18, r16
    4b1e:	28 5f       	subi	r18, 0xF8	; 248
    4b20:	3f 4f       	sbci	r19, 0xFF	; 255
    4b22:	f9 01       	movw	r30, r18
    4b24:	20 81       	ld	r18, Z
    4b26:	24 27       	eor	r18, r20
    4b28:	fc 01       	movw	r30, r24
    4b2a:	20 83       	st	Z, r18
	*(ciphertext+9) ^= *roundkeys++;
    4b2c:	c7 01       	movw	r24, r14
    4b2e:	7c 01       	movw	r14, r24
    4b30:	ff ef       	ldi	r31, 0xFF	; 255
    4b32:	ef 1a       	sub	r14, r31
    4b34:	ff 0a       	sbc	r15, r31
    4b36:	fc 01       	movw	r30, r24
    4b38:	40 81       	ld	r20, Z
    4b3a:	c8 01       	movw	r24, r16
    4b3c:	09 96       	adiw	r24, 0x09	; 9
    4b3e:	98 01       	movw	r18, r16
    4b40:	27 5f       	subi	r18, 0xF7	; 247
    4b42:	3f 4f       	sbci	r19, 0xFF	; 255
    4b44:	f9 01       	movw	r30, r18
    4b46:	20 81       	ld	r18, Z
    4b48:	24 27       	eor	r18, r20
    4b4a:	fc 01       	movw	r30, r24
    4b4c:	20 83       	st	Z, r18
	*(ciphertext+10) ^= *roundkeys++;
    4b4e:	c7 01       	movw	r24, r14
    4b50:	7c 01       	movw	r14, r24
    4b52:	ff ef       	ldi	r31, 0xFF	; 255
    4b54:	ef 1a       	sub	r14, r31
    4b56:	ff 0a       	sbc	r15, r31
    4b58:	fc 01       	movw	r30, r24
    4b5a:	40 81       	ld	r20, Z
    4b5c:	c8 01       	movw	r24, r16
    4b5e:	0a 96       	adiw	r24, 0x0a	; 10
    4b60:	98 01       	movw	r18, r16
    4b62:	26 5f       	subi	r18, 0xF6	; 246
    4b64:	3f 4f       	sbci	r19, 0xFF	; 255
    4b66:	f9 01       	movw	r30, r18
    4b68:	20 81       	ld	r18, Z
    4b6a:	24 27       	eor	r18, r20
    4b6c:	fc 01       	movw	r30, r24
    4b6e:	20 83       	st	Z, r18
	*(ciphertext+11) ^= *roundkeys++;
    4b70:	c7 01       	movw	r24, r14
    4b72:	7c 01       	movw	r14, r24
    4b74:	ff ef       	ldi	r31, 0xFF	; 255
    4b76:	ef 1a       	sub	r14, r31
    4b78:	ff 0a       	sbc	r15, r31
    4b7a:	fc 01       	movw	r30, r24
    4b7c:	40 81       	ld	r20, Z
    4b7e:	c8 01       	movw	r24, r16
    4b80:	0b 96       	adiw	r24, 0x0b	; 11
    4b82:	98 01       	movw	r18, r16
    4b84:	25 5f       	subi	r18, 0xF5	; 245
    4b86:	3f 4f       	sbci	r19, 0xFF	; 255
    4b88:	f9 01       	movw	r30, r18
    4b8a:	20 81       	ld	r18, Z
    4b8c:	24 27       	eor	r18, r20
    4b8e:	fc 01       	movw	r30, r24
    4b90:	20 83       	st	Z, r18
	*(ciphertext+12) ^= *roundkeys++;
    4b92:	c7 01       	movw	r24, r14
    4b94:	7c 01       	movw	r14, r24
    4b96:	ff ef       	ldi	r31, 0xFF	; 255
    4b98:	ef 1a       	sub	r14, r31
    4b9a:	ff 0a       	sbc	r15, r31
    4b9c:	fc 01       	movw	r30, r24
    4b9e:	40 81       	ld	r20, Z
    4ba0:	c8 01       	movw	r24, r16
    4ba2:	0c 96       	adiw	r24, 0x0c	; 12
    4ba4:	98 01       	movw	r18, r16
    4ba6:	24 5f       	subi	r18, 0xF4	; 244
    4ba8:	3f 4f       	sbci	r19, 0xFF	; 255
    4baa:	f9 01       	movw	r30, r18
    4bac:	20 81       	ld	r18, Z
    4bae:	24 27       	eor	r18, r20
    4bb0:	fc 01       	movw	r30, r24
    4bb2:	20 83       	st	Z, r18
	*(ciphertext+13) ^= *roundkeys++;
    4bb4:	c7 01       	movw	r24, r14
    4bb6:	7c 01       	movw	r14, r24
    4bb8:	ff ef       	ldi	r31, 0xFF	; 255
    4bba:	ef 1a       	sub	r14, r31
    4bbc:	ff 0a       	sbc	r15, r31
    4bbe:	fc 01       	movw	r30, r24
    4bc0:	40 81       	ld	r20, Z
    4bc2:	c8 01       	movw	r24, r16
    4bc4:	0d 96       	adiw	r24, 0x0d	; 13
    4bc6:	98 01       	movw	r18, r16
    4bc8:	23 5f       	subi	r18, 0xF3	; 243
    4bca:	3f 4f       	sbci	r19, 0xFF	; 255
    4bcc:	f9 01       	movw	r30, r18
    4bce:	20 81       	ld	r18, Z
    4bd0:	24 27       	eor	r18, r20
    4bd2:	fc 01       	movw	r30, r24
    4bd4:	20 83       	st	Z, r18
	*(ciphertext+14) ^= *roundkeys++;
    4bd6:	c7 01       	movw	r24, r14
    4bd8:	7c 01       	movw	r14, r24
    4bda:	ff ef       	ldi	r31, 0xFF	; 255
    4bdc:	ef 1a       	sub	r14, r31
    4bde:	ff 0a       	sbc	r15, r31
    4be0:	fc 01       	movw	r30, r24
    4be2:	40 81       	ld	r20, Z
    4be4:	c8 01       	movw	r24, r16
    4be6:	0e 96       	adiw	r24, 0x0e	; 14
    4be8:	98 01       	movw	r18, r16
    4bea:	22 5f       	subi	r18, 0xF2	; 242
    4bec:	3f 4f       	sbci	r19, 0xFF	; 255
    4bee:	f9 01       	movw	r30, r18
    4bf0:	20 81       	ld	r18, Z
    4bf2:	24 27       	eor	r18, r20
    4bf4:	fc 01       	movw	r30, r24
    4bf6:	20 83       	st	Z, r18
	*(ciphertext+15) ^= *roundkeys++;
    4bf8:	c7 01       	movw	r24, r14
    4bfa:	7c 01       	movw	r14, r24
    4bfc:	ff ef       	ldi	r31, 0xFF	; 255
    4bfe:	ef 1a       	sub	r14, r31
    4c00:	ff 0a       	sbc	r15, r31
    4c02:	fc 01       	movw	r30, r24
    4c04:	40 81       	ld	r20, Z
    4c06:	c8 01       	movw	r24, r16
    4c08:	0f 96       	adiw	r24, 0x0f	; 15
    4c0a:	98 01       	movw	r18, r16
    4c0c:	21 5f       	subi	r18, 0xF1	; 241
    4c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    4c10:	f9 01       	movw	r30, r18
    4c12:	20 81       	ld	r18, Z
    4c14:	24 27       	eor	r18, r20
    4c16:	fc 01       	movw	r30, r24
    4c18:	20 83       	st	Z, r18
}
    4c1a:	00 00       	nop
    4c1c:	61 96       	adiw	r28, 0x11	; 17
    4c1e:	0f b6       	in	r0, 0x3f	; 63
    4c20:	f8 94       	cli
    4c22:	de bf       	out	0x3e, r29	; 62
    4c24:	0f be       	out	0x3f, r0	; 63
    4c26:	cd bf       	out	0x3d, r28	; 61
    4c28:	df 91       	pop	r29
    4c2a:	cf 91       	pop	r28
    4c2c:	1f 91       	pop	r17
    4c2e:	0f 91       	pop	r16
    4c30:	ff 90       	pop	r15
    4c32:	ef 90       	pop	r14
    4c34:	df 90       	pop	r13
    4c36:	cf 90       	pop	r12
    4c38:	08 95       	ret

00004c3a <aes_key_schedule_128>:
 * round constants
 */
static uint8_t RC[10] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};

void aes_key_schedule_128( register uint8_t *roundkeys)
{
    4c3a:	9f 92       	push	r9
    4c3c:	af 92       	push	r10
    4c3e:	bf 92       	push	r11
    4c40:	cf 92       	push	r12
    4c42:	df 92       	push	r13
    4c44:	ef 92       	push	r14
    4c46:	ff 92       	push	r15
    4c48:	0f 93       	push	r16
    4c4a:	1f 93       	push	r17
    4c4c:	cf 93       	push	r28
    4c4e:	df 93       	push	r29
    4c50:	cd b7       	in	r28, 0x3d	; 61
    4c52:	de b7       	in	r29, 0x3e	; 62
    /*
	for (i = 0; i < 16; ++i) {
        *roundkeys++ = key[i];
    }
	*/
	*roundkeys++ = key[0];
    4c54:	9c 01       	movw	r18, r24
    4c56:	c9 01       	movw	r24, r18
    4c58:	01 96       	adiw	r24, 0x01	; 1
    4c5a:	40 91 2a 03 	lds	r20, 0x032A	; 0x80032a <key>
    4c5e:	f9 01       	movw	r30, r18
    4c60:	40 83       	st	Z, r20
	*roundkeys++ = key[1];
    4c62:	9c 01       	movw	r18, r24
    4c64:	c9 01       	movw	r24, r18
    4c66:	01 96       	adiw	r24, 0x01	; 1
    4c68:	40 91 2b 03 	lds	r20, 0x032B	; 0x80032b <key+0x1>
    4c6c:	f9 01       	movw	r30, r18
    4c6e:	40 83       	st	Z, r20
	*roundkeys++ = key[2];
    4c70:	9c 01       	movw	r18, r24
    4c72:	c9 01       	movw	r24, r18
    4c74:	01 96       	adiw	r24, 0x01	; 1
    4c76:	40 91 2c 03 	lds	r20, 0x032C	; 0x80032c <key+0x2>
    4c7a:	f9 01       	movw	r30, r18
    4c7c:	40 83       	st	Z, r20
	*roundkeys++ = key[3];
    4c7e:	9c 01       	movw	r18, r24
    4c80:	c9 01       	movw	r24, r18
    4c82:	01 96       	adiw	r24, 0x01	; 1
    4c84:	40 91 2d 03 	lds	r20, 0x032D	; 0x80032d <key+0x3>
    4c88:	f9 01       	movw	r30, r18
    4c8a:	40 83       	st	Z, r20
	*roundkeys++ = key[4];
    4c8c:	9c 01       	movw	r18, r24
    4c8e:	c9 01       	movw	r24, r18
    4c90:	01 96       	adiw	r24, 0x01	; 1
    4c92:	40 91 2e 03 	lds	r20, 0x032E	; 0x80032e <key+0x4>
    4c96:	f9 01       	movw	r30, r18
    4c98:	40 83       	st	Z, r20
	*roundkeys++ = key[5];
    4c9a:	9c 01       	movw	r18, r24
    4c9c:	c9 01       	movw	r24, r18
    4c9e:	01 96       	adiw	r24, 0x01	; 1
    4ca0:	40 91 2f 03 	lds	r20, 0x032F	; 0x80032f <key+0x5>
    4ca4:	f9 01       	movw	r30, r18
    4ca6:	40 83       	st	Z, r20
	*roundkeys++ = key[6];
    4ca8:	9c 01       	movw	r18, r24
    4caa:	c9 01       	movw	r24, r18
    4cac:	01 96       	adiw	r24, 0x01	; 1
    4cae:	40 91 30 03 	lds	r20, 0x0330	; 0x800330 <key+0x6>
    4cb2:	f9 01       	movw	r30, r18
    4cb4:	40 83       	st	Z, r20
	*roundkeys++ = key[7];
    4cb6:	9c 01       	movw	r18, r24
    4cb8:	c9 01       	movw	r24, r18
    4cba:	01 96       	adiw	r24, 0x01	; 1
    4cbc:	40 91 31 03 	lds	r20, 0x0331	; 0x800331 <key+0x7>
    4cc0:	f9 01       	movw	r30, r18
    4cc2:	40 83       	st	Z, r20
	*roundkeys++ = key[8];
    4cc4:	9c 01       	movw	r18, r24
    4cc6:	c9 01       	movw	r24, r18
    4cc8:	01 96       	adiw	r24, 0x01	; 1
    4cca:	40 91 32 03 	lds	r20, 0x0332	; 0x800332 <key+0x8>
    4cce:	f9 01       	movw	r30, r18
    4cd0:	40 83       	st	Z, r20
	*roundkeys++ = key[9];
    4cd2:	9c 01       	movw	r18, r24
    4cd4:	c9 01       	movw	r24, r18
    4cd6:	01 96       	adiw	r24, 0x01	; 1
    4cd8:	40 91 33 03 	lds	r20, 0x0333	; 0x800333 <key+0x9>
    4cdc:	f9 01       	movw	r30, r18
    4cde:	40 83       	st	Z, r20
	*roundkeys++ = key[10];
    4ce0:	9c 01       	movw	r18, r24
    4ce2:	c9 01       	movw	r24, r18
    4ce4:	01 96       	adiw	r24, 0x01	; 1
    4ce6:	40 91 34 03 	lds	r20, 0x0334	; 0x800334 <key+0xa>
    4cea:	f9 01       	movw	r30, r18
    4cec:	40 83       	st	Z, r20
	*roundkeys++ = key[11];
    4cee:	9c 01       	movw	r18, r24
    4cf0:	c9 01       	movw	r24, r18
    4cf2:	01 96       	adiw	r24, 0x01	; 1
    4cf4:	40 91 35 03 	lds	r20, 0x0335	; 0x800335 <key+0xb>
    4cf8:	f9 01       	movw	r30, r18
    4cfa:	40 83       	st	Z, r20
	*roundkeys++ = key[12];
    4cfc:	9c 01       	movw	r18, r24
    4cfe:	c9 01       	movw	r24, r18
    4d00:	01 96       	adiw	r24, 0x01	; 1
    4d02:	40 91 36 03 	lds	r20, 0x0336	; 0x800336 <key+0xc>
    4d06:	f9 01       	movw	r30, r18
    4d08:	40 83       	st	Z, r20
	*roundkeys++ = key[13];
    4d0a:	9c 01       	movw	r18, r24
    4d0c:	c9 01       	movw	r24, r18
    4d0e:	01 96       	adiw	r24, 0x01	; 1
    4d10:	40 91 37 03 	lds	r20, 0x0337	; 0x800337 <key+0xd>
    4d14:	f9 01       	movw	r30, r18
    4d16:	40 83       	st	Z, r20
	*roundkeys++ = key[14];
    4d18:	9c 01       	movw	r18, r24
    4d1a:	c9 01       	movw	r24, r18
    4d1c:	01 96       	adiw	r24, 0x01	; 1
    4d1e:	40 91 38 03 	lds	r20, 0x0338	; 0x800338 <key+0xe>
    4d22:	f9 01       	movw	r30, r18
    4d24:	40 83       	st	Z, r20
	*roundkeys++ = key[15];
    4d26:	9c 01       	movw	r18, r24
    4d28:	c9 01       	movw	r24, r18
    4d2a:	01 96       	adiw	r24, 0x01	; 1
    4d2c:	40 91 39 03 	lds	r20, 0x0339	; 0x800339 <key+0xf>
    4d30:	f9 01       	movw	r30, r18
    4d32:	40 83       	st	Z, r20

    last4bytes = roundkeys-4;
    4d34:	8c 01       	movw	r16, r24
    4d36:	04 50       	subi	r16, 0x04	; 4
    4d38:	11 09       	sbc	r17, r1
    
	for (i = AES_ROUNDS ; i != 0; --i) {
    4d3a:	0f 2e       	mov	r0, r31
    4d3c:	fa e0       	ldi	r31, 0x0A	; 10
    4d3e:	9f 2e       	mov	r9, r31
    4d40:	f0 2d       	mov	r31, r0
    4d42:	5e c1       	rjmp	.+700    	; 0x5000 <aes_key_schedule_128+0x3c6>
        // k0-k3 for next round
        temp[3] = SBOX[*last4bytes++];
    4d44:	98 01       	movw	r18, r16
    4d46:	89 01       	movw	r16, r18
    4d48:	0f 5f       	subi	r16, 0xFF	; 255
    4d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    4d4c:	f9 01       	movw	r30, r18
    4d4e:	20 81       	ld	r18, Z
    4d50:	22 2f       	mov	r18, r18
    4d52:	30 e0       	ldi	r19, 0x00	; 0
    4d54:	20 50       	subi	r18, 0x00	; 0
    4d56:	3e 4f       	sbci	r19, 0xFE	; 254
    4d58:	f9 01       	movw	r30, r18
    4d5a:	20 81       	ld	r18, Z
    4d5c:	d2 2e       	mov	r13, r18
        temp[0] = SBOX[*last4bytes++];
    4d5e:	98 01       	movw	r18, r16
    4d60:	89 01       	movw	r16, r18
    4d62:	0f 5f       	subi	r16, 0xFF	; 255
    4d64:	1f 4f       	sbci	r17, 0xFF	; 255
    4d66:	f9 01       	movw	r30, r18
    4d68:	20 81       	ld	r18, Z
    4d6a:	22 2f       	mov	r18, r18
    4d6c:	30 e0       	ldi	r19, 0x00	; 0
    4d6e:	20 50       	subi	r18, 0x00	; 0
    4d70:	3e 4f       	sbci	r19, 0xFE	; 254
    4d72:	f9 01       	movw	r30, r18
    4d74:	20 81       	ld	r18, Z
    4d76:	a2 2e       	mov	r10, r18
        temp[1] = SBOX[*last4bytes++];
    4d78:	98 01       	movw	r18, r16
    4d7a:	89 01       	movw	r16, r18
    4d7c:	0f 5f       	subi	r16, 0xFF	; 255
    4d7e:	1f 4f       	sbci	r17, 0xFF	; 255
    4d80:	f9 01       	movw	r30, r18
    4d82:	20 81       	ld	r18, Z
    4d84:	22 2f       	mov	r18, r18
    4d86:	30 e0       	ldi	r19, 0x00	; 0
    4d88:	20 50       	subi	r18, 0x00	; 0
    4d8a:	3e 4f       	sbci	r19, 0xFE	; 254
    4d8c:	f9 01       	movw	r30, r18
    4d8e:	20 81       	ld	r18, Z
    4d90:	b2 2e       	mov	r11, r18
        temp[2] = SBOX[*last4bytes++];
    4d92:	98 01       	movw	r18, r16
    4d94:	89 01       	movw	r16, r18
    4d96:	0f 5f       	subi	r16, 0xFF	; 255
    4d98:	1f 4f       	sbci	r17, 0xFF	; 255
    4d9a:	f9 01       	movw	r30, r18
    4d9c:	20 81       	ld	r18, Z
    4d9e:	22 2f       	mov	r18, r18
    4da0:	30 e0       	ldi	r19, 0x00	; 0
    4da2:	20 50       	subi	r18, 0x00	; 0
    4da4:	3e 4f       	sbci	r19, 0xFE	; 254
    4da6:	f9 01       	movw	r30, r18
    4da8:	20 81       	ld	r18, Z
    4daa:	c2 2e       	mov	r12, r18
        temp[0] ^= RC[i];
    4dac:	4a 2d       	mov	r20, r10
    4dae:	29 2d       	mov	r18, r9
    4db0:	30 e0       	ldi	r19, 0x00	; 0
    4db2:	20 50       	subi	r18, 0x00	; 0
    4db4:	3d 4f       	sbci	r19, 0xFD	; 253
    4db6:	f9 01       	movw	r30, r18
    4db8:	20 81       	ld	r18, Z
    4dba:	24 27       	eor	r18, r20
    4dbc:	a2 2e       	mov	r10, r18
        lastround = roundkeys-16;
    4dbe:	7c 01       	movw	r14, r24
    4dc0:	f0 e1       	ldi	r31, 0x10	; 16
    4dc2:	ef 1a       	sub	r14, r31
    4dc4:	f1 08       	sbc	r15, r1
        *roundkeys++ = temp[0] ^ *lastround++;
    4dc6:	9c 01       	movw	r18, r24
    4dc8:	c9 01       	movw	r24, r18
    4dca:	01 96       	adiw	r24, 0x01	; 1
    4dcc:	6a 2d       	mov	r22, r10
    4dce:	a7 01       	movw	r20, r14
    4dd0:	7a 01       	movw	r14, r20
    4dd2:	7f ef       	ldi	r23, 0xFF	; 255
    4dd4:	e7 1a       	sub	r14, r23
    4dd6:	f7 0a       	sbc	r15, r23
    4dd8:	fa 01       	movw	r30, r20
    4dda:	40 81       	ld	r20, Z
    4ddc:	46 27       	eor	r20, r22
    4dde:	f9 01       	movw	r30, r18
    4de0:	40 83       	st	Z, r20
        *roundkeys++ = temp[1] ^ *lastround++;
    4de2:	9c 01       	movw	r18, r24
    4de4:	c9 01       	movw	r24, r18
    4de6:	01 96       	adiw	r24, 0x01	; 1
    4de8:	6b 2d       	mov	r22, r11
    4dea:	a7 01       	movw	r20, r14
    4dec:	7a 01       	movw	r14, r20
    4dee:	ff ef       	ldi	r31, 0xFF	; 255
    4df0:	ef 1a       	sub	r14, r31
    4df2:	ff 0a       	sbc	r15, r31
    4df4:	fa 01       	movw	r30, r20
    4df6:	40 81       	ld	r20, Z
    4df8:	46 27       	eor	r20, r22
    4dfa:	f9 01       	movw	r30, r18
    4dfc:	40 83       	st	Z, r20
        *roundkeys++ = temp[2] ^ *lastround++;
    4dfe:	9c 01       	movw	r18, r24
    4e00:	c9 01       	movw	r24, r18
    4e02:	01 96       	adiw	r24, 0x01	; 1
    4e04:	6c 2d       	mov	r22, r12
    4e06:	a7 01       	movw	r20, r14
    4e08:	7a 01       	movw	r14, r20
    4e0a:	ff ef       	ldi	r31, 0xFF	; 255
    4e0c:	ef 1a       	sub	r14, r31
    4e0e:	ff 0a       	sbc	r15, r31
    4e10:	fa 01       	movw	r30, r20
    4e12:	40 81       	ld	r20, Z
    4e14:	46 27       	eor	r20, r22
    4e16:	f9 01       	movw	r30, r18
    4e18:	40 83       	st	Z, r20
        *roundkeys++ = temp[3] ^ *lastround++;
    4e1a:	9c 01       	movw	r18, r24
    4e1c:	c9 01       	movw	r24, r18
    4e1e:	01 96       	adiw	r24, 0x01	; 1
    4e20:	6d 2d       	mov	r22, r13
    4e22:	a7 01       	movw	r20, r14
    4e24:	7a 01       	movw	r14, r20
    4e26:	ff ef       	ldi	r31, 0xFF	; 255
    4e28:	ef 1a       	sub	r14, r31
    4e2a:	ff 0a       	sbc	r15, r31
    4e2c:	fa 01       	movw	r30, r20
    4e2e:	40 81       	ld	r20, Z
    4e30:	46 27       	eor	r20, r22
    4e32:	f9 01       	movw	r30, r18
    4e34:	40 83       	st	Z, r20
        // k4-k7 for next round        
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    4e36:	9c 01       	movw	r18, r24
    4e38:	c9 01       	movw	r24, r18
    4e3a:	01 96       	adiw	r24, 0x01	; 1
    4e3c:	a8 01       	movw	r20, r16
    4e3e:	8a 01       	movw	r16, r20
    4e40:	0f 5f       	subi	r16, 0xFF	; 255
    4e42:	1f 4f       	sbci	r17, 0xFF	; 255
    4e44:	fa 01       	movw	r30, r20
    4e46:	60 81       	ld	r22, Z
    4e48:	a7 01       	movw	r20, r14
    4e4a:	7a 01       	movw	r14, r20
    4e4c:	ff ef       	ldi	r31, 0xFF	; 255
    4e4e:	ef 1a       	sub	r14, r31
    4e50:	ff 0a       	sbc	r15, r31
    4e52:	fa 01       	movw	r30, r20
    4e54:	40 81       	ld	r20, Z
    4e56:	46 27       	eor	r20, r22
    4e58:	f9 01       	movw	r30, r18
    4e5a:	40 83       	st	Z, r20
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    4e5c:	9c 01       	movw	r18, r24
    4e5e:	c9 01       	movw	r24, r18
    4e60:	01 96       	adiw	r24, 0x01	; 1
    4e62:	a8 01       	movw	r20, r16
    4e64:	8a 01       	movw	r16, r20
    4e66:	0f 5f       	subi	r16, 0xFF	; 255
    4e68:	1f 4f       	sbci	r17, 0xFF	; 255
    4e6a:	fa 01       	movw	r30, r20
    4e6c:	60 81       	ld	r22, Z
    4e6e:	a7 01       	movw	r20, r14
    4e70:	7a 01       	movw	r14, r20
    4e72:	ff ef       	ldi	r31, 0xFF	; 255
    4e74:	ef 1a       	sub	r14, r31
    4e76:	ff 0a       	sbc	r15, r31
    4e78:	fa 01       	movw	r30, r20
    4e7a:	40 81       	ld	r20, Z
    4e7c:	46 27       	eor	r20, r22
    4e7e:	f9 01       	movw	r30, r18
    4e80:	40 83       	st	Z, r20
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    4e82:	9c 01       	movw	r18, r24
    4e84:	c9 01       	movw	r24, r18
    4e86:	01 96       	adiw	r24, 0x01	; 1
    4e88:	a8 01       	movw	r20, r16
    4e8a:	8a 01       	movw	r16, r20
    4e8c:	0f 5f       	subi	r16, 0xFF	; 255
    4e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    4e90:	fa 01       	movw	r30, r20
    4e92:	60 81       	ld	r22, Z
    4e94:	a7 01       	movw	r20, r14
    4e96:	7a 01       	movw	r14, r20
    4e98:	ff ef       	ldi	r31, 0xFF	; 255
    4e9a:	ef 1a       	sub	r14, r31
    4e9c:	ff 0a       	sbc	r15, r31
    4e9e:	fa 01       	movw	r30, r20
    4ea0:	40 81       	ld	r20, Z
    4ea2:	46 27       	eor	r20, r22
    4ea4:	f9 01       	movw	r30, r18
    4ea6:	40 83       	st	Z, r20
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    4ea8:	9c 01       	movw	r18, r24
    4eaa:	c9 01       	movw	r24, r18
    4eac:	01 96       	adiw	r24, 0x01	; 1
    4eae:	a8 01       	movw	r20, r16
    4eb0:	8a 01       	movw	r16, r20
    4eb2:	0f 5f       	subi	r16, 0xFF	; 255
    4eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    4eb6:	fa 01       	movw	r30, r20
    4eb8:	60 81       	ld	r22, Z
    4eba:	a7 01       	movw	r20, r14
    4ebc:	7a 01       	movw	r14, r20
    4ebe:	ff ef       	ldi	r31, 0xFF	; 255
    4ec0:	ef 1a       	sub	r14, r31
    4ec2:	ff 0a       	sbc	r15, r31
    4ec4:	fa 01       	movw	r30, r20
    4ec6:	40 81       	ld	r20, Z
    4ec8:	46 27       	eor	r20, r22
    4eca:	f9 01       	movw	r30, r18
    4ecc:	40 83       	st	Z, r20
        // k8-k11 for next round
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    4ece:	9c 01       	movw	r18, r24
    4ed0:	c9 01       	movw	r24, r18
    4ed2:	01 96       	adiw	r24, 0x01	; 1
    4ed4:	a8 01       	movw	r20, r16
    4ed6:	8a 01       	movw	r16, r20
    4ed8:	0f 5f       	subi	r16, 0xFF	; 255
    4eda:	1f 4f       	sbci	r17, 0xFF	; 255
    4edc:	fa 01       	movw	r30, r20
    4ede:	60 81       	ld	r22, Z
    4ee0:	a7 01       	movw	r20, r14
    4ee2:	7a 01       	movw	r14, r20
    4ee4:	ff ef       	ldi	r31, 0xFF	; 255
    4ee6:	ef 1a       	sub	r14, r31
    4ee8:	ff 0a       	sbc	r15, r31
    4eea:	fa 01       	movw	r30, r20
    4eec:	40 81       	ld	r20, Z
    4eee:	46 27       	eor	r20, r22
    4ef0:	f9 01       	movw	r30, r18
    4ef2:	40 83       	st	Z, r20
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    4ef4:	9c 01       	movw	r18, r24
    4ef6:	c9 01       	movw	r24, r18
    4ef8:	01 96       	adiw	r24, 0x01	; 1
    4efa:	a8 01       	movw	r20, r16
    4efc:	8a 01       	movw	r16, r20
    4efe:	0f 5f       	subi	r16, 0xFF	; 255
    4f00:	1f 4f       	sbci	r17, 0xFF	; 255
    4f02:	fa 01       	movw	r30, r20
    4f04:	60 81       	ld	r22, Z
    4f06:	a7 01       	movw	r20, r14
    4f08:	7a 01       	movw	r14, r20
    4f0a:	ff ef       	ldi	r31, 0xFF	; 255
    4f0c:	ef 1a       	sub	r14, r31
    4f0e:	ff 0a       	sbc	r15, r31
    4f10:	fa 01       	movw	r30, r20
    4f12:	40 81       	ld	r20, Z
    4f14:	46 27       	eor	r20, r22
    4f16:	f9 01       	movw	r30, r18
    4f18:	40 83       	st	Z, r20
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    4f1a:	9c 01       	movw	r18, r24
    4f1c:	c9 01       	movw	r24, r18
    4f1e:	01 96       	adiw	r24, 0x01	; 1
    4f20:	a8 01       	movw	r20, r16
    4f22:	8a 01       	movw	r16, r20
    4f24:	0f 5f       	subi	r16, 0xFF	; 255
    4f26:	1f 4f       	sbci	r17, 0xFF	; 255
    4f28:	fa 01       	movw	r30, r20
    4f2a:	60 81       	ld	r22, Z
    4f2c:	a7 01       	movw	r20, r14
    4f2e:	7a 01       	movw	r14, r20
    4f30:	ff ef       	ldi	r31, 0xFF	; 255
    4f32:	ef 1a       	sub	r14, r31
    4f34:	ff 0a       	sbc	r15, r31
    4f36:	fa 01       	movw	r30, r20
    4f38:	40 81       	ld	r20, Z
    4f3a:	46 27       	eor	r20, r22
    4f3c:	f9 01       	movw	r30, r18
    4f3e:	40 83       	st	Z, r20
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    4f40:	9c 01       	movw	r18, r24
    4f42:	c9 01       	movw	r24, r18
    4f44:	01 96       	adiw	r24, 0x01	; 1
    4f46:	a8 01       	movw	r20, r16
    4f48:	8a 01       	movw	r16, r20
    4f4a:	0f 5f       	subi	r16, 0xFF	; 255
    4f4c:	1f 4f       	sbci	r17, 0xFF	; 255
    4f4e:	fa 01       	movw	r30, r20
    4f50:	60 81       	ld	r22, Z
    4f52:	a7 01       	movw	r20, r14
    4f54:	7a 01       	movw	r14, r20
    4f56:	ff ef       	ldi	r31, 0xFF	; 255
    4f58:	ef 1a       	sub	r14, r31
    4f5a:	ff 0a       	sbc	r15, r31
    4f5c:	fa 01       	movw	r30, r20
    4f5e:	40 81       	ld	r20, Z
    4f60:	46 27       	eor	r20, r22
    4f62:	f9 01       	movw	r30, r18
    4f64:	40 83       	st	Z, r20
        // k12-k15 for next round
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    4f66:	9c 01       	movw	r18, r24
    4f68:	c9 01       	movw	r24, r18
    4f6a:	01 96       	adiw	r24, 0x01	; 1
    4f6c:	a8 01       	movw	r20, r16
    4f6e:	8a 01       	movw	r16, r20
    4f70:	0f 5f       	subi	r16, 0xFF	; 255
    4f72:	1f 4f       	sbci	r17, 0xFF	; 255
    4f74:	fa 01       	movw	r30, r20
    4f76:	60 81       	ld	r22, Z
    4f78:	a7 01       	movw	r20, r14
    4f7a:	7a 01       	movw	r14, r20
    4f7c:	ff ef       	ldi	r31, 0xFF	; 255
    4f7e:	ef 1a       	sub	r14, r31
    4f80:	ff 0a       	sbc	r15, r31
    4f82:	fa 01       	movw	r30, r20
    4f84:	40 81       	ld	r20, Z
    4f86:	46 27       	eor	r20, r22
    4f88:	f9 01       	movw	r30, r18
    4f8a:	40 83       	st	Z, r20
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    4f8c:	9c 01       	movw	r18, r24
    4f8e:	c9 01       	movw	r24, r18
    4f90:	01 96       	adiw	r24, 0x01	; 1
    4f92:	a8 01       	movw	r20, r16
    4f94:	8a 01       	movw	r16, r20
    4f96:	0f 5f       	subi	r16, 0xFF	; 255
    4f98:	1f 4f       	sbci	r17, 0xFF	; 255
    4f9a:	fa 01       	movw	r30, r20
    4f9c:	60 81       	ld	r22, Z
    4f9e:	a7 01       	movw	r20, r14
    4fa0:	7a 01       	movw	r14, r20
    4fa2:	ff ef       	ldi	r31, 0xFF	; 255
    4fa4:	ef 1a       	sub	r14, r31
    4fa6:	ff 0a       	sbc	r15, r31
    4fa8:	fa 01       	movw	r30, r20
    4faa:	40 81       	ld	r20, Z
    4fac:	46 27       	eor	r20, r22
    4fae:	f9 01       	movw	r30, r18
    4fb0:	40 83       	st	Z, r20
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    4fb2:	9c 01       	movw	r18, r24
    4fb4:	c9 01       	movw	r24, r18
    4fb6:	01 96       	adiw	r24, 0x01	; 1
    4fb8:	a8 01       	movw	r20, r16
    4fba:	8a 01       	movw	r16, r20
    4fbc:	0f 5f       	subi	r16, 0xFF	; 255
    4fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    4fc0:	fa 01       	movw	r30, r20
    4fc2:	60 81       	ld	r22, Z
    4fc4:	a7 01       	movw	r20, r14
    4fc6:	7a 01       	movw	r14, r20
    4fc8:	ff ef       	ldi	r31, 0xFF	; 255
    4fca:	ef 1a       	sub	r14, r31
    4fcc:	ff 0a       	sbc	r15, r31
    4fce:	fa 01       	movw	r30, r20
    4fd0:	40 81       	ld	r20, Z
    4fd2:	46 27       	eor	r20, r22
    4fd4:	f9 01       	movw	r30, r18
    4fd6:	40 83       	st	Z, r20
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    4fd8:	9c 01       	movw	r18, r24
    4fda:	c9 01       	movw	r24, r18
    4fdc:	01 96       	adiw	r24, 0x01	; 1
    4fde:	a8 01       	movw	r20, r16
    4fe0:	8a 01       	movw	r16, r20
    4fe2:	0f 5f       	subi	r16, 0xFF	; 255
    4fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    4fe6:	fa 01       	movw	r30, r20
    4fe8:	60 81       	ld	r22, Z
    4fea:	a7 01       	movw	r20, r14
    4fec:	7a 01       	movw	r14, r20
    4fee:	ff ef       	ldi	r31, 0xFF	; 255
    4ff0:	ef 1a       	sub	r14, r31
    4ff2:	ff 0a       	sbc	r15, r31
    4ff4:	fa 01       	movw	r30, r20
    4ff6:	40 81       	ld	r20, Z
    4ff8:	46 27       	eor	r20, r22
    4ffa:	f9 01       	movw	r30, r18
    4ffc:	40 83       	st	Z, r20
	*roundkeys++ = key[14];
	*roundkeys++ = key[15];

    last4bytes = roundkeys-4;
    
	for (i = AES_ROUNDS ; i != 0; --i) {
    4ffe:	9a 94       	dec	r9
    5000:	99 20       	and	r9, r9
    5002:	09 f0       	breq	.+2      	; 0x5006 <aes_key_schedule_128+0x3cc>
    5004:	9f ce       	rjmp	.-706    	; 0x4d44 <aes_key_schedule_128+0x10a>
        *roundkeys++ = *last4bytes++ ^ *lastround++;
        *roundkeys++ = *last4bytes++ ^ *lastround++;
        *roundkeys++ = *last4bytes++ ^ *lastround++;
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    }
}
    5006:	00 00       	nop
    5008:	df 91       	pop	r29
    500a:	cf 91       	pop	r28
    500c:	1f 91       	pop	r17
    500e:	0f 91       	pop	r16
    5010:	ff 90       	pop	r15
    5012:	ef 90       	pop	r14
    5014:	df 90       	pop	r13
    5016:	cf 90       	pop	r12
    5018:	bf 90       	pop	r11
    501a:	af 90       	pop	r10
    501c:	9f 90       	pop	r9
    501e:	08 95       	ret

00005020 <main>:
		0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
		0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
	};


int main() {
    5020:	1f 93       	push	r17
    5022:	cf 93       	push	r28
    5024:	df 93       	push	r29
    5026:	cd b7       	in	r28, 0x3d	; 61
    5028:	de b7       	in	r29, 0x3e	; 62
    502a:	c0 5d       	subi	r28, 0xD0	; 208
    502c:	d1 09       	sbc	r29, r1
    502e:	0f b6       	in	r0, 0x3f	; 63
    5030:	f8 94       	cli
    5032:	de bf       	out	0x3e, r29	; 62
    5034:	0f be       	out	0x3f, r0	; 63
    5036:	cd bf       	out	0x3d, r28	; 61
	register uint8_t i;

 
	uint8_t ciphertext[AES_BLOCK_SIZE];

	const uint8_t const_cipher[AES_BLOCK_SIZE] = {
    5038:	80 e1       	ldi	r24, 0x10	; 16
    503a:	ea e1       	ldi	r30, 0x1A	; 26
    503c:	f3 e0       	ldi	r31, 0x03	; 3
    503e:	de 01       	movw	r26, r28
    5040:	51 96       	adiw	r26, 0x11	; 17
    5042:	01 90       	ld	r0, Z+
    5044:	0d 92       	st	X+, r0
    5046:	8a 95       	dec	r24
    5048:	e1 f7       	brne	.-8      	; 0x5042 <main+0x22>
	};
	
	uint8_t roundkeys[AES_ROUND_KEY_SIZE];

	// key schedule
	aes_key_schedule_128(roundkeys);
    504a:	ce 01       	movw	r24, r28
    504c:	81 96       	adiw	r24, 0x21	; 33
    504e:	0e 94 1d 26 	call	0x4c3a	; 0x4c3a <aes_key_schedule_128>

	// encryption
	aes_encrypt_128(roundkeys, ciphertext);
    5052:	ce 01       	movw	r24, r28
    5054:	81 96       	adiw	r24, 0x21	; 33
    5056:	9e 01       	movw	r18, r28
    5058:	2f 5f       	subi	r18, 0xFF	; 255
    505a:	3f 4f       	sbci	r19, 0xFF	; 255
    505c:	b9 01       	movw	r22, r18
    505e:	0e 94 74 09 	call	0x12e8	; 0x12e8 <aes_encrypt_128>

	for (i = (AES_BLOCK_SIZE-1); i != 0; i--) {
    5062:	1f e0       	ldi	r17, 0x0F	; 15
    5064:	17 c0       	rjmp	.+46     	; 0x5094 <main+0x74>
		if ( ciphertext[i] != const_cipher[i] ) { break; }
    5066:	81 2f       	mov	r24, r17
    5068:	90 e0       	ldi	r25, 0x00	; 0
    506a:	9e 01       	movw	r18, r28
    506c:	2f 5f       	subi	r18, 0xFF	; 255
    506e:	3f 4f       	sbci	r19, 0xFF	; 255
    5070:	82 0f       	add	r24, r18
    5072:	93 1f       	adc	r25, r19
    5074:	fc 01       	movw	r30, r24
    5076:	40 81       	ld	r20, Z
    5078:	81 2f       	mov	r24, r17
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	9e 01       	movw	r18, r28
    507e:	2f 5e       	subi	r18, 0xEF	; 239
    5080:	3f 4f       	sbci	r19, 0xFF	; 255
    5082:	82 0f       	add	r24, r18
    5084:	93 1f       	adc	r25, r19
    5086:	fc 01       	movw	r30, r24
    5088:	80 81       	ld	r24, Z
    508a:	48 17       	cp	r20, r24
    508c:	31 f4       	brne	.+12     	; 0x509a <main+0x7a>
	aes_key_schedule_128(roundkeys);

	// encryption
	aes_encrypt_128(roundkeys, ciphertext);

	for (i = (AES_BLOCK_SIZE-1); i != 0; i--) {
    508e:	81 2f       	mov	r24, r17
    5090:	1f ef       	ldi	r17, 0xFF	; 255
    5092:	18 0f       	add	r17, r24
    5094:	11 23       	and	r17, r17
    5096:	39 f7       	brne	.-50     	; 0x5066 <main+0x46>
    5098:	01 c0       	rjmp	.+2      	; 0x509c <main+0x7c>
		if ( ciphertext[i] != const_cipher[i] ) { break; }
    509a:	00 00       	nop
	}
	if ( ciphertext[i] != const_cipher[i] );


	// decryption
	aes_decrypt_128(roundkeys, ciphertext, ciphertext);
    509c:	ce 01       	movw	r24, r28
    509e:	81 96       	adiw	r24, 0x21	; 33
    50a0:	9e 01       	movw	r18, r28
    50a2:	2f 5f       	subi	r18, 0xFF	; 255
    50a4:	3f 4f       	sbci	r19, 0xFF	; 255
    50a6:	a9 01       	movw	r20, r18
    50a8:	9e 01       	movw	r18, r28
    50aa:	2f 5f       	subi	r18, 0xFF	; 255
    50ac:	3f 4f       	sbci	r19, 0xFF	; 255
    50ae:	b9 01       	movw	r22, r18
    50b0:	0e 94 a7 00 	call	0x14e	; 0x14e <aes_decrypt_128>
	for (i = (AES_BLOCK_SIZE-1); i != 0; i--) {
    50b4:	1f e0       	ldi	r17, 0x0F	; 15
    50b6:	14 c0       	rjmp	.+40     	; 0x50e0 <main+0xc0>
		if ( ciphertext[i] != plaintext[i] ) { break; }
    50b8:	81 2f       	mov	r24, r17
    50ba:	90 e0       	ldi	r25, 0x00	; 0
    50bc:	9e 01       	movw	r18, r28
    50be:	2f 5f       	subi	r18, 0xFF	; 255
    50c0:	3f 4f       	sbci	r19, 0xFF	; 255
    50c2:	82 0f       	add	r24, r18
    50c4:	93 1f       	adc	r25, r19
    50c6:	fc 01       	movw	r30, r24
    50c8:	20 81       	ld	r18, Z
    50ca:	81 2f       	mov	r24, r17
    50cc:	90 e0       	ldi	r25, 0x00	; 0
    50ce:	86 5f       	subi	r24, 0xF6	; 246
    50d0:	9c 4f       	sbci	r25, 0xFC	; 252
    50d2:	fc 01       	movw	r30, r24
    50d4:	80 81       	ld	r24, Z
    50d6:	28 17       	cp	r18, r24
    50d8:	31 f4       	brne	.+12     	; 0x50e6 <main+0xc6>
	if ( ciphertext[i] != const_cipher[i] );


	// decryption
	aes_decrypt_128(roundkeys, ciphertext, ciphertext);
	for (i = (AES_BLOCK_SIZE-1); i != 0; i--) {
    50da:	81 2f       	mov	r24, r17
    50dc:	1f ef       	ldi	r17, 0xFF	; 255
    50de:	18 0f       	add	r17, r24
    50e0:	11 23       	and	r17, r17
    50e2:	51 f7       	brne	.-44     	; 0x50b8 <main+0x98>
    50e4:	01 c0       	rjmp	.+2      	; 0x50e8 <main+0xc8>
		if ( ciphertext[i] != plaintext[i] ) { break; }
    50e6:	00 00       	nop
	}
	if ( ciphertext[i] != plaintext[i] );

	return 0;
    50e8:	80 e0       	ldi	r24, 0x00	; 0
    50ea:	90 e0       	ldi	r25, 0x00	; 0
}
    50ec:	c0 53       	subi	r28, 0x30	; 48
    50ee:	df 4f       	sbci	r29, 0xFF	; 255
    50f0:	0f b6       	in	r0, 0x3f	; 63
    50f2:	f8 94       	cli
    50f4:	de bf       	out	0x3e, r29	; 62
    50f6:	0f be       	out	0x3f, r0	; 63
    50f8:	cd bf       	out	0x3d, r28	; 61
    50fa:	df 91       	pop	r29
    50fc:	cf 91       	pop	r28
    50fe:	1f 91       	pop	r17
    5100:	08 95       	ret

00005102 <_exit>:
    5102:	f8 94       	cli

00005104 <__stop_program>:
    5104:	ff cf       	rjmp	.-2      	; 0x5104 <__stop_program>
