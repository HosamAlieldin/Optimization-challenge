
Req4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000023a  00800100  00000d4a  00000dbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d4a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001028  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bbc  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008be  00000000  00000000  00001cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000928  00000000  00000000  0000257a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00002ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000433  00000000  00000000  00002ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000236  00000000  00000000  00003427  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  0000365d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 05 06 	call	0xc0a	; 0xc0a <main>
  8e:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <inv_shift_rows>:
 *  Row0: s0  s4  s8  s12   >>> 0 byte
 *  Row1: s1  s5  s9  s13   >>> 1 byte
 *  Row2: s2  s6  s10 s14   >>> 2 bytes
 *  Row3: s3  s7  s11 s15   >>> 3 bytes
 */
static void inv_shift_rows(uint8_t *state) {
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	00 d0       	rcall	.+0      	; 0x9c <inv_shift_rows+0x6>
  9c:	1f 92       	push	r1
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	9b 83       	std	Y+3, r25	; 0x03
  a4:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t temp;
    // row1
    temp        = *(state+13);
  a6:	8a 81       	ldd	r24, Y+2	; 0x02
  a8:	9b 81       	ldd	r25, Y+3	; 0x03
  aa:	fc 01       	movw	r30, r24
  ac:	85 85       	ldd	r24, Z+13	; 0x0d
  ae:	89 83       	std	Y+1, r24	; 0x01
    *(state+13) = *(state+9);
  b0:	8a 81       	ldd	r24, Y+2	; 0x02
  b2:	9b 81       	ldd	r25, Y+3	; 0x03
  b4:	0d 96       	adiw	r24, 0x0d	; 13
  b6:	2a 81       	ldd	r18, Y+2	; 0x02
  b8:	3b 81       	ldd	r19, Y+3	; 0x03
  ba:	f9 01       	movw	r30, r18
  bc:	21 85       	ldd	r18, Z+9	; 0x09
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
    *(state+9)  = *(state+5);
  c2:	8a 81       	ldd	r24, Y+2	; 0x02
  c4:	9b 81       	ldd	r25, Y+3	; 0x03
  c6:	09 96       	adiw	r24, 0x09	; 9
  c8:	2a 81       	ldd	r18, Y+2	; 0x02
  ca:	3b 81       	ldd	r19, Y+3	; 0x03
  cc:	f9 01       	movw	r30, r18
  ce:	25 81       	ldd	r18, Z+5	; 0x05
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
    *(state+5)  = *(state+1);
  d4:	8a 81       	ldd	r24, Y+2	; 0x02
  d6:	9b 81       	ldd	r25, Y+3	; 0x03
  d8:	05 96       	adiw	r24, 0x05	; 5
  da:	2a 81       	ldd	r18, Y+2	; 0x02
  dc:	3b 81       	ldd	r19, Y+3	; 0x03
  de:	f9 01       	movw	r30, r18
  e0:	21 81       	ldd	r18, Z+1	; 0x01
  e2:	fc 01       	movw	r30, r24
  e4:	20 83       	st	Z, r18
    *(state+1)  = temp;
  e6:	8a 81       	ldd	r24, Y+2	; 0x02
  e8:	9b 81       	ldd	r25, Y+3	; 0x03
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	29 81       	ldd	r18, Y+1	; 0x01
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
    // row2
    temp        = *(state+14);
  f2:	8a 81       	ldd	r24, Y+2	; 0x02
  f4:	9b 81       	ldd	r25, Y+3	; 0x03
  f6:	fc 01       	movw	r30, r24
  f8:	86 85       	ldd	r24, Z+14	; 0x0e
  fa:	89 83       	std	Y+1, r24	; 0x01
    *(state+14) = *(state+6);
  fc:	8a 81       	ldd	r24, Y+2	; 0x02
  fe:	9b 81       	ldd	r25, Y+3	; 0x03
 100:	0e 96       	adiw	r24, 0x0e	; 14
 102:	2a 81       	ldd	r18, Y+2	; 0x02
 104:	3b 81       	ldd	r19, Y+3	; 0x03
 106:	f9 01       	movw	r30, r18
 108:	26 81       	ldd	r18, Z+6	; 0x06
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
    *(state+6)  = temp;
 10e:	8a 81       	ldd	r24, Y+2	; 0x02
 110:	9b 81       	ldd	r25, Y+3	; 0x03
 112:	06 96       	adiw	r24, 0x06	; 6
 114:	29 81       	ldd	r18, Y+1	; 0x01
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18
    temp        = *(state+10);
 11a:	8a 81       	ldd	r24, Y+2	; 0x02
 11c:	9b 81       	ldd	r25, Y+3	; 0x03
 11e:	fc 01       	movw	r30, r24
 120:	82 85       	ldd	r24, Z+10	; 0x0a
 122:	89 83       	std	Y+1, r24	; 0x01
    *(state+10) = *(state+2);
 124:	8a 81       	ldd	r24, Y+2	; 0x02
 126:	9b 81       	ldd	r25, Y+3	; 0x03
 128:	0a 96       	adiw	r24, 0x0a	; 10
 12a:	2a 81       	ldd	r18, Y+2	; 0x02
 12c:	3b 81       	ldd	r19, Y+3	; 0x03
 12e:	f9 01       	movw	r30, r18
 130:	22 81       	ldd	r18, Z+2	; 0x02
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
    *(state+2)  = temp;
 136:	8a 81       	ldd	r24, Y+2	; 0x02
 138:	9b 81       	ldd	r25, Y+3	; 0x03
 13a:	02 96       	adiw	r24, 0x02	; 2
 13c:	29 81       	ldd	r18, Y+1	; 0x01
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
    // row3
    temp        = *(state+3);
 142:	8a 81       	ldd	r24, Y+2	; 0x02
 144:	9b 81       	ldd	r25, Y+3	; 0x03
 146:	fc 01       	movw	r30, r24
 148:	83 81       	ldd	r24, Z+3	; 0x03
 14a:	89 83       	std	Y+1, r24	; 0x01
    *(state+3)  = *(state+7);
 14c:	8a 81       	ldd	r24, Y+2	; 0x02
 14e:	9b 81       	ldd	r25, Y+3	; 0x03
 150:	03 96       	adiw	r24, 0x03	; 3
 152:	2a 81       	ldd	r18, Y+2	; 0x02
 154:	3b 81       	ldd	r19, Y+3	; 0x03
 156:	f9 01       	movw	r30, r18
 158:	27 81       	ldd	r18, Z+7	; 0x07
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18
    *(state+7)  = *(state+11);
 15e:	8a 81       	ldd	r24, Y+2	; 0x02
 160:	9b 81       	ldd	r25, Y+3	; 0x03
 162:	07 96       	adiw	r24, 0x07	; 7
 164:	2a 81       	ldd	r18, Y+2	; 0x02
 166:	3b 81       	ldd	r19, Y+3	; 0x03
 168:	f9 01       	movw	r30, r18
 16a:	23 85       	ldd	r18, Z+11	; 0x0b
 16c:	fc 01       	movw	r30, r24
 16e:	20 83       	st	Z, r18
    *(state+11) = *(state+15);
 170:	8a 81       	ldd	r24, Y+2	; 0x02
 172:	9b 81       	ldd	r25, Y+3	; 0x03
 174:	0b 96       	adiw	r24, 0x0b	; 11
 176:	2a 81       	ldd	r18, Y+2	; 0x02
 178:	3b 81       	ldd	r19, Y+3	; 0x03
 17a:	f9 01       	movw	r30, r18
 17c:	27 85       	ldd	r18, Z+15	; 0x0f
 17e:	fc 01       	movw	r30, r24
 180:	20 83       	st	Z, r18
    *(state+15) = temp;
 182:	8a 81       	ldd	r24, Y+2	; 0x02
 184:	9b 81       	ldd	r25, Y+3	; 0x03
 186:	0f 96       	adiw	r24, 0x0f	; 15
 188:	29 81       	ldd	r18, Y+1	; 0x01
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
}
 18e:	00 00       	nop
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <aes_decrypt_128>:
 void aes_decrypt_128( uint8_t *roundkeys,  uint8_t *ciphertext, uint8_t *plaintext) {
 19c:	ff 92       	push	r15
 19e:	0f 93       	push	r16
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
 1aa:	6d 97       	sbiw	r28, 0x1d	; 29
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	f8 94       	cli
 1b0:	de bf       	out	0x3e, r29	; 62
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	cd bf       	out	0x3d, r28	; 61
 1b6:	99 8f       	std	Y+25, r25	; 0x19
 1b8:	88 8f       	std	Y+24, r24	; 0x18
 1ba:	7b 8f       	std	Y+27, r23	; 0x1b
 1bc:	6a 8f       	std	Y+26, r22	; 0x1a
 1be:	5d 8f       	std	Y+29, r21	; 0x1d
 1c0:	4c 8f       	std	Y+28, r20	; 0x1c

    uint8_t tmp[16];
    uint8_t t, u, v;
    uint8_t i, j,loop,loop2;

    roundkeys += 160;
 1c2:	88 8d       	ldd	r24, Y+24	; 0x18
 1c4:	99 8d       	ldd	r25, Y+25	; 0x19
 1c6:	80 56       	subi	r24, 0x60	; 96
 1c8:	9f 4f       	sbci	r25, 0xFF	; 255
 1ca:	99 8f       	std	Y+25, r25	; 0x19
 1cc:	88 8f       	std	Y+24, r24	; 0x18

    // first round
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 1ce:	19 82       	std	Y+1, r1	; 0x01
 1d0:	1f c0       	rjmp	.+62     	; 0x210 <aes_decrypt_128+0x74>
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
 1d2:	89 81       	ldd	r24, Y+1	; 0x01
 1d4:	88 2f       	mov	r24, r24
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	2c 8d       	ldd	r18, Y+28	; 0x1c
 1da:	3d 8d       	ldd	r19, Y+29	; 0x1d
 1dc:	82 0f       	add	r24, r18
 1de:	93 1f       	adc	r25, r19
 1e0:	29 81       	ldd	r18, Y+1	; 0x01
 1e2:	22 2f       	mov	r18, r18
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	4a 8d       	ldd	r20, Y+26	; 0x1a
 1e8:	5b 8d       	ldd	r21, Y+27	; 0x1b
 1ea:	24 0f       	add	r18, r20
 1ec:	35 1f       	adc	r19, r21
 1ee:	f9 01       	movw	r30, r18
 1f0:	60 81       	ld	r22, Z
 1f2:	29 81       	ldd	r18, Y+1	; 0x01
 1f4:	22 2f       	mov	r18, r18
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	48 8d       	ldd	r20, Y+24	; 0x18
 1fa:	59 8d       	ldd	r21, Y+25	; 0x19
 1fc:	24 0f       	add	r18, r20
 1fe:	35 1f       	adc	r19, r21
 200:	f9 01       	movw	r30, r18
 202:	20 81       	ld	r18, Z
 204:	26 27       	eor	r18, r22
 206:	fc 01       	movw	r30, r24
 208:	20 83       	st	Z, r18
    uint8_t i, j,loop,loop2;

    roundkeys += 160;

    // first round
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	8f 5f       	subi	r24, 0xFF	; 255
 20e:	89 83       	std	Y+1, r24	; 0x01
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	80 31       	cpi	r24, 0x10	; 16
 214:	f0 f2       	brcs	.-68     	; 0x1d2 <aes_decrypt_128+0x36>
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
    }
    roundkeys -= 16;
 216:	88 8d       	ldd	r24, Y+24	; 0x18
 218:	99 8d       	ldd	r25, Y+25	; 0x19
 21a:	40 97       	sbiw	r24, 0x10	; 16
 21c:	99 8f       	std	Y+25, r25	; 0x19
 21e:	88 8f       	std	Y+24, r24	; 0x18
    inv_shift_rows(plaintext);
 220:	8c 8d       	ldd	r24, Y+28	; 0x1c
 222:	9d 8d       	ldd	r25, Y+29	; 0x1d
 224:	0e 94 4b 00 	call	0x96	; 0x96 <inv_shift_rows>
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 228:	19 82       	std	Y+1, r1	; 0x01
 22a:	1b c0       	rjmp	.+54     	; 0x262 <aes_decrypt_128+0xc6>
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	88 2f       	mov	r24, r24
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	2c 8d       	ldd	r18, Y+28	; 0x1c
 234:	3d 8d       	ldd	r19, Y+29	; 0x1d
 236:	82 0f       	add	r24, r18
 238:	93 1f       	adc	r25, r19
 23a:	29 81       	ldd	r18, Y+1	; 0x01
 23c:	22 2f       	mov	r18, r18
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	4c 8d       	ldd	r20, Y+28	; 0x1c
 242:	5d 8d       	ldd	r21, Y+29	; 0x1d
 244:	24 0f       	add	r18, r20
 246:	35 1f       	adc	r19, r21
 248:	f9 01       	movw	r30, r18
 24a:	20 81       	ld	r18, Z
 24c:	22 2f       	mov	r18, r18
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	20 50       	subi	r18, 0x00	; 0
 252:	3f 4f       	sbci	r19, 0xFF	; 255
 254:	f9 01       	movw	r30, r18
 256:	20 81       	ld	r18, Z
 258:	fc 01       	movw	r30, r24
 25a:	20 83       	st	Z, r18
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
    }
    roundkeys -= 16;
    inv_shift_rows(plaintext);
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 25c:	89 81       	ldd	r24, Y+1	; 0x01
 25e:	8f 5f       	subi	r24, 0xFF	; 255
 260:	89 83       	std	Y+1, r24	; 0x01
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	80 31       	cpi	r24, 0x10	; 16
 266:	10 f3       	brcs	.-60     	; 0x22c <aes_decrypt_128+0x90>
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	8a 83       	std	Y+2, r24	; 0x02
 26c:	9d c1       	rjmp	.+826    	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
        
        // Inverse AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 26e:	19 82       	std	Y+1, r1	; 0x01
 270:	20 c0       	rjmp	.+64     	; 0x2b2 <aes_decrypt_128+0x116>
            *(tmp+i) = *(plaintext+i) ^ *(roundkeys+i);
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	88 2f       	mov	r24, r24
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	9e 01       	movw	r18, r28
 27a:	28 5f       	subi	r18, 0xF8	; 248
 27c:	3f 4f       	sbci	r19, 0xFF	; 255
 27e:	82 0f       	add	r24, r18
 280:	93 1f       	adc	r25, r19
 282:	29 81       	ldd	r18, Y+1	; 0x01
 284:	22 2f       	mov	r18, r18
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	4c 8d       	ldd	r20, Y+28	; 0x1c
 28a:	5d 8d       	ldd	r21, Y+29	; 0x1d
 28c:	24 0f       	add	r18, r20
 28e:	35 1f       	adc	r19, r21
 290:	f9 01       	movw	r30, r18
 292:	60 81       	ld	r22, Z
 294:	29 81       	ldd	r18, Y+1	; 0x01
 296:	22 2f       	mov	r18, r18
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	48 8d       	ldd	r20, Y+24	; 0x18
 29c:	59 8d       	ldd	r21, Y+25	; 0x19
 29e:	24 0f       	add	r18, r20
 2a0:	35 1f       	adc	r19, r21
 2a2:	f9 01       	movw	r30, r18
 2a4:	20 81       	ld	r18, Z
 2a6:	26 27       	eor	r18, r22
 2a8:	fc 01       	movw	r30, r24
 2aa:	20 83       	st	Z, r18
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
        
        // Inverse AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
 2ae:	8f 5f       	subi	r24, 0xFF	; 255
 2b0:	89 83       	std	Y+1, r24	; 0x01
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	80 31       	cpi	r24, 0x10	; 16
 2b6:	e8 f2       	brcs	.-70     	; 0x272 <aes_decrypt_128+0xd6>
         * [0e 0b 0d 09]   [s0  s4  s8  s12]
         * [09 0e 0b 0d] . [s1  s5  s9  s13]
         * [0d 09 0e 0b]   [s2  s6  s10 s14]
         * [0b 0d 09 0e]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
 2b8:	19 82       	std	Y+1, r1	; 0x01
 2ba:	46 c1       	rjmp	.+652    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
 2bc:	89 81       	ldd	r24, Y+1	; 0x01
 2be:	88 2f       	mov	r24, r24
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	9e 01       	movw	r18, r28
 2c4:	28 5f       	subi	r18, 0xF8	; 248
 2c6:	3f 4f       	sbci	r19, 0xFF	; 255
 2c8:	82 0f       	add	r24, r18
 2ca:	93 1f       	adc	r25, r19
 2cc:	fc 01       	movw	r30, r24
 2ce:	40 81       	ld	r20, Z
 2d0:	89 81       	ldd	r24, Y+1	; 0x01
 2d2:	88 2f       	mov	r24, r24
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	9e 01       	movw	r18, r28
 2da:	28 5f       	subi	r18, 0xF8	; 248
 2dc:	3f 4f       	sbci	r19, 0xFF	; 255
 2de:	82 0f       	add	r24, r18
 2e0:	93 1f       	adc	r25, r19
 2e2:	fc 01       	movw	r30, r24
 2e4:	80 81       	ld	r24, Z
 2e6:	48 27       	eor	r20, r24
 2e8:	89 81       	ldd	r24, Y+1	; 0x01
 2ea:	88 2f       	mov	r24, r24
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	02 96       	adiw	r24, 0x02	; 2
 2f0:	9e 01       	movw	r18, r28
 2f2:	28 5f       	subi	r18, 0xF8	; 248
 2f4:	3f 4f       	sbci	r19, 0xFF	; 255
 2f6:	82 0f       	add	r24, r18
 2f8:	93 1f       	adc	r25, r19
 2fa:	fc 01       	movw	r30, r24
 2fc:	80 81       	ld	r24, Z
 2fe:	48 27       	eor	r20, r24
 300:	89 81       	ldd	r24, Y+1	; 0x01
 302:	88 2f       	mov	r24, r24
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	03 96       	adiw	r24, 0x03	; 3
 308:	9e 01       	movw	r18, r28
 30a:	28 5f       	subi	r18, 0xF8	; 248
 30c:	3f 4f       	sbci	r19, 0xFF	; 255
 30e:	82 0f       	add	r24, r18
 310:	93 1f       	adc	r25, r19
 312:	fc 01       	movw	r30, r24
 314:	80 81       	ld	r24, Z
 316:	84 27       	eor	r24, r20
 318:	8d 83       	std	Y+5, r24	; 0x05
			 plaintext[i]   = t ^ tmp[i]   ^ mul2(tmp[i]   ^ tmp[i+1]);
			 plaintext[i+1] = t ^ tmp[i+1] ^ mul2(tmp[i+1] ^ tmp[i+2]);
			 plaintext[i+2] = t ^ tmp[i+2] ^ mul2(tmp[i+2] ^ tmp[i+3]);
			 saves 140 bytes
			*/
			for (loop=0;loop<3;loop++)
 31a:	1b 82       	std	Y+3, r1	; 0x03
 31c:	4a c0       	rjmp	.+148    	; 0x3b2 <aes_decrypt_128+0x216>
			{
				plaintext[i+loop]   = t ^ tmp[i+loop]   ^ mul2(tmp[i+loop]   ^ tmp[i+1+loop]);
 31e:	89 81       	ldd	r24, Y+1	; 0x01
 320:	28 2f       	mov	r18, r24
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	8b 81       	ldd	r24, Y+3	; 0x03
 326:	88 2f       	mov	r24, r24
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	82 0f       	add	r24, r18
 32c:	93 1f       	adc	r25, r19
 32e:	9c 01       	movw	r18, r24
 330:	8c 8d       	ldd	r24, Y+28	; 0x1c
 332:	9d 8d       	ldd	r25, Y+29	; 0x1d
 334:	8c 01       	movw	r16, r24
 336:	02 0f       	add	r16, r18
 338:	13 1f       	adc	r17, r19
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	28 2f       	mov	r18, r24
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	8b 81       	ldd	r24, Y+3	; 0x03
 342:	88 2f       	mov	r24, r24
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	82 0f       	add	r24, r18
 348:	93 1f       	adc	r25, r19
 34a:	9e 01       	movw	r18, r28
 34c:	28 5f       	subi	r18, 0xF8	; 248
 34e:	3f 4f       	sbci	r19, 0xFF	; 255
 350:	82 0f       	add	r24, r18
 352:	93 1f       	adc	r25, r19
 354:	fc 01       	movw	r30, r24
 356:	90 81       	ld	r25, Z
 358:	8d 81       	ldd	r24, Y+5	; 0x05
 35a:	f9 2e       	mov	r15, r25
 35c:	f8 26       	eor	r15, r24
 35e:	89 81       	ldd	r24, Y+1	; 0x01
 360:	28 2f       	mov	r18, r24
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	8b 81       	ldd	r24, Y+3	; 0x03
 366:	88 2f       	mov	r24, r24
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	82 0f       	add	r24, r18
 36c:	93 1f       	adc	r25, r19
 36e:	9e 01       	movw	r18, r28
 370:	28 5f       	subi	r18, 0xF8	; 248
 372:	3f 4f       	sbci	r19, 0xFF	; 255
 374:	82 0f       	add	r24, r18
 376:	93 1f       	adc	r25, r19
 378:	fc 01       	movw	r30, r24
 37a:	40 81       	ld	r20, Z
 37c:	89 81       	ldd	r24, Y+1	; 0x01
 37e:	88 2f       	mov	r24, r24
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	9c 01       	movw	r18, r24
 384:	2f 5f       	subi	r18, 0xFF	; 255
 386:	3f 4f       	sbci	r19, 0xFF	; 255
 388:	8b 81       	ldd	r24, Y+3	; 0x03
 38a:	88 2f       	mov	r24, r24
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	82 0f       	add	r24, r18
 390:	93 1f       	adc	r25, r19
 392:	9e 01       	movw	r18, r28
 394:	28 5f       	subi	r18, 0xF8	; 248
 396:	3f 4f       	sbci	r19, 0xFF	; 255
 398:	82 0f       	add	r24, r18
 39a:	93 1f       	adc	r25, r19
 39c:	fc 01       	movw	r30, r24
 39e:	80 81       	ld	r24, Z
 3a0:	84 27       	eor	r24, r20
 3a2:	0e 94 09 03 	call	0x612	; 0x612 <mul2>
 3a6:	8f 25       	eor	r24, r15
 3a8:	f8 01       	movw	r30, r16
 3aa:	80 83       	st	Z, r24
			 plaintext[i]   = t ^ tmp[i]   ^ mul2(tmp[i]   ^ tmp[i+1]);
			 plaintext[i+1] = t ^ tmp[i+1] ^ mul2(tmp[i+1] ^ tmp[i+2]);
			 plaintext[i+2] = t ^ tmp[i+2] ^ mul2(tmp[i+2] ^ tmp[i+3]);
			 saves 140 bytes
			*/
			for (loop=0;loop<3;loop++)
 3ac:	8b 81       	ldd	r24, Y+3	; 0x03
 3ae:	8f 5f       	subi	r24, 0xFF	; 255
 3b0:	8b 83       	std	Y+3, r24	; 0x03
 3b2:	8b 81       	ldd	r24, Y+3	; 0x03
 3b4:	83 30       	cpi	r24, 0x03	; 3
 3b6:	08 f4       	brcc	.+2      	; 0x3ba <aes_decrypt_128+0x21e>
 3b8:	b2 cf       	rjmp	.-156    	; 0x31e <aes_decrypt_128+0x182>
			{
				plaintext[i+loop]   = t ^ tmp[i+loop]   ^ mul2(tmp[i+loop]   ^ tmp[i+1+loop]);
			}
           
            plaintext[i+3] = t ^ tmp[i+3] ^ mul2(tmp[i+3] ^ tmp[i]);
 3ba:	89 81       	ldd	r24, Y+1	; 0x01
 3bc:	88 2f       	mov	r24, r24
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	03 96       	adiw	r24, 0x03	; 3
 3c2:	2c 8d       	ldd	r18, Y+28	; 0x1c
 3c4:	3d 8d       	ldd	r19, Y+29	; 0x1d
 3c6:	89 01       	movw	r16, r18
 3c8:	08 0f       	add	r16, r24
 3ca:	19 1f       	adc	r17, r25
 3cc:	89 81       	ldd	r24, Y+1	; 0x01
 3ce:	88 2f       	mov	r24, r24
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	03 96       	adiw	r24, 0x03	; 3
 3d4:	9e 01       	movw	r18, r28
 3d6:	28 5f       	subi	r18, 0xF8	; 248
 3d8:	3f 4f       	sbci	r19, 0xFF	; 255
 3da:	82 0f       	add	r24, r18
 3dc:	93 1f       	adc	r25, r19
 3de:	fc 01       	movw	r30, r24
 3e0:	90 81       	ld	r25, Z
 3e2:	8d 81       	ldd	r24, Y+5	; 0x05
 3e4:	f9 2e       	mov	r15, r25
 3e6:	f8 26       	eor	r15, r24
 3e8:	89 81       	ldd	r24, Y+1	; 0x01
 3ea:	88 2f       	mov	r24, r24
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	03 96       	adiw	r24, 0x03	; 3
 3f0:	9e 01       	movw	r18, r28
 3f2:	28 5f       	subi	r18, 0xF8	; 248
 3f4:	3f 4f       	sbci	r19, 0xFF	; 255
 3f6:	82 0f       	add	r24, r18
 3f8:	93 1f       	adc	r25, r19
 3fa:	fc 01       	movw	r30, r24
 3fc:	40 81       	ld	r20, Z
 3fe:	89 81       	ldd	r24, Y+1	; 0x01
 400:	88 2f       	mov	r24, r24
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	9e 01       	movw	r18, r28
 406:	28 5f       	subi	r18, 0xF8	; 248
 408:	3f 4f       	sbci	r19, 0xFF	; 255
 40a:	82 0f       	add	r24, r18
 40c:	93 1f       	adc	r25, r19
 40e:	fc 01       	movw	r30, r24
 410:	80 81       	ld	r24, Z
 412:	84 27       	eor	r24, r20
 414:	0e 94 09 03 	call	0x612	; 0x612 <mul2>
 418:	8f 25       	eor	r24, r15
 41a:	f8 01       	movw	r30, r16
 41c:	80 83       	st	Z, r24
            u = mul2(mul2(tmp[i]   ^ tmp[i+2]));
 41e:	89 81       	ldd	r24, Y+1	; 0x01
 420:	88 2f       	mov	r24, r24
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	9e 01       	movw	r18, r28
 426:	28 5f       	subi	r18, 0xF8	; 248
 428:	3f 4f       	sbci	r19, 0xFF	; 255
 42a:	82 0f       	add	r24, r18
 42c:	93 1f       	adc	r25, r19
 42e:	fc 01       	movw	r30, r24
 430:	40 81       	ld	r20, Z
 432:	89 81       	ldd	r24, Y+1	; 0x01
 434:	88 2f       	mov	r24, r24
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	02 96       	adiw	r24, 0x02	; 2
 43a:	9e 01       	movw	r18, r28
 43c:	28 5f       	subi	r18, 0xF8	; 248
 43e:	3f 4f       	sbci	r19, 0xFF	; 255
 440:	82 0f       	add	r24, r18
 442:	93 1f       	adc	r25, r19
 444:	fc 01       	movw	r30, r24
 446:	80 81       	ld	r24, Z
 448:	84 27       	eor	r24, r20
 44a:	0e 94 09 03 	call	0x612	; 0x612 <mul2>
 44e:	0e 94 09 03 	call	0x612	; 0x612 <mul2>
 452:	8e 83       	std	Y+6, r24	; 0x06
            v = mul2(mul2(tmp[i+1] ^ tmp[i+3]));
 454:	89 81       	ldd	r24, Y+1	; 0x01
 456:	88 2f       	mov	r24, r24
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	01 96       	adiw	r24, 0x01	; 1
 45c:	9e 01       	movw	r18, r28
 45e:	28 5f       	subi	r18, 0xF8	; 248
 460:	3f 4f       	sbci	r19, 0xFF	; 255
 462:	82 0f       	add	r24, r18
 464:	93 1f       	adc	r25, r19
 466:	fc 01       	movw	r30, r24
 468:	40 81       	ld	r20, Z
 46a:	89 81       	ldd	r24, Y+1	; 0x01
 46c:	88 2f       	mov	r24, r24
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	03 96       	adiw	r24, 0x03	; 3
 472:	9e 01       	movw	r18, r28
 474:	28 5f       	subi	r18, 0xF8	; 248
 476:	3f 4f       	sbci	r19, 0xFF	; 255
 478:	82 0f       	add	r24, r18
 47a:	93 1f       	adc	r25, r19
 47c:	fc 01       	movw	r30, r24
 47e:	80 81       	ld	r24, Z
 480:	84 27       	eor	r24, r20
 482:	0e 94 09 03 	call	0x612	; 0x612 <mul2>
 486:	0e 94 09 03 	call	0x612	; 0x612 <mul2>
 48a:	8f 83       	std	Y+7, r24	; 0x07
            t = mul2(u ^ v);
 48c:	9e 81       	ldd	r25, Y+6	; 0x06
 48e:	8f 81       	ldd	r24, Y+7	; 0x07
 490:	89 27       	eor	r24, r25
 492:	0e 94 09 03 	call	0x612	; 0x612 <mul2>
 496:	8d 83       	std	Y+5, r24	; 0x05
            plaintext[i+2] ^= t ^ u;
            plaintext[i+3] ^= t ^ v;
			saves 24 bytes
			*/
			
			for (loop2=0;loop2<3;loop2+=2)
 498:	1c 82       	std	Y+4, r1	; 0x04
 49a:	25 c0       	rjmp	.+74     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
			{
				plaintext[i+loop2]   ^= t ^ u;
 49c:	89 81       	ldd	r24, Y+1	; 0x01
 49e:	28 2f       	mov	r18, r24
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	8c 81       	ldd	r24, Y+4	; 0x04
 4a4:	88 2f       	mov	r24, r24
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	82 0f       	add	r24, r18
 4aa:	93 1f       	adc	r25, r19
 4ac:	9c 01       	movw	r18, r24
 4ae:	8c 8d       	ldd	r24, Y+28	; 0x1c
 4b0:	9d 8d       	ldd	r25, Y+29	; 0x1d
 4b2:	82 0f       	add	r24, r18
 4b4:	93 1f       	adc	r25, r19
 4b6:	29 81       	ldd	r18, Y+1	; 0x01
 4b8:	42 2f       	mov	r20, r18
 4ba:	50 e0       	ldi	r21, 0x00	; 0
 4bc:	2c 81       	ldd	r18, Y+4	; 0x04
 4be:	22 2f       	mov	r18, r18
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	24 0f       	add	r18, r20
 4c4:	35 1f       	adc	r19, r21
 4c6:	a9 01       	movw	r20, r18
 4c8:	2c 8d       	ldd	r18, Y+28	; 0x1c
 4ca:	3d 8d       	ldd	r19, Y+29	; 0x1d
 4cc:	24 0f       	add	r18, r20
 4ce:	35 1f       	adc	r19, r21
 4d0:	f9 01       	movw	r30, r18
 4d2:	30 81       	ld	r19, Z
 4d4:	4d 81       	ldd	r20, Y+5	; 0x05
 4d6:	2e 81       	ldd	r18, Y+6	; 0x06
 4d8:	24 27       	eor	r18, r20
 4da:	23 27       	eor	r18, r19
 4dc:	fc 01       	movw	r30, r24
 4de:	20 83       	st	Z, r18
            plaintext[i+2] ^= t ^ u;
            plaintext[i+3] ^= t ^ v;
			saves 24 bytes
			*/
			
			for (loop2=0;loop2<3;loop2+=2)
 4e0:	8c 81       	ldd	r24, Y+4	; 0x04
 4e2:	8e 5f       	subi	r24, 0xFE	; 254
 4e4:	8c 83       	std	Y+4, r24	; 0x04
 4e6:	8c 81       	ldd	r24, Y+4	; 0x04
 4e8:	83 30       	cpi	r24, 0x03	; 3
 4ea:	c0 f2       	brcs	.-80     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
			{
				plaintext[i+loop2]   ^= t ^ u;
			}
			for (loop2=1;loop2<4;loop2+=2)
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	8c 83       	std	Y+4, r24	; 0x04
 4f0:	25 c0       	rjmp	.+74     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
			{
				plaintext[i+loop2] ^= t ^ v;
 4f2:	89 81       	ldd	r24, Y+1	; 0x01
 4f4:	28 2f       	mov	r18, r24
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	8c 81       	ldd	r24, Y+4	; 0x04
 4fa:	88 2f       	mov	r24, r24
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	82 0f       	add	r24, r18
 500:	93 1f       	adc	r25, r19
 502:	9c 01       	movw	r18, r24
 504:	8c 8d       	ldd	r24, Y+28	; 0x1c
 506:	9d 8d       	ldd	r25, Y+29	; 0x1d
 508:	82 0f       	add	r24, r18
 50a:	93 1f       	adc	r25, r19
 50c:	29 81       	ldd	r18, Y+1	; 0x01
 50e:	42 2f       	mov	r20, r18
 510:	50 e0       	ldi	r21, 0x00	; 0
 512:	2c 81       	ldd	r18, Y+4	; 0x04
 514:	22 2f       	mov	r18, r18
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	24 0f       	add	r18, r20
 51a:	35 1f       	adc	r19, r21
 51c:	a9 01       	movw	r20, r18
 51e:	2c 8d       	ldd	r18, Y+28	; 0x1c
 520:	3d 8d       	ldd	r19, Y+29	; 0x1d
 522:	24 0f       	add	r18, r20
 524:	35 1f       	adc	r19, r21
 526:	f9 01       	movw	r30, r18
 528:	30 81       	ld	r19, Z
 52a:	4d 81       	ldd	r20, Y+5	; 0x05
 52c:	2f 81       	ldd	r18, Y+7	; 0x07
 52e:	24 27       	eor	r18, r20
 530:	23 27       	eor	r18, r19
 532:	fc 01       	movw	r30, r24
 534:	20 83       	st	Z, r18
			
			for (loop2=0;loop2<3;loop2+=2)
			{
				plaintext[i+loop2]   ^= t ^ u;
			}
			for (loop2=1;loop2<4;loop2+=2)
 536:	8c 81       	ldd	r24, Y+4	; 0x04
 538:	8e 5f       	subi	r24, 0xFE	; 254
 53a:	8c 83       	std	Y+4, r24	; 0x04
 53c:	8c 81       	ldd	r24, Y+4	; 0x04
 53e:	84 30       	cpi	r24, 0x04	; 4
 540:	c0 f2       	brcs	.-80     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
         * [0e 0b 0d 09]   [s0  s4  s8  s12]
         * [09 0e 0b 0d] . [s1  s5  s9  s13]
         * [0d 09 0e 0b]   [s2  s6  s10 s14]
         * [0b 0d 09 0e]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
 542:	89 81       	ldd	r24, Y+1	; 0x01
 544:	8c 5f       	subi	r24, 0xFC	; 252
 546:	89 83       	std	Y+1, r24	; 0x01
 548:	89 81       	ldd	r24, Y+1	; 0x01
 54a:	80 31       	cpi	r24, 0x10	; 16
 54c:	08 f4       	brcc	.+2      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 54e:	b6 ce       	rjmp	.-660    	; 0x2bc <aes_decrypt_128+0x120>
				plaintext[i+loop2] ^= t ^ v;
			}
        }
        
        // Inverse ShiftRows
        inv_shift_rows(plaintext);
 550:	8c 8d       	ldd	r24, Y+28	; 0x1c
 552:	9d 8d       	ldd	r25, Y+29	; 0x1d
 554:	0e 94 4b 00 	call	0x96	; 0x96 <inv_shift_rows>
        
        // Inverse SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 558:	19 82       	std	Y+1, r1	; 0x01
 55a:	1b c0       	rjmp	.+54     	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
            *(plaintext+i) = INV_SBOX[*(plaintext+i)];
 55c:	89 81       	ldd	r24, Y+1	; 0x01
 55e:	88 2f       	mov	r24, r24
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	2c 8d       	ldd	r18, Y+28	; 0x1c
 564:	3d 8d       	ldd	r19, Y+29	; 0x1d
 566:	82 0f       	add	r24, r18
 568:	93 1f       	adc	r25, r19
 56a:	29 81       	ldd	r18, Y+1	; 0x01
 56c:	22 2f       	mov	r18, r18
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	4c 8d       	ldd	r20, Y+28	; 0x1c
 572:	5d 8d       	ldd	r21, Y+29	; 0x1d
 574:	24 0f       	add	r18, r20
 576:	35 1f       	adc	r19, r21
 578:	f9 01       	movw	r30, r18
 57a:	20 81       	ld	r18, Z
 57c:	22 2f       	mov	r18, r18
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	20 50       	subi	r18, 0x00	; 0
 582:	3f 4f       	sbci	r19, 0xFF	; 255
 584:	f9 01       	movw	r30, r18
 586:	20 81       	ld	r18, Z
 588:	fc 01       	movw	r30, r24
 58a:	20 83       	st	Z, r18
        
        // Inverse ShiftRows
        inv_shift_rows(plaintext);
        
        // Inverse SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 58c:	89 81       	ldd	r24, Y+1	; 0x01
 58e:	8f 5f       	subi	r24, 0xFF	; 255
 590:	89 83       	std	Y+1, r24	; 0x01
 592:	89 81       	ldd	r24, Y+1	; 0x01
 594:	80 31       	cpi	r24, 0x10	; 16
 596:	10 f3       	brcs	.-60     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
            *(plaintext+i) = INV_SBOX[*(plaintext+i)];
        }

        roundkeys -= 16;
 598:	88 8d       	ldd	r24, Y+24	; 0x18
 59a:	99 8d       	ldd	r25, Y+25	; 0x19
 59c:	40 97       	sbiw	r24, 0x10	; 16
 59e:	99 8f       	std	Y+25, r25	; 0x19
 5a0:	88 8f       	std	Y+24, r24	; 0x18
    inv_shift_rows(plaintext);
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
 5a2:	8a 81       	ldd	r24, Y+2	; 0x02
 5a4:	8f 5f       	subi	r24, 0xFF	; 255
 5a6:	8a 83       	std	Y+2, r24	; 0x02
 5a8:	8a 81       	ldd	r24, Y+2	; 0x02
 5aa:	8a 30       	cpi	r24, 0x0A	; 10
 5ac:	08 f4       	brcc	.+2      	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 5ae:	5f ce       	rjmp	.-834    	; 0x26e <aes_decrypt_128+0xd2>
        roundkeys -= 16;

    }

    // last AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 5b0:	19 82       	std	Y+1, r1	; 0x01
 5b2:	1f c0       	rjmp	.+62     	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
        *(plaintext+i) ^= *(roundkeys+i);
 5b4:	89 81       	ldd	r24, Y+1	; 0x01
 5b6:	88 2f       	mov	r24, r24
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	2c 8d       	ldd	r18, Y+28	; 0x1c
 5bc:	3d 8d       	ldd	r19, Y+29	; 0x1d
 5be:	82 0f       	add	r24, r18
 5c0:	93 1f       	adc	r25, r19
 5c2:	29 81       	ldd	r18, Y+1	; 0x01
 5c4:	22 2f       	mov	r18, r18
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	4c 8d       	ldd	r20, Y+28	; 0x1c
 5ca:	5d 8d       	ldd	r21, Y+29	; 0x1d
 5cc:	24 0f       	add	r18, r20
 5ce:	35 1f       	adc	r19, r21
 5d0:	f9 01       	movw	r30, r18
 5d2:	60 81       	ld	r22, Z
 5d4:	29 81       	ldd	r18, Y+1	; 0x01
 5d6:	22 2f       	mov	r18, r18
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	48 8d       	ldd	r20, Y+24	; 0x18
 5dc:	59 8d       	ldd	r21, Y+25	; 0x19
 5de:	24 0f       	add	r18, r20
 5e0:	35 1f       	adc	r19, r21
 5e2:	f9 01       	movw	r30, r18
 5e4:	20 81       	ld	r18, Z
 5e6:	26 27       	eor	r18, r22
 5e8:	fc 01       	movw	r30, r24
 5ea:	20 83       	st	Z, r18
        roundkeys -= 16;

    }

    // last AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 5ec:	89 81       	ldd	r24, Y+1	; 0x01
 5ee:	8f 5f       	subi	r24, 0xFF	; 255
 5f0:	89 83       	std	Y+1, r24	; 0x01
 5f2:	89 81       	ldd	r24, Y+1	; 0x01
 5f4:	80 31       	cpi	r24, 0x10	; 16
 5f6:	f0 f2       	brcs	.-68     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
        *(plaintext+i) ^= *(roundkeys+i);
    }

 5f8:	00 00       	nop
 5fa:	6d 96       	adiw	r28, 0x1d	; 29
 5fc:	0f b6       	in	r0, 0x3f	; 63
 5fe:	f8 94       	cli
 600:	de bf       	out	0x3e, r29	; 62
 602:	0f be       	out	0x3f, r0	; 63
 604:	cd bf       	out	0x3d, r28	; 61
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	1f 91       	pop	r17
 60c:	0f 91       	pop	r16
 60e:	ff 90       	pop	r15
 610:	08 95       	ret

00000612 <mul2>:
 * by the polynomial x^8 + x^4 + x^3 + x + 1 = 0
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */

 uint8_t mul2(uint8_t a) {
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	1f 92       	push	r1
 618:	cd b7       	in	r28, 0x3d	; 61
 61a:	de b7       	in	r29, 0x3e	; 62
 61c:	89 83       	std	Y+1, r24	; 0x01
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
 61e:	89 81       	ldd	r24, Y+1	; 0x01
 620:	88 23       	and	r24, r24
 622:	4c f4       	brge	.+18     	; 0x636 <mul2+0x24>
 624:	89 81       	ldd	r24, Y+1	; 0x01
 626:	88 2f       	mov	r24, r24
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	98 2f       	mov	r25, r24
 630:	8b e1       	ldi	r24, 0x1B	; 27
 632:	89 27       	eor	r24, r25
 634:	02 c0       	rjmp	.+4      	; 0x63a <mul2+0x28>
 636:	89 81       	ldd	r24, Y+1	; 0x01
 638:	88 0f       	add	r24, r24
}
 63a:	0f 90       	pop	r0
 63c:	df 91       	pop	r29
 63e:	cf 91       	pop	r28
 640:	08 95       	ret

00000642 <shift_rows>:
 *  Row0: s0  s4  s8  s12   <<< 0 byte
 *  Row1: s1  s5  s9  s13   <<< 1 byte
 *  Row2: s2  s6  s10 s14   <<< 2 bytes
 *  Row3: s3  s7  s11 s15   <<< 3 bytes
 */
static void shift_rows(uint8_t *state) {
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
 646:	00 d0       	rcall	.+0      	; 0x648 <shift_rows+0x6>
 648:	1f 92       	push	r1
 64a:	cd b7       	in	r28, 0x3d	; 61
 64c:	de b7       	in	r29, 0x3e	; 62
 64e:	9b 83       	std	Y+3, r25	; 0x03
 650:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t temp,loop;
    // row1
    temp        = *(state+1);
 652:	8a 81       	ldd	r24, Y+2	; 0x02
 654:	9b 81       	ldd	r25, Y+3	; 0x03
 656:	fc 01       	movw	r30, r24
 658:	81 81       	ldd	r24, Z+1	; 0x01
 65a:	89 83       	std	Y+1, r24	; 0x01
    *(state+1)  = *(state+5);
 65c:	8a 81       	ldd	r24, Y+2	; 0x02
 65e:	9b 81       	ldd	r25, Y+3	; 0x03
 660:	01 96       	adiw	r24, 0x01	; 1
 662:	2a 81       	ldd	r18, Y+2	; 0x02
 664:	3b 81       	ldd	r19, Y+3	; 0x03
 666:	f9 01       	movw	r30, r18
 668:	25 81       	ldd	r18, Z+5	; 0x05
 66a:	fc 01       	movw	r30, r24
 66c:	20 83       	st	Z, r18
    *(state+5)  = *(state+9);
 66e:	8a 81       	ldd	r24, Y+2	; 0x02
 670:	9b 81       	ldd	r25, Y+3	; 0x03
 672:	05 96       	adiw	r24, 0x05	; 5
 674:	2a 81       	ldd	r18, Y+2	; 0x02
 676:	3b 81       	ldd	r19, Y+3	; 0x03
 678:	f9 01       	movw	r30, r18
 67a:	21 85       	ldd	r18, Z+9	; 0x09
 67c:	fc 01       	movw	r30, r24
 67e:	20 83       	st	Z, r18
    *(state+9)  = *(state+13);
 680:	8a 81       	ldd	r24, Y+2	; 0x02
 682:	9b 81       	ldd	r25, Y+3	; 0x03
 684:	09 96       	adiw	r24, 0x09	; 9
 686:	2a 81       	ldd	r18, Y+2	; 0x02
 688:	3b 81       	ldd	r19, Y+3	; 0x03
 68a:	f9 01       	movw	r30, r18
 68c:	25 85       	ldd	r18, Z+13	; 0x0d
 68e:	fc 01       	movw	r30, r24
 690:	20 83       	st	Z, r18
    *(state+13) = temp;
 692:	8a 81       	ldd	r24, Y+2	; 0x02
 694:	9b 81       	ldd	r25, Y+3	; 0x03
 696:	0d 96       	adiw	r24, 0x0d	; 13
 698:	29 81       	ldd	r18, Y+1	; 0x01
 69a:	fc 01       	movw	r30, r24
 69c:	20 83       	st	Z, r18
    // row2
    temp        = *(state+2);
 69e:	8a 81       	ldd	r24, Y+2	; 0x02
 6a0:	9b 81       	ldd	r25, Y+3	; 0x03
 6a2:	fc 01       	movw	r30, r24
 6a4:	82 81       	ldd	r24, Z+2	; 0x02
 6a6:	89 83       	std	Y+1, r24	; 0x01
    *(state+2)  = *(state+10);
 6a8:	8a 81       	ldd	r24, Y+2	; 0x02
 6aa:	9b 81       	ldd	r25, Y+3	; 0x03
 6ac:	02 96       	adiw	r24, 0x02	; 2
 6ae:	2a 81       	ldd	r18, Y+2	; 0x02
 6b0:	3b 81       	ldd	r19, Y+3	; 0x03
 6b2:	f9 01       	movw	r30, r18
 6b4:	22 85       	ldd	r18, Z+10	; 0x0a
 6b6:	fc 01       	movw	r30, r24
 6b8:	20 83       	st	Z, r18
    *(state+10) = temp;
 6ba:	8a 81       	ldd	r24, Y+2	; 0x02
 6bc:	9b 81       	ldd	r25, Y+3	; 0x03
 6be:	0a 96       	adiw	r24, 0x0a	; 10
 6c0:	29 81       	ldd	r18, Y+1	; 0x01
 6c2:	fc 01       	movw	r30, r24
 6c4:	20 83       	st	Z, r18
    temp        = *(state+6);
 6c6:	8a 81       	ldd	r24, Y+2	; 0x02
 6c8:	9b 81       	ldd	r25, Y+3	; 0x03
 6ca:	fc 01       	movw	r30, r24
 6cc:	86 81       	ldd	r24, Z+6	; 0x06
 6ce:	89 83       	std	Y+1, r24	; 0x01
    *(state+6)  = *(state+14);
 6d0:	8a 81       	ldd	r24, Y+2	; 0x02
 6d2:	9b 81       	ldd	r25, Y+3	; 0x03
 6d4:	06 96       	adiw	r24, 0x06	; 6
 6d6:	2a 81       	ldd	r18, Y+2	; 0x02
 6d8:	3b 81       	ldd	r19, Y+3	; 0x03
 6da:	f9 01       	movw	r30, r18
 6dc:	26 85       	ldd	r18, Z+14	; 0x0e
 6de:	fc 01       	movw	r30, r24
 6e0:	20 83       	st	Z, r18
    *(state+14) = temp;
 6e2:	8a 81       	ldd	r24, Y+2	; 0x02
 6e4:	9b 81       	ldd	r25, Y+3	; 0x03
 6e6:	0e 96       	adiw	r24, 0x0e	; 14
 6e8:	29 81       	ldd	r18, Y+1	; 0x01
 6ea:	fc 01       	movw	r30, r24
 6ec:	20 83       	st	Z, r18
    // row3
    temp        = *(state+15);
 6ee:	8a 81       	ldd	r24, Y+2	; 0x02
 6f0:	9b 81       	ldd	r25, Y+3	; 0x03
 6f2:	fc 01       	movw	r30, r24
 6f4:	87 85       	ldd	r24, Z+15	; 0x0f
 6f6:	89 83       	std	Y+1, r24	; 0x01
    *(state+15) = *(state+11);
 6f8:	8a 81       	ldd	r24, Y+2	; 0x02
 6fa:	9b 81       	ldd	r25, Y+3	; 0x03
 6fc:	0f 96       	adiw	r24, 0x0f	; 15
 6fe:	2a 81       	ldd	r18, Y+2	; 0x02
 700:	3b 81       	ldd	r19, Y+3	; 0x03
 702:	f9 01       	movw	r30, r18
 704:	23 85       	ldd	r18, Z+11	; 0x0b
 706:	fc 01       	movw	r30, r24
 708:	20 83       	st	Z, r18
    *(state+11) = *(state+7);
 70a:	8a 81       	ldd	r24, Y+2	; 0x02
 70c:	9b 81       	ldd	r25, Y+3	; 0x03
 70e:	0b 96       	adiw	r24, 0x0b	; 11
 710:	2a 81       	ldd	r18, Y+2	; 0x02
 712:	3b 81       	ldd	r19, Y+3	; 0x03
 714:	f9 01       	movw	r30, r18
 716:	27 81       	ldd	r18, Z+7	; 0x07
 718:	fc 01       	movw	r30, r24
 71a:	20 83       	st	Z, r18
    *(state+7)  = *(state+3);
 71c:	8a 81       	ldd	r24, Y+2	; 0x02
 71e:	9b 81       	ldd	r25, Y+3	; 0x03
 720:	07 96       	adiw	r24, 0x07	; 7
 722:	2a 81       	ldd	r18, Y+2	; 0x02
 724:	3b 81       	ldd	r19, Y+3	; 0x03
 726:	f9 01       	movw	r30, r18
 728:	23 81       	ldd	r18, Z+3	; 0x03
 72a:	fc 01       	movw	r30, r24
 72c:	20 83       	st	Z, r18
    *(state+3)  = temp;
 72e:	8a 81       	ldd	r24, Y+2	; 0x02
 730:	9b 81       	ldd	r25, Y+3	; 0x03
 732:	03 96       	adiw	r24, 0x03	; 3
 734:	29 81       	ldd	r18, Y+1	; 0x01
 736:	fc 01       	movw	r30, r24
 738:	20 83       	st	Z, r18
}
 73a:	00 00       	nop
 73c:	0f 90       	pop	r0
 73e:	0f 90       	pop	r0
 740:	0f 90       	pop	r0
 742:	df 91       	pop	r29
 744:	cf 91       	pop	r28
 746:	08 95       	ret

00000748 <aes_encrypt_128>:

 void aes_encrypt_128( uint8_t *roundkeys,  uint8_t *plaintext,  uint8_t *ciphertext) {
 748:	0f 93       	push	r16
 74a:	1f 93       	push	r17
 74c:	cf 93       	push	r28
 74e:	df 93       	push	r29
 750:	cd b7       	in	r28, 0x3d	; 61
 752:	de b7       	in	r29, 0x3e	; 62
 754:	6a 97       	sbiw	r28, 0x1a	; 26
 756:	0f b6       	in	r0, 0x3f	; 63
 758:	f8 94       	cli
 75a:	de bf       	out	0x3e, r29	; 62
 75c:	0f be       	out	0x3f, r0	; 63
 75e:	cd bf       	out	0x3d, r28	; 61
 760:	9e 8b       	std	Y+22, r25	; 0x16
 762:	8d 8b       	std	Y+21, r24	; 0x15
 764:	78 8f       	std	Y+24, r23	; 0x18
 766:	6f 8b       	std	Y+23, r22	; 0x17
 768:	5a 8f       	std	Y+26, r21	; 0x1a
 76a:	49 8f       	std	Y+25, r20	; 0x19

    uint8_t tmp[16], t;
    uint8_t i, j , loop;
    // first AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 76c:	19 82       	std	Y+1, r1	; 0x01
 76e:	1f c0       	rjmp	.+62     	; 0x7ae <aes_encrypt_128+0x66>
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
 770:	89 81       	ldd	r24, Y+1	; 0x01
 772:	88 2f       	mov	r24, r24
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	29 8d       	ldd	r18, Y+25	; 0x19
 778:	3a 8d       	ldd	r19, Y+26	; 0x1a
 77a:	28 0f       	add	r18, r24
 77c:	39 1f       	adc	r19, r25
 77e:	89 81       	ldd	r24, Y+1	; 0x01
 780:	88 2f       	mov	r24, r24
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	4f 89       	ldd	r20, Y+23	; 0x17
 786:	58 8d       	ldd	r21, Y+24	; 0x18
 788:	84 0f       	add	r24, r20
 78a:	95 1f       	adc	r25, r21
 78c:	fc 01       	movw	r30, r24
 78e:	60 81       	ld	r22, Z
 790:	8d 89       	ldd	r24, Y+21	; 0x15
 792:	9e 89       	ldd	r25, Y+22	; 0x16
 794:	ac 01       	movw	r20, r24
 796:	4f 5f       	subi	r20, 0xFF	; 255
 798:	5f 4f       	sbci	r21, 0xFF	; 255
 79a:	5e 8b       	std	Y+22, r21	; 0x16
 79c:	4d 8b       	std	Y+21, r20	; 0x15
 79e:	fc 01       	movw	r30, r24
 7a0:	80 81       	ld	r24, Z
 7a2:	86 27       	eor	r24, r22
 7a4:	f9 01       	movw	r30, r18
 7a6:	80 83       	st	Z, r24
 void aes_encrypt_128( uint8_t *roundkeys,  uint8_t *plaintext,  uint8_t *ciphertext) {

    uint8_t tmp[16], t;
    uint8_t i, j , loop;
    // first AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 7a8:	89 81       	ldd	r24, Y+1	; 0x01
 7aa:	8f 5f       	subi	r24, 0xFF	; 255
 7ac:	89 83       	std	Y+1, r24	; 0x01
 7ae:	89 81       	ldd	r24, Y+1	; 0x01
 7b0:	80 31       	cpi	r24, 0x10	; 16
 7b2:	f0 f2       	brcs	.-68     	; 0x770 <aes_encrypt_128+0x28>
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
    }

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	8a 83       	std	Y+2, r24	; 0x02
 7b8:	08 c1       	rjmp	.+528    	; 0x9ca <__stack+0xcb>

        // SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 7ba:	19 82       	std	Y+1, r1	; 0x01
 7bc:	1c c0       	rjmp	.+56     	; 0x7f6 <aes_encrypt_128+0xae>
            *(tmp+i) = SBOX[*(ciphertext+i)];
 7be:	89 81       	ldd	r24, Y+1	; 0x01
 7c0:	88 2f       	mov	r24, r24
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	9e 01       	movw	r18, r28
 7c6:	2b 5f       	subi	r18, 0xFB	; 251
 7c8:	3f 4f       	sbci	r19, 0xFF	; 255
 7ca:	82 0f       	add	r24, r18
 7cc:	93 1f       	adc	r25, r19
 7ce:	29 81       	ldd	r18, Y+1	; 0x01
 7d0:	22 2f       	mov	r18, r18
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	49 8d       	ldd	r20, Y+25	; 0x19
 7d6:	5a 8d       	ldd	r21, Y+26	; 0x1a
 7d8:	24 0f       	add	r18, r20
 7da:	35 1f       	adc	r19, r21
 7dc:	f9 01       	movw	r30, r18
 7de:	20 81       	ld	r18, Z
 7e0:	22 2f       	mov	r18, r18
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	20 50       	subi	r18, 0x00	; 0
 7e6:	3e 4f       	sbci	r19, 0xFE	; 254
 7e8:	f9 01       	movw	r30, r18
 7ea:	20 81       	ld	r18, Z
 7ec:	fc 01       	movw	r30, r24
 7ee:	20 83       	st	Z, r18

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {

        // SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 7f0:	89 81       	ldd	r24, Y+1	; 0x01
 7f2:	8f 5f       	subi	r24, 0xFF	; 255
 7f4:	89 83       	std	Y+1, r24	; 0x01
 7f6:	89 81       	ldd	r24, Y+1	; 0x01
 7f8:	80 31       	cpi	r24, 0x10	; 16
 7fa:	08 f3       	brcs	.-62     	; 0x7be <aes_encrypt_128+0x76>
            *(tmp+i) = SBOX[*(ciphertext+i)];
        }
        shift_rows(tmp);
 7fc:	ce 01       	movw	r24, r28
 7fe:	05 96       	adiw	r24, 0x05	; 5
 800:	0e 94 21 03 	call	0x642	; 0x642 <shift_rows>
         * [01 02 03 01] . [s1  s5  s9  s13]
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
		
        for (i = 0; i < AES_BLOCK_SIZE; i+=4)  {
 804:	19 82       	std	Y+1, r1	; 0x01
 806:	b6 c0       	rjmp	.+364    	; 0x974 <__stack+0x75>
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
 808:	89 81       	ldd	r24, Y+1	; 0x01
 80a:	88 2f       	mov	r24, r24
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	9e 01       	movw	r18, r28
 810:	2b 5f       	subi	r18, 0xFB	; 251
 812:	3f 4f       	sbci	r19, 0xFF	; 255
 814:	82 0f       	add	r24, r18
 816:	93 1f       	adc	r25, r19
 818:	fc 01       	movw	r30, r24
 81a:	40 81       	ld	r20, Z
 81c:	89 81       	ldd	r24, Y+1	; 0x01
 81e:	88 2f       	mov	r24, r24
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	01 96       	adiw	r24, 0x01	; 1
 824:	9e 01       	movw	r18, r28
 826:	2b 5f       	subi	r18, 0xFB	; 251
 828:	3f 4f       	sbci	r19, 0xFF	; 255
 82a:	82 0f       	add	r24, r18
 82c:	93 1f       	adc	r25, r19
 82e:	fc 01       	movw	r30, r24
 830:	80 81       	ld	r24, Z
 832:	48 27       	eor	r20, r24
 834:	89 81       	ldd	r24, Y+1	; 0x01
 836:	88 2f       	mov	r24, r24
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	02 96       	adiw	r24, 0x02	; 2
 83c:	9e 01       	movw	r18, r28
 83e:	2b 5f       	subi	r18, 0xFB	; 251
 840:	3f 4f       	sbci	r19, 0xFF	; 255
 842:	82 0f       	add	r24, r18
 844:	93 1f       	adc	r25, r19
 846:	fc 01       	movw	r30, r24
 848:	80 81       	ld	r24, Z
 84a:	48 27       	eor	r20, r24
 84c:	89 81       	ldd	r24, Y+1	; 0x01
 84e:	88 2f       	mov	r24, r24
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	03 96       	adiw	r24, 0x03	; 3
 854:	9e 01       	movw	r18, r28
 856:	2b 5f       	subi	r18, 0xFB	; 251
 858:	3f 4f       	sbci	r19, 0xFF	; 255
 85a:	82 0f       	add	r24, r18
 85c:	93 1f       	adc	r25, r19
 85e:	fc 01       	movw	r30, r24
 860:	80 81       	ld	r24, Z
 862:	84 27       	eor	r24, r20
 864:	8c 83       	std	Y+4, r24	; 0x04
			ciphertext[i]   = mul2(tmp[i]   ^ tmp[i+1]) ^ tmp[i]   ^ t;
			ciphertext[i+1] = mul2(tmp[i+1] ^ tmp[i+2]) ^ tmp[i+1] ^ t;
			ciphertext[i+2] = mul2(tmp[i+2] ^ tmp[i+3]) ^ tmp[i+2] ^ t;
			saves 144 bytes
			*/
			for (loop=0;loop<3;loop++)
 866:	1b 82       	std	Y+3, r1	; 0x03
 868:	4b c0       	rjmp	.+150    	; 0x900 <__stack+0x1>
			{
				ciphertext[i+loop]   = mul2(tmp[i+loop]   ^ tmp[i+1+loop]) ^ tmp[i+loop]   ^ t;
 86a:	89 81       	ldd	r24, Y+1	; 0x01
 86c:	28 2f       	mov	r18, r24
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	8b 81       	ldd	r24, Y+3	; 0x03
 872:	88 2f       	mov	r24, r24
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	82 0f       	add	r24, r18
 878:	93 1f       	adc	r25, r19
 87a:	9c 01       	movw	r18, r24
 87c:	89 8d       	ldd	r24, Y+25	; 0x19
 87e:	9a 8d       	ldd	r25, Y+26	; 0x1a
 880:	8c 01       	movw	r16, r24
 882:	02 0f       	add	r16, r18
 884:	13 1f       	adc	r17, r19
 886:	89 81       	ldd	r24, Y+1	; 0x01
 888:	28 2f       	mov	r18, r24
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	8b 81       	ldd	r24, Y+3	; 0x03
 88e:	88 2f       	mov	r24, r24
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	82 0f       	add	r24, r18
 894:	93 1f       	adc	r25, r19
 896:	9e 01       	movw	r18, r28
 898:	2b 5f       	subi	r18, 0xFB	; 251
 89a:	3f 4f       	sbci	r19, 0xFF	; 255
 89c:	82 0f       	add	r24, r18
 89e:	93 1f       	adc	r25, r19
 8a0:	fc 01       	movw	r30, r24
 8a2:	40 81       	ld	r20, Z
 8a4:	89 81       	ldd	r24, Y+1	; 0x01
 8a6:	88 2f       	mov	r24, r24
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	9c 01       	movw	r18, r24
 8ac:	2f 5f       	subi	r18, 0xFF	; 255
 8ae:	3f 4f       	sbci	r19, 0xFF	; 255
 8b0:	8b 81       	ldd	r24, Y+3	; 0x03
 8b2:	88 2f       	mov	r24, r24
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	82 0f       	add	r24, r18
 8b8:	93 1f       	adc	r25, r19
 8ba:	9e 01       	movw	r18, r28
 8bc:	2b 5f       	subi	r18, 0xFB	; 251
 8be:	3f 4f       	sbci	r19, 0xFF	; 255
 8c0:	82 0f       	add	r24, r18
 8c2:	93 1f       	adc	r25, r19
 8c4:	fc 01       	movw	r30, r24
 8c6:	80 81       	ld	r24, Z
 8c8:	84 27       	eor	r24, r20
 8ca:	0e 94 09 03 	call	0x612	; 0x612 <mul2>
 8ce:	48 2f       	mov	r20, r24
 8d0:	89 81       	ldd	r24, Y+1	; 0x01
 8d2:	28 2f       	mov	r18, r24
 8d4:	30 e0       	ldi	r19, 0x00	; 0
 8d6:	8b 81       	ldd	r24, Y+3	; 0x03
 8d8:	88 2f       	mov	r24, r24
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	82 0f       	add	r24, r18
 8de:	93 1f       	adc	r25, r19
 8e0:	9e 01       	movw	r18, r28
 8e2:	2b 5f       	subi	r18, 0xFB	; 251
 8e4:	3f 4f       	sbci	r19, 0xFF	; 255
 8e6:	82 0f       	add	r24, r18
 8e8:	93 1f       	adc	r25, r19
 8ea:	fc 01       	movw	r30, r24
 8ec:	80 81       	ld	r24, Z
 8ee:	94 2f       	mov	r25, r20
 8f0:	98 27       	eor	r25, r24
 8f2:	8c 81       	ldd	r24, Y+4	; 0x04
 8f4:	89 27       	eor	r24, r25
 8f6:	f8 01       	movw	r30, r16
 8f8:	80 83       	st	Z, r24
			ciphertext[i]   = mul2(tmp[i]   ^ tmp[i+1]) ^ tmp[i]   ^ t;
			ciphertext[i+1] = mul2(tmp[i+1] ^ tmp[i+2]) ^ tmp[i+1] ^ t;
			ciphertext[i+2] = mul2(tmp[i+2] ^ tmp[i+3]) ^ tmp[i+2] ^ t;
			saves 144 bytes
			*/
			for (loop=0;loop<3;loop++)
 8fa:	8b 81       	ldd	r24, Y+3	; 0x03
 8fc:	8f 5f       	subi	r24, 0xFF	; 255
 8fe:	8b 83       	std	Y+3, r24	; 0x03
 900:	8b 81       	ldd	r24, Y+3	; 0x03
 902:	83 30       	cpi	r24, 0x03	; 3
 904:	08 f4       	brcc	.+2      	; 0x908 <__stack+0x9>
 906:	b1 cf       	rjmp	.-158    	; 0x86a <aes_encrypt_128+0x122>
			{
				ciphertext[i+loop]   = mul2(tmp[i+loop]   ^ tmp[i+1+loop]) ^ tmp[i+loop]   ^ t;
			}
            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
 908:	89 81       	ldd	r24, Y+1	; 0x01
 90a:	88 2f       	mov	r24, r24
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	03 96       	adiw	r24, 0x03	; 3
 910:	29 8d       	ldd	r18, Y+25	; 0x19
 912:	3a 8d       	ldd	r19, Y+26	; 0x1a
 914:	89 01       	movw	r16, r18
 916:	08 0f       	add	r16, r24
 918:	19 1f       	adc	r17, r25
 91a:	89 81       	ldd	r24, Y+1	; 0x01
 91c:	88 2f       	mov	r24, r24
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	03 96       	adiw	r24, 0x03	; 3
 922:	9e 01       	movw	r18, r28
 924:	2b 5f       	subi	r18, 0xFB	; 251
 926:	3f 4f       	sbci	r19, 0xFF	; 255
 928:	82 0f       	add	r24, r18
 92a:	93 1f       	adc	r25, r19
 92c:	fc 01       	movw	r30, r24
 92e:	40 81       	ld	r20, Z
 930:	89 81       	ldd	r24, Y+1	; 0x01
 932:	88 2f       	mov	r24, r24
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	9e 01       	movw	r18, r28
 938:	2b 5f       	subi	r18, 0xFB	; 251
 93a:	3f 4f       	sbci	r19, 0xFF	; 255
 93c:	82 0f       	add	r24, r18
 93e:	93 1f       	adc	r25, r19
 940:	fc 01       	movw	r30, r24
 942:	80 81       	ld	r24, Z
 944:	84 27       	eor	r24, r20
 946:	0e 94 09 03 	call	0x612	; 0x612 <mul2>
 94a:	48 2f       	mov	r20, r24
 94c:	89 81       	ldd	r24, Y+1	; 0x01
 94e:	88 2f       	mov	r24, r24
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	03 96       	adiw	r24, 0x03	; 3
 954:	9e 01       	movw	r18, r28
 956:	2b 5f       	subi	r18, 0xFB	; 251
 958:	3f 4f       	sbci	r19, 0xFF	; 255
 95a:	82 0f       	add	r24, r18
 95c:	93 1f       	adc	r25, r19
 95e:	fc 01       	movw	r30, r24
 960:	80 81       	ld	r24, Z
 962:	94 2f       	mov	r25, r20
 964:	98 27       	eor	r25, r24
 966:	8c 81       	ldd	r24, Y+4	; 0x04
 968:	89 27       	eor	r24, r25
 96a:	f8 01       	movw	r30, r16
 96c:	80 83       	st	Z, r24
         * [01 02 03 01] . [s1  s5  s9  s13]
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
		
        for (i = 0; i < AES_BLOCK_SIZE; i+=4)  {
 96e:	89 81       	ldd	r24, Y+1	; 0x01
 970:	8c 5f       	subi	r24, 0xFC	; 252
 972:	89 83       	std	Y+1, r24	; 0x01
 974:	89 81       	ldd	r24, Y+1	; 0x01
 976:	80 31       	cpi	r24, 0x10	; 16
 978:	08 f4       	brcc	.+2      	; 0x97c <__stack+0x7d>
 97a:	46 cf       	rjmp	.-372    	; 0x808 <aes_encrypt_128+0xc0>
			}
            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
        }

        // AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 97c:	19 82       	std	Y+1, r1	; 0x01
 97e:	1f c0       	rjmp	.+62     	; 0x9be <__stack+0xbf>
            *(ciphertext+i) ^= *roundkeys++;
 980:	8d 89       	ldd	r24, Y+21	; 0x15
 982:	9e 89       	ldd	r25, Y+22	; 0x16
 984:	9c 01       	movw	r18, r24
 986:	2f 5f       	subi	r18, 0xFF	; 255
 988:	3f 4f       	sbci	r19, 0xFF	; 255
 98a:	3e 8b       	std	Y+22, r19	; 0x16
 98c:	2d 8b       	std	Y+21, r18	; 0x15
 98e:	fc 01       	movw	r30, r24
 990:	60 81       	ld	r22, Z
 992:	89 81       	ldd	r24, Y+1	; 0x01
 994:	88 2f       	mov	r24, r24
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	29 8d       	ldd	r18, Y+25	; 0x19
 99a:	3a 8d       	ldd	r19, Y+26	; 0x1a
 99c:	82 0f       	add	r24, r18
 99e:	93 1f       	adc	r25, r19
 9a0:	29 81       	ldd	r18, Y+1	; 0x01
 9a2:	22 2f       	mov	r18, r18
 9a4:	30 e0       	ldi	r19, 0x00	; 0
 9a6:	49 8d       	ldd	r20, Y+25	; 0x19
 9a8:	5a 8d       	ldd	r21, Y+26	; 0x1a
 9aa:	24 0f       	add	r18, r20
 9ac:	35 1f       	adc	r19, r21
 9ae:	f9 01       	movw	r30, r18
 9b0:	20 81       	ld	r18, Z
 9b2:	26 27       	eor	r18, r22
 9b4:	fc 01       	movw	r30, r24
 9b6:	20 83       	st	Z, r18
			}
            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
        }

        // AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 9b8:	89 81       	ldd	r24, Y+1	; 0x01
 9ba:	8f 5f       	subi	r24, 0xFF	; 255
 9bc:	89 83       	std	Y+1, r24	; 0x01
 9be:	89 81       	ldd	r24, Y+1	; 0x01
 9c0:	80 31       	cpi	r24, 0x10	; 16
 9c2:	f0 f2       	brcs	.-68     	; 0x980 <__stack+0x81>
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
    }

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {
 9c4:	8a 81       	ldd	r24, Y+2	; 0x02
 9c6:	8f 5f       	subi	r24, 0xFF	; 255
 9c8:	8a 83       	std	Y+2, r24	; 0x02
 9ca:	8a 81       	ldd	r24, Y+2	; 0x02
 9cc:	8a 30       	cpi	r24, 0x0A	; 10
 9ce:	08 f4       	brcc	.+2      	; 0x9d2 <__stack+0xd3>
 9d0:	f4 ce       	rjmp	.-536    	; 0x7ba <aes_encrypt_128+0x72>
        }

    }
    
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 9d2:	19 82       	std	Y+1, r1	; 0x01
 9d4:	1b c0       	rjmp	.+54     	; 0xa0c <__stack+0x10d>
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
 9d6:	89 81       	ldd	r24, Y+1	; 0x01
 9d8:	88 2f       	mov	r24, r24
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	29 8d       	ldd	r18, Y+25	; 0x19
 9de:	3a 8d       	ldd	r19, Y+26	; 0x1a
 9e0:	82 0f       	add	r24, r18
 9e2:	93 1f       	adc	r25, r19
 9e4:	29 81       	ldd	r18, Y+1	; 0x01
 9e6:	22 2f       	mov	r18, r18
 9e8:	30 e0       	ldi	r19, 0x00	; 0
 9ea:	49 8d       	ldd	r20, Y+25	; 0x19
 9ec:	5a 8d       	ldd	r21, Y+26	; 0x1a
 9ee:	24 0f       	add	r18, r20
 9f0:	35 1f       	adc	r19, r21
 9f2:	f9 01       	movw	r30, r18
 9f4:	20 81       	ld	r18, Z
 9f6:	22 2f       	mov	r18, r18
 9f8:	30 e0       	ldi	r19, 0x00	; 0
 9fa:	20 50       	subi	r18, 0x00	; 0
 9fc:	3e 4f       	sbci	r19, 0xFE	; 254
 9fe:	f9 01       	movw	r30, r18
 a00:	20 81       	ld	r18, Z
 a02:	fc 01       	movw	r30, r24
 a04:	20 83       	st	Z, r18
        }

    }
    
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 a06:	89 81       	ldd	r24, Y+1	; 0x01
 a08:	8f 5f       	subi	r24, 0xFF	; 255
 a0a:	89 83       	std	Y+1, r24	; 0x01
 a0c:	89 81       	ldd	r24, Y+1	; 0x01
 a0e:	80 31       	cpi	r24, 0x10	; 16
 a10:	10 f3       	brcs	.-60     	; 0x9d6 <__stack+0xd7>
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
    }
    shift_rows(ciphertext);
 a12:	89 8d       	ldd	r24, Y+25	; 0x19
 a14:	9a 8d       	ldd	r25, Y+26	; 0x1a
 a16:	0e 94 21 03 	call	0x642	; 0x642 <shift_rows>
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 a1a:	19 82       	std	Y+1, r1	; 0x01
 a1c:	1f c0       	rjmp	.+62     	; 0xa5c <__stack+0x15d>
        *(ciphertext+i) ^= *roundkeys++;
 a1e:	8d 89       	ldd	r24, Y+21	; 0x15
 a20:	9e 89       	ldd	r25, Y+22	; 0x16
 a22:	9c 01       	movw	r18, r24
 a24:	2f 5f       	subi	r18, 0xFF	; 255
 a26:	3f 4f       	sbci	r19, 0xFF	; 255
 a28:	3e 8b       	std	Y+22, r19	; 0x16
 a2a:	2d 8b       	std	Y+21, r18	; 0x15
 a2c:	fc 01       	movw	r30, r24
 a2e:	60 81       	ld	r22, Z
 a30:	89 81       	ldd	r24, Y+1	; 0x01
 a32:	88 2f       	mov	r24, r24
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	29 8d       	ldd	r18, Y+25	; 0x19
 a38:	3a 8d       	ldd	r19, Y+26	; 0x1a
 a3a:	82 0f       	add	r24, r18
 a3c:	93 1f       	adc	r25, r19
 a3e:	29 81       	ldd	r18, Y+1	; 0x01
 a40:	22 2f       	mov	r18, r18
 a42:	30 e0       	ldi	r19, 0x00	; 0
 a44:	49 8d       	ldd	r20, Y+25	; 0x19
 a46:	5a 8d       	ldd	r21, Y+26	; 0x1a
 a48:	24 0f       	add	r18, r20
 a4a:	35 1f       	adc	r19, r21
 a4c:	f9 01       	movw	r30, r18
 a4e:	20 81       	ld	r18, Z
 a50:	26 27       	eor	r18, r22
 a52:	fc 01       	movw	r30, r24
 a54:	20 83       	st	Z, r18
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
    }
    shift_rows(ciphertext);
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 a56:	89 81       	ldd	r24, Y+1	; 0x01
 a58:	8f 5f       	subi	r24, 0xFF	; 255
 a5a:	89 83       	std	Y+1, r24	; 0x01
 a5c:	89 81       	ldd	r24, Y+1	; 0x01
 a5e:	80 31       	cpi	r24, 0x10	; 16
 a60:	f0 f2       	brcs	.-68     	; 0xa1e <__stack+0x11f>
        *(ciphertext+i) ^= *roundkeys++;
    }

}
 a62:	00 00       	nop
 a64:	6a 96       	adiw	r28, 0x1a	; 26
 a66:	0f b6       	in	r0, 0x3f	; 63
 a68:	f8 94       	cli
 a6a:	de bf       	out	0x3e, r29	; 62
 a6c:	0f be       	out	0x3f, r0	; 63
 a6e:	cd bf       	out	0x3d, r28	; 61
 a70:	df 91       	pop	r29
 a72:	cf 91       	pop	r28
 a74:	1f 91       	pop	r17
 a76:	0f 91       	pop	r16
 a78:	08 95       	ret

00000a7a <aes_key_schedule_128>:
#include "aes_encrypt.h"
/*
 * round constants
 */
static uint8_t RC[10] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};
void aes_key_schedule_128(const uint8_t *key, uint8_t *roundkeys) {
 a7a:	cf 93       	push	r28
 a7c:	df 93       	push	r29
 a7e:	cd b7       	in	r28, 0x3d	; 61
 a80:	de b7       	in	r29, 0x3e	; 62
 a82:	2e 97       	sbiw	r28, 0x0e	; 14
 a84:	0f b6       	in	r0, 0x3f	; 63
 a86:	f8 94       	cli
 a88:	de bf       	out	0x3e, r29	; 62
 a8a:	0f be       	out	0x3f, r0	; 63
 a8c:	cd bf       	out	0x3d, r28	; 61
 a8e:	9c 87       	std	Y+12, r25	; 0x0c
 a90:	8b 87       	std	Y+11, r24	; 0x0b
 a92:	7e 87       	std	Y+14, r23	; 0x0e
 a94:	6d 87       	std	Y+13, r22	; 0x0d
    uint8_t temp[4];
    uint8_t *last4bytes; // point to the last 4 bytes of one round
    uint8_t *lastround;
    uint8_t i , loop;

    for (i = 0; i < 16; ++i) {
 a96:	1d 82       	std	Y+5, r1	; 0x05
 a98:	15 c0       	rjmp	.+42     	; 0xac4 <aes_key_schedule_128+0x4a>
        *roundkeys++ = *key++;
 a9a:	8d 85       	ldd	r24, Y+13	; 0x0d
 a9c:	9e 85       	ldd	r25, Y+14	; 0x0e
 a9e:	9c 01       	movw	r18, r24
 aa0:	2f 5f       	subi	r18, 0xFF	; 255
 aa2:	3f 4f       	sbci	r19, 0xFF	; 255
 aa4:	3e 87       	std	Y+14, r19	; 0x0e
 aa6:	2d 87       	std	Y+13, r18	; 0x0d
 aa8:	2b 85       	ldd	r18, Y+11	; 0x0b
 aaa:	3c 85       	ldd	r19, Y+12	; 0x0c
 aac:	a9 01       	movw	r20, r18
 aae:	4f 5f       	subi	r20, 0xFF	; 255
 ab0:	5f 4f       	sbci	r21, 0xFF	; 255
 ab2:	5c 87       	std	Y+12, r21	; 0x0c
 ab4:	4b 87       	std	Y+11, r20	; 0x0b
 ab6:	f9 01       	movw	r30, r18
 ab8:	20 81       	ld	r18, Z
 aba:	fc 01       	movw	r30, r24
 abc:	20 83       	st	Z, r18
    uint8_t temp[4];
    uint8_t *last4bytes; // point to the last 4 bytes of one round
    uint8_t *lastround;
    uint8_t i , loop;

    for (i = 0; i < 16; ++i) {
 abe:	8d 81       	ldd	r24, Y+5	; 0x05
 ac0:	8f 5f       	subi	r24, 0xFF	; 255
 ac2:	8d 83       	std	Y+5, r24	; 0x05
 ac4:	8d 81       	ldd	r24, Y+5	; 0x05
 ac6:	80 31       	cpi	r24, 0x10	; 16
 ac8:	40 f3       	brcs	.-48     	; 0xa9a <aes_key_schedule_128+0x20>
        *roundkeys++ = *key++;
    }

    last4bytes = roundkeys-4;
 aca:	8d 85       	ldd	r24, Y+13	; 0x0d
 acc:	9e 85       	ldd	r25, Y+14	; 0x0e
 ace:	04 97       	sbiw	r24, 0x04	; 4
 ad0:	9a 83       	std	Y+2, r25	; 0x02
 ad2:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0; i < AES_ROUNDS; ++i) {
 ad4:	1d 82       	std	Y+5, r1	; 0x05
 ad6:	8b c0       	rjmp	.+278    	; 0xbee <aes_key_schedule_128+0x174>
		
        // k0-k3 for next round
        temp[3] = SBOX[*last4bytes++];
 ad8:	89 81       	ldd	r24, Y+1	; 0x01
 ada:	9a 81       	ldd	r25, Y+2	; 0x02
 adc:	9c 01       	movw	r18, r24
 ade:	2f 5f       	subi	r18, 0xFF	; 255
 ae0:	3f 4f       	sbci	r19, 0xFF	; 255
 ae2:	3a 83       	std	Y+2, r19	; 0x02
 ae4:	29 83       	std	Y+1, r18	; 0x01
 ae6:	fc 01       	movw	r30, r24
 ae8:	80 81       	ld	r24, Z
 aea:	88 2f       	mov	r24, r24
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	80 50       	subi	r24, 0x00	; 0
 af0:	9e 4f       	sbci	r25, 0xFE	; 254
 af2:	fc 01       	movw	r30, r24
 af4:	80 81       	ld	r24, Z
 af6:	8a 87       	std	Y+10, r24	; 0x0a
		 temp[0] = SBOX[*last4bytes++];
        temp[1] = SBOX[*last4bytes++];
        temp[2] = SBOX[*last4bytes++];
		saves 32 bytes
		*/
		for (loop=0;loop<3;loop++)
 af8:	1e 82       	std	Y+6, r1	; 0x06
 afa:	1b c0       	rjmp	.+54     	; 0xb32 <aes_key_schedule_128+0xb8>
		{
			 temp[loop] = SBOX[*last4bytes++];
 afc:	8e 81       	ldd	r24, Y+6	; 0x06
 afe:	28 2f       	mov	r18, r24
 b00:	30 e0       	ldi	r19, 0x00	; 0
 b02:	89 81       	ldd	r24, Y+1	; 0x01
 b04:	9a 81       	ldd	r25, Y+2	; 0x02
 b06:	ac 01       	movw	r20, r24
 b08:	4f 5f       	subi	r20, 0xFF	; 255
 b0a:	5f 4f       	sbci	r21, 0xFF	; 255
 b0c:	5a 83       	std	Y+2, r21	; 0x02
 b0e:	49 83       	std	Y+1, r20	; 0x01
 b10:	fc 01       	movw	r30, r24
 b12:	80 81       	ld	r24, Z
 b14:	88 2f       	mov	r24, r24
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	80 50       	subi	r24, 0x00	; 0
 b1a:	9e 4f       	sbci	r25, 0xFE	; 254
 b1c:	fc 01       	movw	r30, r24
 b1e:	40 81       	ld	r20, Z
 b20:	ce 01       	movw	r24, r28
 b22:	07 96       	adiw	r24, 0x07	; 7
 b24:	82 0f       	add	r24, r18
 b26:	93 1f       	adc	r25, r19
 b28:	fc 01       	movw	r30, r24
 b2a:	40 83       	st	Z, r20
		 temp[0] = SBOX[*last4bytes++];
        temp[1] = SBOX[*last4bytes++];
        temp[2] = SBOX[*last4bytes++];
		saves 32 bytes
		*/
		for (loop=0;loop<3;loop++)
 b2c:	8e 81       	ldd	r24, Y+6	; 0x06
 b2e:	8f 5f       	subi	r24, 0xFF	; 255
 b30:	8e 83       	std	Y+6, r24	; 0x06
 b32:	8e 81       	ldd	r24, Y+6	; 0x06
 b34:	83 30       	cpi	r24, 0x03	; 3
 b36:	10 f3       	brcs	.-60     	; 0xafc <aes_key_schedule_128+0x82>
		{
			 temp[loop] = SBOX[*last4bytes++];
		}
       
        temp[0] ^= RC[i];
 b38:	2f 81       	ldd	r18, Y+7	; 0x07
 b3a:	8d 81       	ldd	r24, Y+5	; 0x05
 b3c:	88 2f       	mov	r24, r24
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	80 50       	subi	r24, 0x00	; 0
 b42:	9d 4f       	sbci	r25, 0xFD	; 253
 b44:	fc 01       	movw	r30, r24
 b46:	80 81       	ld	r24, Z
 b48:	82 27       	eor	r24, r18
 b4a:	8f 83       	std	Y+7, r24	; 0x07
        lastround = roundkeys-16;
 b4c:	8d 85       	ldd	r24, Y+13	; 0x0d
 b4e:	9e 85       	ldd	r25, Y+14	; 0x0e
 b50:	40 97       	sbiw	r24, 0x10	; 16
 b52:	9c 83       	std	Y+4, r25	; 0x04
 b54:	8b 83       	std	Y+3, r24	; 0x03
         *roundkeys++ = temp[1] ^ *lastround++;
         *roundkeys++ = temp[2] ^ *lastround++;
         *roundkeys++ = temp[3] ^ *lastround++;
		 saves 86 bytes
		 */
		for (loop =0;loop<4;loop++)
 b56:	1e 82       	std	Y+6, r1	; 0x06
 b58:	20 c0       	rjmp	.+64     	; 0xb9a <aes_key_schedule_128+0x120>
		{
			*roundkeys++ = temp[loop] ^ *lastround++;
 b5a:	8d 85       	ldd	r24, Y+13	; 0x0d
 b5c:	9e 85       	ldd	r25, Y+14	; 0x0e
 b5e:	9c 01       	movw	r18, r24
 b60:	2f 5f       	subi	r18, 0xFF	; 255
 b62:	3f 4f       	sbci	r19, 0xFF	; 255
 b64:	3e 87       	std	Y+14, r19	; 0x0e
 b66:	2d 87       	std	Y+13, r18	; 0x0d
 b68:	2e 81       	ldd	r18, Y+6	; 0x06
 b6a:	22 2f       	mov	r18, r18
 b6c:	30 e0       	ldi	r19, 0x00	; 0
 b6e:	ae 01       	movw	r20, r28
 b70:	49 5f       	subi	r20, 0xF9	; 249
 b72:	5f 4f       	sbci	r21, 0xFF	; 255
 b74:	24 0f       	add	r18, r20
 b76:	35 1f       	adc	r19, r21
 b78:	f9 01       	movw	r30, r18
 b7a:	60 81       	ld	r22, Z
 b7c:	2b 81       	ldd	r18, Y+3	; 0x03
 b7e:	3c 81       	ldd	r19, Y+4	; 0x04
 b80:	a9 01       	movw	r20, r18
 b82:	4f 5f       	subi	r20, 0xFF	; 255
 b84:	5f 4f       	sbci	r21, 0xFF	; 255
 b86:	5c 83       	std	Y+4, r21	; 0x04
 b88:	4b 83       	std	Y+3, r20	; 0x03
 b8a:	f9 01       	movw	r30, r18
 b8c:	20 81       	ld	r18, Z
 b8e:	26 27       	eor	r18, r22
 b90:	fc 01       	movw	r30, r24
 b92:	20 83       	st	Z, r18
         *roundkeys++ = temp[1] ^ *lastround++;
         *roundkeys++ = temp[2] ^ *lastround++;
         *roundkeys++ = temp[3] ^ *lastround++;
		 saves 86 bytes
		 */
		for (loop =0;loop<4;loop++)
 b94:	8e 81       	ldd	r24, Y+6	; 0x06
 b96:	8f 5f       	subi	r24, 0xFF	; 255
 b98:	8e 83       	std	Y+6, r24	; 0x06
 b9a:	8e 81       	ldd	r24, Y+6	; 0x06
 b9c:	84 30       	cpi	r24, 0x04	; 4
 b9e:	e8 f2       	brcs	.-70     	; 0xb5a <aes_key_schedule_128+0xe0>
	   *roundkeys++ = *last4bytes++ ^ *lastround++;
	   *roundkeys++ = *last4bytes++ ^ *lastround++;
	   *roundkeys++ = *last4bytes++ ^ *lastround++;
	   saves 600 bytes
	   */
	   for (loop =0;loop<12;loop++)
 ba0:	1e 82       	std	Y+6, r1	; 0x06
 ba2:	1f c0       	rjmp	.+62     	; 0xbe2 <aes_key_schedule_128+0x168>
	   {     
        *roundkeys++ = *last4bytes++ ^ *lastround++;
 ba4:	8d 85       	ldd	r24, Y+13	; 0x0d
 ba6:	9e 85       	ldd	r25, Y+14	; 0x0e
 ba8:	9c 01       	movw	r18, r24
 baa:	2f 5f       	subi	r18, 0xFF	; 255
 bac:	3f 4f       	sbci	r19, 0xFF	; 255
 bae:	3e 87       	std	Y+14, r19	; 0x0e
 bb0:	2d 87       	std	Y+13, r18	; 0x0d
 bb2:	29 81       	ldd	r18, Y+1	; 0x01
 bb4:	3a 81       	ldd	r19, Y+2	; 0x02
 bb6:	a9 01       	movw	r20, r18
 bb8:	4f 5f       	subi	r20, 0xFF	; 255
 bba:	5f 4f       	sbci	r21, 0xFF	; 255
 bbc:	5a 83       	std	Y+2, r21	; 0x02
 bbe:	49 83       	std	Y+1, r20	; 0x01
 bc0:	f9 01       	movw	r30, r18
 bc2:	60 81       	ld	r22, Z
 bc4:	2b 81       	ldd	r18, Y+3	; 0x03
 bc6:	3c 81       	ldd	r19, Y+4	; 0x04
 bc8:	a9 01       	movw	r20, r18
 bca:	4f 5f       	subi	r20, 0xFF	; 255
 bcc:	5f 4f       	sbci	r21, 0xFF	; 255
 bce:	5c 83       	std	Y+4, r21	; 0x04
 bd0:	4b 83       	std	Y+3, r20	; 0x03
 bd2:	f9 01       	movw	r30, r18
 bd4:	20 81       	ld	r18, Z
 bd6:	26 27       	eor	r18, r22
 bd8:	fc 01       	movw	r30, r24
 bda:	20 83       	st	Z, r18
	   *roundkeys++ = *last4bytes++ ^ *lastround++;
	   *roundkeys++ = *last4bytes++ ^ *lastround++;
	   *roundkeys++ = *last4bytes++ ^ *lastround++;
	   saves 600 bytes
	   */
	   for (loop =0;loop<12;loop++)
 bdc:	8e 81       	ldd	r24, Y+6	; 0x06
 bde:	8f 5f       	subi	r24, 0xFF	; 255
 be0:	8e 83       	std	Y+6, r24	; 0x06
 be2:	8e 81       	ldd	r24, Y+6	; 0x06
 be4:	8c 30       	cpi	r24, 0x0C	; 12
 be6:	f0 f2       	brcs	.-68     	; 0xba4 <aes_key_schedule_128+0x12a>
    for (i = 0; i < 16; ++i) {
        *roundkeys++ = *key++;
    }

    last4bytes = roundkeys-4;
    for (i = 0; i < AES_ROUNDS; ++i) {
 be8:	8d 81       	ldd	r24, Y+5	; 0x05
 bea:	8f 5f       	subi	r24, 0xFF	; 255
 bec:	8d 83       	std	Y+5, r24	; 0x05
 bee:	8d 81       	ldd	r24, Y+5	; 0x05
 bf0:	8a 30       	cpi	r24, 0x0A	; 10
 bf2:	08 f4       	brcc	.+2      	; 0xbf6 <aes_key_schedule_128+0x17c>
 bf4:	71 cf       	rjmp	.-286    	; 0xad8 <aes_key_schedule_128+0x5e>
	   for (loop =0;loop<12;loop++)
	   {     
        *roundkeys++ = *last4bytes++ ^ *lastround++;
	   }
    }
}
 bf6:	00 00       	nop
 bf8:	2e 96       	adiw	r28, 0x0e	; 14
 bfa:	0f b6       	in	r0, 0x3f	; 63
 bfc:	f8 94       	cli
 bfe:	de bf       	out	0x3e, r29	; 62
 c00:	0f be       	out	0x3f, r0	; 63
 c02:	cd bf       	out	0x3d, r28	; 61
 c04:	df 91       	pop	r29
 c06:	cf 91       	pop	r28
 c08:	08 95       	ret

00000c0a <main>:
#include "aes_decrypt.h"
#include "aes_encrypt.h"
#include "aes_schedule.h"


int main(int argc, char *argv[]) {
 c0a:	cf 93       	push	r28
 c0c:	df 93       	push	r29
 c0e:	cd b7       	in	r28, 0x3d	; 61
 c10:	de b7       	in	r29, 0x3e	; 62
 c12:	c5 5f       	subi	r28, 0xF5	; 245
 c14:	d1 09       	sbc	r29, r1
 c16:	0f b6       	in	r0, 0x3f	; 63
 c18:	f8 94       	cli
 c1a:	de bf       	out	0x3e, r29	; 62
 c1c:	0f be       	out	0x3f, r0	; 63
 c1e:	cd bf       	out	0x3d, r28	; 61
 c20:	9e 01       	movw	r18, r28
 c22:	2e 50       	subi	r18, 0x0E	; 14
 c24:	3f 4f       	sbci	r19, 0xFF	; 255
 c26:	f9 01       	movw	r30, r18
 c28:	91 83       	std	Z+1, r25	; 0x01
 c2a:	80 83       	st	Z, r24
 c2c:	ce 01       	movw	r24, r28
 c2e:	8c 50       	subi	r24, 0x0C	; 12
 c30:	9f 4f       	sbci	r25, 0xFF	; 255
 c32:	fc 01       	movw	r30, r24
 c34:	71 83       	std	Z+1, r23	; 0x01
 c36:	60 83       	st	Z, r22

	uint8_t i;
	

	/* 128 bit key */
	const uint8_t key[] = {
 c38:	80 e1       	ldi	r24, 0x10	; 16
 c3a:	ea e0       	ldi	r30, 0x0A	; 10
 c3c:	f3 e0       	ldi	r31, 0x03	; 3
 c3e:	de 01       	movw	r26, r28
 c40:	12 96       	adiw	r26, 0x02	; 2
 c42:	01 90       	ld	r0, Z+
 c44:	0d 92       	st	X+, r0
 c46:	8a 95       	dec	r24
 c48:	e1 f7       	brne	.-8      	; 0xc42 <main+0x38>
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 

	};

	uint8_t plaintext[] = {
 c4a:	80 e1       	ldi	r24, 0x10	; 16
 c4c:	ea e1       	ldi	r30, 0x1A	; 26
 c4e:	f3 e0       	ldi	r31, 0x03	; 3
 c50:	de 01       	movw	r26, r28
 c52:	52 96       	adiw	r26, 0x12	; 18
 c54:	01 90       	ld	r0, Z+
 c56:	0d 92       	st	X+, r0
 c58:	8a 95       	dec	r24
 c5a:	e1 f7       	brne	.-8      	; 0xc54 <main+0x4a>
	};

 
	 uint8_t ciphertext[AES_BLOCK_SIZE];

	const uint8_t const_cipher[AES_BLOCK_SIZE] = {
 c5c:	80 e1       	ldi	r24, 0x10	; 16
 c5e:	ea e2       	ldi	r30, 0x2A	; 42
 c60:	f3 e0       	ldi	r31, 0x03	; 3
 c62:	de 01       	movw	r26, r28
 c64:	d2 96       	adiw	r26, 0x32	; 50
 c66:	01 90       	ld	r0, Z+
 c68:	0d 92       	st	X+, r0
 c6a:	8a 95       	dec	r24
 c6c:	e1 f7       	brne	.-8      	; 0xc66 <main+0x5c>
	};
	
	uint8_t roundkeys[AES_ROUND_KEY_SIZE];

	// key schedule
	aes_key_schedule_128(key, roundkeys);
 c6e:	9e 01       	movw	r18, r28
 c70:	2e 5b       	subi	r18, 0xBE	; 190
 c72:	3f 4f       	sbci	r19, 0xFF	; 255
 c74:	ce 01       	movw	r24, r28
 c76:	02 96       	adiw	r24, 0x02	; 2
 c78:	b9 01       	movw	r22, r18
 c7a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <aes_key_schedule_128>

	// encryption
	aes_encrypt_128(roundkeys, plaintext, ciphertext);
 c7e:	ae 01       	movw	r20, r28
 c80:	4e 5d       	subi	r20, 0xDE	; 222
 c82:	5f 4f       	sbci	r21, 0xFF	; 255
 c84:	9e 01       	movw	r18, r28
 c86:	2e 5e       	subi	r18, 0xEE	; 238
 c88:	3f 4f       	sbci	r19, 0xFF	; 255
 c8a:	ce 01       	movw	r24, r28
 c8c:	8e 5b       	subi	r24, 0xBE	; 190
 c8e:	9f 4f       	sbci	r25, 0xFF	; 255
 c90:	b9 01       	movw	r22, r18
 c92:	0e 94 a4 03 	call	0x748	; 0x748 <aes_encrypt_128>

	for (i = 0; i < AES_BLOCK_SIZE; i++) {
 c96:	19 82       	std	Y+1, r1	; 0x01
 c98:	19 c0       	rjmp	.+50     	; 0xccc <main+0xc2>
		if ( ciphertext[i] != const_cipher[i] ) { break; }
 c9a:	89 81       	ldd	r24, Y+1	; 0x01
 c9c:	88 2f       	mov	r24, r24
 c9e:	90 e0       	ldi	r25, 0x00	; 0
 ca0:	9e 01       	movw	r18, r28
 ca2:	2e 5d       	subi	r18, 0xDE	; 222
 ca4:	3f 4f       	sbci	r19, 0xFF	; 255
 ca6:	82 0f       	add	r24, r18
 ca8:	93 1f       	adc	r25, r19
 caa:	fc 01       	movw	r30, r24
 cac:	40 81       	ld	r20, Z
 cae:	89 81       	ldd	r24, Y+1	; 0x01
 cb0:	88 2f       	mov	r24, r24
 cb2:	90 e0       	ldi	r25, 0x00	; 0
 cb4:	9e 01       	movw	r18, r28
 cb6:	2e 5c       	subi	r18, 0xCE	; 206
 cb8:	3f 4f       	sbci	r19, 0xFF	; 255
 cba:	82 0f       	add	r24, r18
 cbc:	93 1f       	adc	r25, r19
 cbe:	fc 01       	movw	r30, r24
 cc0:	80 81       	ld	r24, Z
 cc2:	48 17       	cp	r20, r24
 cc4:	39 f4       	brne	.+14     	; 0xcd4 <main+0xca>
	aes_key_schedule_128(key, roundkeys);

	// encryption
	aes_encrypt_128(roundkeys, plaintext, ciphertext);

	for (i = 0; i < AES_BLOCK_SIZE; i++) {
 cc6:	89 81       	ldd	r24, Y+1	; 0x01
 cc8:	8f 5f       	subi	r24, 0xFF	; 255
 cca:	89 83       	std	Y+1, r24	; 0x01
 ccc:	89 81       	ldd	r24, Y+1	; 0x01
 cce:	80 31       	cpi	r24, 0x10	; 16
 cd0:	20 f3       	brcs	.-56     	; 0xc9a <main+0x90>
 cd2:	01 c0       	rjmp	.+2      	; 0xcd6 <main+0xcc>
		if ( ciphertext[i] != const_cipher[i] ) { break; }
 cd4:	00 00       	nop
	}


	// decryption
	aes_decrypt_128(roundkeys, ciphertext, ciphertext);	
 cd6:	ae 01       	movw	r20, r28
 cd8:	4e 5d       	subi	r20, 0xDE	; 222
 cda:	5f 4f       	sbci	r21, 0xFF	; 255
 cdc:	9e 01       	movw	r18, r28
 cde:	2e 5d       	subi	r18, 0xDE	; 222
 ce0:	3f 4f       	sbci	r19, 0xFF	; 255
 ce2:	ce 01       	movw	r24, r28
 ce4:	8e 5b       	subi	r24, 0xBE	; 190
 ce6:	9f 4f       	sbci	r25, 0xFF	; 255
 ce8:	b9 01       	movw	r22, r18
 cea:	0e 94 ce 00 	call	0x19c	; 0x19c <aes_decrypt_128>
	for (i = 0; i < AES_BLOCK_SIZE; i++) {
 cee:	19 82       	std	Y+1, r1	; 0x01
 cf0:	19 c0       	rjmp	.+50     	; 0xd24 <main+0x11a>
		if ( ciphertext[i] != plaintext[i] ) { break; }
 cf2:	89 81       	ldd	r24, Y+1	; 0x01
 cf4:	88 2f       	mov	r24, r24
 cf6:	90 e0       	ldi	r25, 0x00	; 0
 cf8:	9e 01       	movw	r18, r28
 cfa:	2e 5d       	subi	r18, 0xDE	; 222
 cfc:	3f 4f       	sbci	r19, 0xFF	; 255
 cfe:	82 0f       	add	r24, r18
 d00:	93 1f       	adc	r25, r19
 d02:	fc 01       	movw	r30, r24
 d04:	40 81       	ld	r20, Z
 d06:	89 81       	ldd	r24, Y+1	; 0x01
 d08:	88 2f       	mov	r24, r24
 d0a:	90 e0       	ldi	r25, 0x00	; 0
 d0c:	9e 01       	movw	r18, r28
 d0e:	2e 5e       	subi	r18, 0xEE	; 238
 d10:	3f 4f       	sbci	r19, 0xFF	; 255
 d12:	82 0f       	add	r24, r18
 d14:	93 1f       	adc	r25, r19
 d16:	fc 01       	movw	r30, r24
 d18:	80 81       	ld	r24, Z
 d1a:	48 17       	cp	r20, r24
 d1c:	39 f4       	brne	.+14     	; 0xd2c <main+0x122>
	}


	// decryption
	aes_decrypt_128(roundkeys, ciphertext, ciphertext);	
	for (i = 0; i < AES_BLOCK_SIZE; i++) {
 d1e:	89 81       	ldd	r24, Y+1	; 0x01
 d20:	8f 5f       	subi	r24, 0xFF	; 255
 d22:	89 83       	std	Y+1, r24	; 0x01
 d24:	89 81       	ldd	r24, Y+1	; 0x01
 d26:	80 31       	cpi	r24, 0x10	; 16
 d28:	20 f3       	brcs	.-56     	; 0xcf2 <main+0xe8>
 d2a:	01 c0       	rjmp	.+2      	; 0xd2e <main+0x124>
		if ( ciphertext[i] != plaintext[i] ) { break; }
 d2c:	00 00       	nop
	}

	return 0;
 d2e:	80 e0       	ldi	r24, 0x00	; 0
 d30:	90 e0       	ldi	r25, 0x00	; 0
}
 d32:	cb 50       	subi	r28, 0x0B	; 11
 d34:	df 4f       	sbci	r29, 0xFF	; 255
 d36:	0f b6       	in	r0, 0x3f	; 63
 d38:	f8 94       	cli
 d3a:	de bf       	out	0x3e, r29	; 62
 d3c:	0f be       	out	0x3f, r0	; 63
 d3e:	cd bf       	out	0x3d, r28	; 61
 d40:	df 91       	pop	r29
 d42:	cf 91       	pop	r28
 d44:	08 95       	ret

00000d46 <_exit>:
 d46:	f8 94       	cli

00000d48 <__stop_program>:
 d48:	ff cf       	rjmp	.-2      	; 0xd48 <__stop_program>
